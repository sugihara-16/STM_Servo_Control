
test_at2814.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c80  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08008e58  08008e58  00018e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009104  08009104  000206a0  2**0
                  CONTENTS
  4 .ARM          00000008  08009104  08009104  00019104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800910c  0800910c  000206a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800910c  0800910c  0001910c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009110  08009110  00019110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006a0  20000000  08009114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  200006a0  080097b4  000206a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000be4  080097b4  00020be4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000206a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000206d0  2**0
                  CONTENTS, READONLY
 13 .debug_line   00045776  00000000  00000000  00020713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000077  00000000  00000000  00065e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00051e16  00000000  00000000  00065f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008552  00000000  00000000  000b7d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001d98  00000000  00000000  000c0268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001012d9  00000000  00000000  000c2000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002e8a  00000000  00000000  001c32d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002c39c  00000000  00000000  001c6163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005460  00000000  00000000  001f2500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0001a3ba  00000000  00000000  001f7960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200006a0 	.word	0x200006a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008e40 	.word	0x08008e40

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200006a4 	.word	0x200006a4
 8000214:	08008e40 	.word	0x08008e40

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000514:	480d      	ldr	r0, [pc, #52]	; (800054c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000516:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <LoopForever+0x6>)
  ldr r1, =_edata
 800051a:	490e      	ldr	r1, [pc, #56]	; (8000554 <LoopForever+0xa>)
  ldr r2, =_sidata
 800051c:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <LoopForever+0xe>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000520:	e002      	b.n	8000528 <LoopCopyDataInit>

08000522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000526:	3304      	adds	r3, #4

08000528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800052c:	d3f9      	bcc.n	8000522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052e:	4a0b      	ldr	r2, [pc, #44]	; (800055c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000530:	4c0b      	ldr	r4, [pc, #44]	; (8000560 <LoopForever+0x16>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000534:	e001      	b.n	800053a <LoopFillZerobss>

08000536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000538:	3204      	adds	r2, #4

0800053a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800053c:	d3fb      	bcc.n	8000536 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800053e:	f003 f90d 	bl	800375c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000542:	f008 fc59 	bl	8008df8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000546:	f000 f845 	bl	80005d4 <main>

0800054a <LoopForever>:

LoopForever:
    b LoopForever
 800054a:	e7fe      	b.n	800054a <LoopForever>
  ldr   r0, =_estack
 800054c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000554:	200006a0 	.word	0x200006a0
  ldr r2, =_sidata
 8000558:	08009114 	.word	0x08009114
  ldr r2, =_sbss
 800055c:	200006a0 	.word	0x200006a0
  ldr r4, =_ebss
 8000560:	20000be4 	.word	0x20000be4

08000564 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000564:	e7fe      	b.n	8000564 <BusFault_Handler>
	...

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b510      	push	{r4, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056c:	2238      	movs	r2, #56	; 0x38
 800056e:	2100      	movs	r1, #0
 8000570:	a806      	add	r0, sp, #24
 8000572:	f008 fc39 	bl	8008de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000576:	2000      	movs	r0, #0
 8000578:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800057c:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8000580:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000582:	f004 fbd1 	bl	8004d28 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000588:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 800058a:	2255      	movs	r2, #85	; 0x55
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000590:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000594:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000598:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800059a:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a2:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f004 fc34 	bl	8004e14 <HAL_RCC_OscConfig>
 80005ac:	b108      	cbz	r0, 80005b2 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ae:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <SystemClock_Config+0x48>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b2:	2104      	movs	r1, #4
 80005b4:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b8:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c6:	f004 fea9 	bl	800531c <HAL_RCC_ClockConfig>
 80005ca:	b108      	cbz	r0, 80005d0 <SystemClock_Config+0x68>
 80005cc:	b672      	cpsid	i
  while (1)
 80005ce:	e7fe      	b.n	80005ce <SystemClock_Config+0x66>
}
 80005d0:	b014      	add	sp, #80	; 0x50
 80005d2:	bd10      	pop	{r4, pc}

080005d4 <main>:
{
 80005d4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	2400      	movs	r4, #0
{
 80005da:	b0a9      	sub	sp, #164	; 0xa4
  HAL_Init();
 80005dc:	f003 f8ee 	bl	80037bc <HAL_Init>
  SystemClock_Config();
 80005e0:	f7ff ffc2 	bl	8000568 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e8:	4bab      	ldr	r3, [pc, #684]	; (8000898 <main+0x2c4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	941d      	str	r4, [sp, #116]	; 0x74
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80005ee:	48ab      	ldr	r0, [pc, #684]	; (800089c <main+0x2c8>)
  hadc1.Instance = ADC1;
 80005f0:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 80008d8 <main+0x304>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f4:	f042 0204 	orr.w	r2, r2, #4
 80005f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80005fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005fc:	f002 0204 	and.w	r2, r2, #4
 8000600:	9202      	str	r2, [sp, #8]
 8000602:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000604:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000606:	f042 0220 	orr.w	r2, r2, #32
 800060a:	64da      	str	r2, [r3, #76]	; 0x4c
 800060c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800060e:	f002 0220 	and.w	r2, r2, #32
 8000612:	9203      	str	r2, [sp, #12]
 8000614:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000618:	f042 0201 	orr.w	r2, r2, #1
 800061c:	64da      	str	r2, [r3, #76]	; 0x4c
 800061e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000620:	f002 0201 	and.w	r2, r2, #1
 8000624:	9204      	str	r2, [sp, #16]
 8000626:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800062a:	f042 0202 	orr.w	r2, r2, #2
 800062e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000638:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800063c:	a919      	add	r1, sp, #100	; 0x64
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800063e:	9319      	str	r3, [sp, #100]	; 0x64
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000640:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000642:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000646:	931a      	str	r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000648:	f004 f9f8 	bl	8004a3c <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800064c:	4621      	mov	r1, r4
 800064e:	223c      	movs	r2, #60	; 0x3c
 8000650:	a819      	add	r0, sp, #100	; 0x64
  ADC_MultiModeTypeDef multimode = {0};
 8000652:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000656:	940e      	str	r4, [sp, #56]	; 0x38
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000658:	f008 fbc6 	bl	8008de8 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 800065c:	2220      	movs	r2, #32
 800065e:	4621      	mov	r1, r4
 8000660:	a811      	add	r0, sp, #68	; 0x44
 8000662:	f008 fbc1 	bl	8008de8 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000666:	f44f 2800 	mov.w	r8, #524288	; 0x80000
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066a:	e9cb 440b 	strd	r4, r4, [fp, #44]	; 0x2c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800066e:	f8cb 4008 	str.w	r4, [fp, #8]
  hadc1.Init.GainCompensation = 0;
 8000672:	f8cb 4010 	str.w	r4, [fp, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000676:	f8ab 401c 	strh.w	r4, [fp, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800067a:	f88b 4024 	strb.w	r4, [fp, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800067e:	f88b 4038 	strb.w	r4, [fp, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000682:	f8cb 403c 	str.w	r4, [fp, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000686:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800068a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800068e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000692:	2501      	movs	r5, #1
 8000694:	2404      	movs	r4, #4
  hadc1.Init.NbrOfConversion = 2;
 8000696:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000698:	4658      	mov	r0, fp
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800069a:	e9cb 2800 	strd	r2, r8, [fp]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069e:	e9cb 5405 	strd	r5, r4, [fp, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80006a2:	f8cb 700c 	str.w	r7, [fp, #12]
  hadc1.Init.NbrOfConversion = 2;
 80006a6:	f8cb 6020 	str.w	r6, [fp, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006aa:	f003 f8bb 	bl	8003824 <HAL_ADC_Init>
 80006ae:	b108      	cbz	r0, 80006b4 <main+0xe0>
 80006b0:	b672      	cpsid	i
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <main+0xde>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006b4:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006b6:	a90c      	add	r1, sp, #48	; 0x30
 80006b8:	4658      	mov	r0, fp
 80006ba:	f003 ff11 	bl	80044e0 <HAL_ADCEx_MultiModeConfigChannel>
 80006be:	b108      	cbz	r0, 80006c4 <main+0xf0>
 80006c0:	b672      	cpsid	i
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <main+0xee>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80006c4:	4b76      	ldr	r3, [pc, #472]	; (80008a0 <main+0x2cc>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80006c6:	f8ad 0088 	strh.w	r0, [sp, #136]	; 0x88
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80006ca:	f04f 0a09 	mov.w	sl, #9
  sConfigInjected.InjectedOffset = 0;
 80006ce:	e9cd 401d 	strd	r4, r0, [sp, #116]	; 0x74
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80006d2:	e9cd 3a19 	strd	r3, sl, [sp, #100]	; 0x64
  sConfigInjected.QueueInjectedContext = DISABLE;
 80006d6:	f88d 008a 	strb.w	r0, [sp, #138]	; 0x8a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80006da:	f88d 0094 	strb.w	r0, [sp, #148]	; 0x94
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80006de:	f04f 097f 	mov.w	r9, #127	; 0x7f
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80006e2:	2284      	movs	r2, #132	; 0x84
 80006e4:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006e6:	a919      	add	r1, sp, #100	; 0x64
 80006e8:	4658      	mov	r0, fp
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80006ea:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80006ee:	951b      	str	r5, [sp, #108]	; 0x6c
  sConfigInjected.InjectedNbrOfConversion = 2;
 80006f0:	9621      	str	r6, [sp, #132]	; 0x84
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80006f2:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006f6:	f003 fbff 	bl	8003ef8 <HAL_ADCEx_InjectedConfigChannel>
 80006fa:	b108      	cbz	r0, 8000700 <main+0x12c>
 80006fc:	b672      	cpsid	i
  while (1)
 80006fe:	e7fe      	b.n	80006fe <main+0x12a>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000700:	4a68      	ldr	r2, [pc, #416]	; (80008a4 <main+0x2d0>)
 8000702:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000706:	a919      	add	r1, sp, #100	; 0x64
 8000708:	4658      	mov	r0, fp
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800070a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800070e:	f003 fbf3 	bl	8003ef8 <HAL_ADCEx_InjectedConfigChannel>
 8000712:	b108      	cbz	r0, 8000718 <main+0x144>
 8000714:	b672      	cpsid	i
  while (1)
 8000716:	e7fe      	b.n	8000716 <main+0x142>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000718:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 80008dc <main+0x308>
  sConfig.Offset = 0;
 800071c:	9016      	str	r0, [sp, #88]	; 0x58
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800071e:	2206      	movs	r2, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000720:	a911      	add	r1, sp, #68	; 0x44
 8000722:	4658      	mov	r0, fp
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000724:	e9cd 4913 	strd	r4, r9, [sp, #76]	; 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000728:	e9cd e211 	strd	lr, r2, [sp, #68]	; 0x44
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800072c:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072e:	f003 f97d 	bl	8003a2c <HAL_ADC_ConfigChannel>
 8000732:	b108      	cbz	r0, 8000738 <main+0x164>
 8000734:	b672      	cpsid	i
  while (1)
 8000736:	e7fe      	b.n	8000736 <main+0x162>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000738:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80008e0 <main+0x30c>
 800073c:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073e:	a911      	add	r1, sp, #68	; 0x44
 8000740:	4658      	mov	r0, fp
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000742:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000746:	f003 f971 	bl	8003a2c <HAL_ADC_ConfigChannel>
 800074a:	4601      	mov	r1, r0
 800074c:	b108      	cbz	r0, 8000752 <main+0x17e>
 800074e:	b672      	cpsid	i
  while (1)
 8000750:	e7fe      	b.n	8000750 <main+0x17c>
  hadc2.Instance = ADC2;
 8000752:	f8df b190 	ldr.w	fp, [pc, #400]	; 80008e4 <main+0x310>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000756:	9001      	str	r0, [sp, #4]
 8000758:	223c      	movs	r2, #60	; 0x3c
 800075a:	a819      	add	r0, sp, #100	; 0x64
 800075c:	f008 fb44 	bl	8008de8 <memset>
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000760:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 8000762:	4a51      	ldr	r2, [pc, #324]	; (80008a8 <main+0x2d4>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000764:	f8ab 101c 	strh.w	r1, [fp, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000768:	4658      	mov	r0, fp
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800076a:	e9cb 1504 	strd	r1, r5, [fp, #16]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800076e:	f8cb 8004 	str.w	r8, [fp, #4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000772:	f8cb 700c 	str.w	r7, [fp, #12]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000776:	f8cb 1008 	str.w	r1, [fp, #8]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077a:	f8cb 4018 	str.w	r4, [fp, #24]
  hadc2.Init.NbrOfConversion = 1;
 800077e:	f8cb 5020 	str.w	r5, [fp, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000782:	f88b 1024 	strb.w	r1, [fp, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000786:	f88b 1038 	strb.w	r1, [fp, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800078a:	f8cb 103c 	str.w	r1, [fp, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800078e:	f88b 1040 	strb.w	r1, [fp, #64]	; 0x40
  hadc2.Instance = ADC2;
 8000792:	f8cb 2000 	str.w	r2, [fp]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000796:	f003 f845 	bl	8003824 <HAL_ADC_Init>
 800079a:	b108      	cbz	r0, 80007a0 <main+0x1cc>
 800079c:	b672      	cpsid	i
  while (1)
 800079e:	e7fe      	b.n	800079e <main+0x1ca>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80007a0:	4b3f      	ldr	r3, [pc, #252]	; (80008a0 <main+0x2cc>)
  sConfigInjected.InjectedNbrOfConversion = 2;
 80007a2:	9621      	str	r6, [sp, #132]	; 0x84
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80007a4:	e9cd 3a19 	strd	r3, sl, [sp, #100]	; 0x64
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80007a8:	2684      	movs	r6, #132	; 0x84
 80007aa:	2380      	movs	r3, #128	; 0x80
  sConfigInjected.InjectedOffset = 0;
 80007ac:	901e      	str	r0, [sp, #120]	; 0x78
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80007ae:	f8ad 0088 	strh.w	r0, [sp, #136]	; 0x88
  sConfigInjected.QueueInjectedContext = DISABLE;
 80007b2:	f88d 008a 	strb.w	r0, [sp, #138]	; 0x8a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80007b6:	f88d 0094 	strb.w	r0, [sp, #148]	; 0x94
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007ba:	a919      	add	r1, sp, #100	; 0x64
 80007bc:	4658      	mov	r0, fp
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80007be:	e9cd 591b 	strd	r5, r9, [sp, #108]	; 0x6c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80007c2:	e9cd 6323 	strd	r6, r3, [sp, #140]	; 0x8c
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80007c6:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007c8:	f003 fb96 	bl	8003ef8 <HAL_ADCEx_InjectedConfigChannel>
 80007cc:	b108      	cbz	r0, 80007d2 <main+0x1fe>
 80007ce:	b672      	cpsid	i
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <main+0x1fc>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80007d2:	f240 130f 	movw	r3, #271	; 0x10f
 80007d6:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007d8:	a919      	add	r1, sp, #100	; 0x64
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 80007da:	4b34      	ldr	r3, [pc, #208]	; (80008ac <main+0x2d8>)
 80007dc:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007de:	4658      	mov	r0, fp
 80007e0:	f003 fb8a 	bl	8003ef8 <HAL_ADCEx_InjectedConfigChannel>
 80007e4:	b108      	cbz	r0, 80007ea <main+0x216>
 80007e6:	b672      	cpsid	i
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <main+0x214>
  hcomp1.Instance = COMP1;
 80007ea:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <main+0x2dc>)
 80007ec:	4a31      	ldr	r2, [pc, #196]	; (80008b4 <main+0x2e0>)
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80007ee:	6058      	str	r0, [r3, #4]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80007f0:	e9c3 0003 	strd	r0, r0, [r3, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80007f4:	e9c3 0005 	strd	r0, r0, [r3, #20]
  hcomp1.Instance = COMP1;
 80007f8:	601a      	str	r2, [r3, #0]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80007fa:	4618      	mov	r0, r3
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 80007fc:	2240      	movs	r2, #64	; 0x40
 80007fe:	609a      	str	r2, [r3, #8]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000800:	f003 feda 	bl	80045b8 <HAL_COMP_Init>
 8000804:	b108      	cbz	r0, 800080a <main+0x236>
 8000806:	b672      	cpsid	i
  while (1)
 8000808:	e7fe      	b.n	8000808 <main+0x234>
  hcomp2.Instance = COMP2;
 800080a:	482b      	ldr	r0, [pc, #172]	; (80008b8 <main+0x2e4>)
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800080c:	4c2b      	ldr	r4, [pc, #172]	; (80008bc <main+0x2e8>)
 800080e:	2300      	movs	r3, #0
 8000810:	e9c0 4300 	strd	r4, r3, [r0]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000814:	2440      	movs	r4, #64	; 0x40
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000816:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800081a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 800081e:	6084      	str	r4, [r0, #8]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000820:	f003 feca 	bl	80045b8 <HAL_COMP_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	b108      	cbz	r0, 800082c <main+0x258>
 8000828:	b672      	cpsid	i
  while (1)
 800082a:	e7fe      	b.n	800082a <main+0x256>
  hcomp4.Instance = COMP4;
 800082c:	4824      	ldr	r0, [pc, #144]	; (80008c0 <main+0x2ec>)
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 800082e:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000832:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000836:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp4.Instance = COMP4;
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <main+0x2f0>)
 800083c:	6003      	str	r3, [r0, #0]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 800083e:	f003 febb 	bl	80045b8 <HAL_COMP_Init>
 8000842:	b108      	cbz	r0, 8000848 <main+0x274>
 8000844:	b672      	cpsid	i
  while (1)
 8000846:	e7fe      	b.n	8000846 <main+0x272>
  hcordic.Instance = CORDIC;
 8000848:	481f      	ldr	r0, [pc, #124]	; (80008c8 <main+0x2f4>)
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <main+0x2f8>)
 800084c:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800084e:	f003 ff5b 	bl	8004708 <HAL_CORDIC_Init>
 8000852:	4601      	mov	r1, r0
 8000854:	b108      	cbz	r0, 800085a <main+0x286>
 8000856:	b672      	cpsid	i
  while (1)
 8000858:	e7fe      	b.n	8000858 <main+0x284>
  hdac3.Instance = DAC3;
 800085a:	4d1d      	ldr	r5, [pc, #116]	; (80008d0 <main+0x2fc>)
  DAC_ChannelConfTypeDef sConfig = {0};
 800085c:	2230      	movs	r2, #48	; 0x30
 800085e:	a819      	add	r0, sp, #100	; 0x64
 8000860:	f008 fac2 	bl	8008de8 <memset>
  hdac3.Instance = DAC3;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <main+0x300>)
 8000866:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000868:	4628      	mov	r0, r5
 800086a:	f003 ffe5 	bl	8004838 <HAL_DAC_Init>
 800086e:	4602      	mov	r2, r0
 8000870:	b108      	cbz	r0, 8000876 <main+0x2a2>
 8000872:	b672      	cpsid	i
  while (1)
 8000874:	e7fe      	b.n	8000874 <main+0x2a0>
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000876:	2302      	movs	r3, #2
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000878:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800087c:	f8ad 0068 	strh.w	r0, [sp, #104]	; 0x68
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000880:	901d      	str	r0, [sp, #116]	; 0x74
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000882:	9020      	str	r0, [sp, #128]	; 0x80
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000884:	a919      	add	r1, sp, #100	; 0x64
 8000886:	4628      	mov	r0, r5
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000888:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800088c:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800088e:	f003 ffe9 	bl	8004864 <HAL_DAC_ConfigChannel>
 8000892:	b348      	cbz	r0, 80008e8 <main+0x314>
 8000894:	b672      	cpsid	i
  while (1)
 8000896:	e7fe      	b.n	8000896 <main+0x2c2>
 8000898:	40021000 	.word	0x40021000
 800089c:	48000800 	.word	0x48000800
 80008a0:	0c900008 	.word	0x0c900008
 80008a4:	32601000 	.word	0x32601000
 80008a8:	50000100 	.word	0x50000100
 80008ac:	cb8c0000 	.word	0xcb8c0000
 80008b0:	20000794 	.word	0x20000794
 80008b4:	40010200 	.word	0x40010200
 80008b8:	200007b8 	.word	0x200007b8
 80008bc:	40010204 	.word	0x40010204
 80008c0:	200007dc 	.word	0x200007dc
 80008c4:	4001020c 	.word	0x4001020c
 80008c8:	20000800 	.word	0x20000800
 80008cc:	40020c00 	.word	0x40020c00
 80008d0:	20000828 	.word	0x20000828
 80008d4:	50001000 	.word	0x50001000
 80008d8:	200006bc 	.word	0x200006bc
 80008dc:	04300002 	.word	0x04300002
 80008e0:	14f00020 	.word	0x14f00020
 80008e4:	20000728 	.word	0x20000728
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80008e8:	4628      	mov	r0, r5
 80008ea:	2210      	movs	r2, #16
 80008ec:	a919      	add	r1, sp, #100	; 0x64
 80008ee:	f003 ffb9 	bl	8004864 <HAL_DAC_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	b108      	cbz	r0, 80008fa <main+0x326>
 80008f6:	b672      	cpsid	i
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <main+0x324>
  hopamp1.Instance = OPAMP1;
 80008fa:	488c      	ldr	r0, [pc, #560]	; (8000b2c <main+0x558>)
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80008fc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000900:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000904:	6103      	str	r3, [r0, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000906:	7503      	strb	r3, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000908:	6183      	str	r3, [r0, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800090a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800090c:	f44f 4540 	mov.w	r5, #49152	; 0xc000
  hopamp1.Instance = OPAMP1;
 8000910:	4b87      	ldr	r3, [pc, #540]	; (8000b30 <main+0x55c>)
 8000912:	6003      	str	r3, [r0, #0]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000914:	e9c0 6509 	strd	r6, r5, [r0, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000918:	f004 f98a 	bl	8004c30 <HAL_OPAMP_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	b108      	cbz	r0, 8000924 <main+0x350>
 8000920:	b672      	cpsid	i
  while (1)
 8000922:	e7fe      	b.n	8000922 <main+0x34e>
  hopamp2.Instance = OPAMP2;
 8000924:	4883      	ldr	r0, [pc, #524]	; (8000b34 <main+0x560>)
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8000926:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800092a:	6103      	str	r3, [r0, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 800092c:	7503      	strb	r3, [r0, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800092e:	6183      	str	r3, [r0, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000930:	62c3      	str	r3, [r0, #44]	; 0x2c
  hopamp2.Instance = OPAMP2;
 8000932:	4b81      	ldr	r3, [pc, #516]	; (8000b38 <main+0x564>)
 8000934:	6003      	str	r3, [r0, #0]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000936:	e9c0 6509 	strd	r6, r5, [r0, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 800093a:	f004 f979 	bl	8004c30 <HAL_OPAMP_Init>
 800093e:	b108      	cbz	r0, 8000944 <main+0x370>
 8000940:	b672      	cpsid	i
  while (1)
 8000942:	e7fe      	b.n	8000942 <main+0x36e>
  hopamp3.Instance = OPAMP3;
 8000944:	4b7d      	ldr	r3, [pc, #500]	; (8000b3c <main+0x568>)
 8000946:	4a7e      	ldr	r2, [pc, #504]	; (8000b40 <main+0x56c>)
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000948:	6058      	str	r0, [r3, #4]
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800094a:	e9c3 6509 	strd	r6, r5, [r3, #36]	; 0x24
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800094e:	6118      	str	r0, [r3, #16]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000950:	6198      	str	r0, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000952:	62d8      	str	r0, [r3, #44]	; 0x2c
  hopamp3.Init.InternalOutput = ENABLE;
 8000954:	2501      	movs	r5, #1
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000956:	4618      	mov	r0, r3
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8000958:	609c      	str	r4, [r3, #8]
  hopamp3.Instance = OPAMP3;
 800095a:	601a      	str	r2, [r3, #0]
  hopamp3.Init.InternalOutput = ENABLE;
 800095c:	751d      	strb	r5, [r3, #20]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800095e:	f004 f967 	bl	8004c30 <HAL_OPAMP_Init>
 8000962:	4604      	mov	r4, r0
 8000964:	b108      	cbz	r0, 800096a <main+0x396>
 8000966:	b672      	cpsid	i
  while (1)
 8000968:	e7fe      	b.n	8000968 <main+0x394>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800096a:	4601      	mov	r1, r0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800096c:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 8000970:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000974:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
 8000978:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
 800097c:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000980:	e9cd 0007 	strd	r0, r0, [sp, #28]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000984:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000988:	9010      	str	r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098a:	9006      	str	r0, [sp, #24]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800098c:	9009      	str	r0, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800098e:	9017      	str	r0, [sp, #92]	; 0x5c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000990:	2234      	movs	r2, #52	; 0x34
 8000992:	a819      	add	r0, sp, #100	; 0x64
 8000994:	f008 fa28 	bl	8008de8 <memset>
  htim1.Instance = TIM1;
 8000998:	486a      	ldr	r0, [pc, #424]	; (8000b44 <main+0x570>)
 800099a:	4b6b      	ldr	r3, [pc, #428]	; (8000b48 <main+0x574>)
 800099c:	6003      	str	r3, [r0, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 800099e:	2120      	movs	r1, #32
 80009a0:	f640 3311 	movw	r3, #2833	; 0xb11
 80009a4:	e9c0 1302 	strd	r1, r3, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80009a8:	f44f 7380 	mov.w	r3, #256	; 0x100
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80009ac:	6145      	str	r5, [r0, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80009ae:	6044      	str	r4, [r0, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b0:	6184      	str	r4, [r0, #24]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80009b2:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009b4:	f004 ffe8 	bl	8005988 <HAL_TIM_Base_Init>
 80009b8:	b108      	cbz	r0, 80009be <main+0x3ea>
 80009ba:	b672      	cpsid	i
  while (1)
 80009bc:	e7fe      	b.n	80009bc <main+0x3e8>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009be:	4861      	ldr	r0, [pc, #388]	; (8000b44 <main+0x570>)
 80009c0:	f005 f86c 	bl	8005a9c <HAL_TIM_PWM_Init>
 80009c4:	b108      	cbz	r0, 80009ca <main+0x3f6>
 80009c6:	b672      	cpsid	i
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <main+0x3f4>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80009ca:	2306      	movs	r3, #6
 80009cc:	2610      	movs	r6, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80009ce:	485d      	ldr	r0, [pc, #372]	; (8000b44 <main+0x570>)
 80009d0:	a90c      	add	r1, sp, #48	; 0x30
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80009d2:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80009d6:	f005 f8e9 	bl	8005bac <HAL_TIM_SlaveConfigSynchro>
 80009da:	b108      	cbz	r0, 80009e0 <main+0x40c>
 80009dc:	b672      	cpsid	i
  while (1)
 80009de:	e7fe      	b.n	80009de <main+0x40a>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e0:	e9cd 0007 	strd	r0, r0, [sp, #28]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80009e4:	2470      	movs	r4, #112	; 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009e6:	4857      	ldr	r0, [pc, #348]	; (8000b44 <main+0x570>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80009e8:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ea:	a906      	add	r1, sp, #24
 80009ec:	f005 fabc 	bl	8005f68 <HAL_TIMEx_MasterConfigSynchronization>
 80009f0:	b108      	cbz	r0, 80009f6 <main+0x422>
 80009f2:	b672      	cpsid	i
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <main+0x420>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80009f6:	2102      	movs	r1, #2
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80009f8:	900b      	str	r0, [sp, #44]	; 0x2c
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80009fa:	2301      	movs	r3, #1
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80009fc:	4851      	ldr	r0, [pc, #324]	; (8000b44 <main+0x570>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80009fe:	9109      	str	r1, [sp, #36]	; 0x24
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a00:	aa09      	add	r2, sp, #36	; 0x24
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000a02:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a04:	f005 fb48 	bl	8006098 <HAL_TIMEx_ConfigBreakInput>
 8000a08:	2102      	movs	r1, #2
 8000a0a:	b108      	cbz	r0, 8000a10 <main+0x43c>
 8000a0c:	b672      	cpsid	i
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <main+0x43a>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a10:	484c      	ldr	r0, [pc, #304]	; (8000b44 <main+0x570>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8000a12:	2504      	movs	r5, #4
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a14:	aa09      	add	r2, sp, #36	; 0x24
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8000a16:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a18:	f005 fb3e 	bl	8006098 <HAL_TIMEx_ConfigBreakInput>
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	b108      	cbz	r0, 8000a24 <main+0x450>
 8000a20:	b672      	cpsid	i
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <main+0x44e>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a24:	aa09      	add	r2, sp, #36	; 0x24
 8000a26:	4847      	ldr	r0, [pc, #284]	; (8000b44 <main+0x570>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8000a28:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a2a:	f005 fb35 	bl	8006098 <HAL_TIMEx_ConfigBreakInput>
 8000a2e:	4602      	mov	r2, r0
 8000a30:	b108      	cbz	r0, 8000a36 <main+0x462>
 8000a32:	b672      	cpsid	i
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <main+0x460>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a36:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3a:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a3e:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a42:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a44:	483f      	ldr	r0, [pc, #252]	; (8000b44 <main+0x570>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a46:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a48:	a911      	add	r1, sp, #68	; 0x44
 8000a4a:	f005 f98b 	bl	8005d64 <HAL_TIM_PWM_ConfigChannel>
 8000a4e:	b108      	cbz	r0, 8000a54 <main+0x480>
 8000a50:	b672      	cpsid	i
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <main+0x47e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a54:	483b      	ldr	r0, [pc, #236]	; (8000b44 <main+0x570>)
 8000a56:	462a      	mov	r2, r5
 8000a58:	a911      	add	r1, sp, #68	; 0x44
 8000a5a:	f005 f983 	bl	8005d64 <HAL_TIM_PWM_ConfigChannel>
 8000a5e:	b108      	cbz	r0, 8000a64 <main+0x490>
 8000a60:	b672      	cpsid	i
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <main+0x48e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a64:	4837      	ldr	r0, [pc, #220]	; (8000b44 <main+0x570>)
 8000a66:	2208      	movs	r2, #8
 8000a68:	a911      	add	r1, sp, #68	; 0x44
 8000a6a:	f005 f97b 	bl	8005d64 <HAL_TIM_PWM_ConfigChannel>
 8000a6e:	b108      	cbz	r0, 8000a74 <main+0x4a0>
 8000a70:	b672      	cpsid	i
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <main+0x49e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a74:	4833      	ldr	r0, [pc, #204]	; (8000b44 <main+0x570>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000a76:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a78:	220c      	movs	r2, #12
 8000a7a:	a911      	add	r1, sp, #68	; 0x44
 8000a7c:	f005 f972 	bl	8005d64 <HAL_TIM_PWM_ConfigChannel>
 8000a80:	b108      	cbz	r0, 8000a86 <main+0x4b2>
 8000a82:	b672      	cpsid	i
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <main+0x4b0>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a86:	f44f 6400 	mov.w	r4, #2048	; 0x800
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a8e:	e9cd 4219 	strd	r4, r2, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000a92:	f44f 7480 	mov.w	r4, #256	; 0x100
 8000a96:	2244      	movs	r2, #68	; 0x44
 8000a98:	e9cd 421b 	strd	r4, r2, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000a9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aa0:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000aa2:	9221      	str	r2, [sp, #132]	; 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aa4:	4827      	ldr	r0, [pc, #156]	; (8000b44 <main+0x570>)
  sBreakDeadTimeConfig.Break2Filter = 3;
 8000aa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aaa:	a919      	add	r1, sp, #100	; 0x64
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aac:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  sBreakDeadTimeConfig.Break2Filter = 3;
 8000ab0:	2603      	movs	r6, #3
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ab2:	e9cd 341d 	strd	r3, r4, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ab6:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.Break2Filter = 3;
 8000aba:	e9cd 2622 	strd	r2, r6, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000abe:	e9cd 3324 	strd	r3, r3, [sp, #144]	; 0x90
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ac2:	f005 fa9b 	bl	8005ffc <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac6:	4605      	mov	r5, r0
 8000ac8:	b108      	cbz	r0, 8000ace <main+0x4fa>
 8000aca:	b672      	cpsid	i
  while (1)
 8000acc:	e7fe      	b.n	8000acc <main+0x4f8>
  HAL_TIM_MspPostInit(&htim1);
 8000ace:	481d      	ldr	r0, [pc, #116]	; (8000b44 <main+0x570>)
  huart2.Instance = USART2;
 8000ad0:	4c1e      	ldr	r4, [pc, #120]	; (8000b4c <main+0x578>)
  HAL_TIM_MspPostInit(&htim1);
 8000ad2:	f001 ff3f 	bl	8002954 <HAL_TIM_MspPostInit>
  huart2.Init.BaudRate = 115200;
 8000ad6:	4a1e      	ldr	r2, [pc, #120]	; (8000b50 <main+0x57c>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad8:	62a5      	str	r5, [r4, #40]	; 0x28
  huart2.Init.BaudRate = 115200;
 8000ada:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000ade:	e9c4 2300 	strd	r2, r3, [r4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ae2:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae6:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aea:	e9c4 5304 	strd	r5, r3, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aee:	e9c4 5506 	strd	r5, r5, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af2:	e9c4 5508 	strd	r5, r5, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af6:	f005 fd69 	bl	80065cc <HAL_UART_Init>
 8000afa:	4601      	mov	r1, r0
 8000afc:	b108      	cbz	r0, 8000b02 <main+0x52e>
 8000afe:	b672      	cpsid	i
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <main+0x52c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b02:	4620      	mov	r0, r4
 8000b04:	f005 fdec 	bl	80066e0 <HAL_UARTEx_SetTxFifoThreshold>
 8000b08:	4601      	mov	r1, r0
 8000b0a:	b108      	cbz	r0, 8000b10 <main+0x53c>
 8000b0c:	b672      	cpsid	i
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <main+0x53a>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b10:	4620      	mov	r0, r4
 8000b12:	f005 fe27 	bl	8006764 <HAL_UARTEx_SetRxFifoThreshold>
 8000b16:	b108      	cbz	r0, 8000b1c <main+0x548>
 8000b18:	b672      	cpsid	i
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <main+0x546>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b1c:	4620      	mov	r0, r4
 8000b1e:	f005 fdc1 	bl	80066a4 <HAL_UARTEx_DisableFifoMode>
 8000b22:	4604      	mov	r4, r0
 8000b24:	b1b0      	cbz	r0, 8000b54 <main+0x580>
 8000b26:	b672      	cpsid	i
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <main+0x554>
 8000b2a:	bf00      	nop
 8000b2c:	2000083c 	.word	0x2000083c
 8000b30:	40010300 	.word	0x40010300
 8000b34:	20000878 	.word	0x20000878
 8000b38:	40010304 	.word	0x40010304
 8000b3c:	200008b4 	.word	0x200008b4
 8000b40:	40010308 	.word	0x40010308
 8000b44:	200008f0 	.word	0x200008f0
 8000b48:	40012c00 	.word	0x40012c00
 8000b4c:	2000093c 	.word	0x2000093c
 8000b50:	40004400 	.word	0x40004400
  MX_MotorControl_Init();
 8000b54:	f001 fa78 	bl	8002048 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	2018      	movs	r0, #24
 8000b5e:	f003 fdff 	bl	8004760 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000b62:	2018      	movs	r0, #24
 8000b64:	f003 fe3a 	bl	80047dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b68:	4622      	mov	r2, r4
 8000b6a:	4621      	mov	r1, r4
 8000b6c:	2019      	movs	r0, #25
 8000b6e:	f003 fdf7 	bl	8004760 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b72:	2019      	movs	r0, #25
 8000b74:	f003 fe32 	bl	80047dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8000b78:	4622      	mov	r2, r4
 8000b7a:	2102      	movs	r1, #2
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f003 fdef 	bl	8004760 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b82:	2012      	movs	r0, #18
 8000b84:	f003 fe2a 	bl	80047dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	4631      	mov	r1, r6
 8000b8c:	2026      	movs	r0, #38	; 0x26
 8000b8e:	f003 fde7 	bl	8004760 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b92:	2026      	movs	r0, #38	; 0x26
 8000b94:	f003 fe22 	bl	80047dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000b98:	2028      	movs	r0, #40	; 0x28
 8000b9a:	4622      	mov	r2, r4
 8000b9c:	4631      	mov	r1, r6
 8000b9e:	f003 fddf 	bl	8004760 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ba2:	2028      	movs	r0, #40	; 0x28
 8000ba4:	f003 fe1a 	bl	80047dc <HAL_NVIC_EnableIRQ>
	 MC_ProgramSpeedRampMotor1(6000/6,1000);
 8000ba8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bac:	4608      	mov	r0, r1
 8000bae:	f000 f82f 	bl	8000c10 <MC_ProgramSpeedRampMotor1>
	 MC_StartMotor1();
 8000bb2:	f000 f821 	bl	8000bf8 <MC_StartMotor1>
	 HAL_Delay(10000);
 8000bb6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000bba:	f002 fe21 	bl	8003800 <HAL_Delay>
	 MC_StopMotor1();
 8000bbe:	f000 f821 	bl	8000c04 <MC_StopMotor1>
	 HAL_Delay(5000);
 8000bc2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bc6:	f002 fe1b 	bl	8003800 <HAL_Delay>
	 MC_ProgramSpeedRampMotor1(-6000/6,1000);
 8000bca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bce:	4808      	ldr	r0, [pc, #32]	; (8000bf0 <main+0x61c>)
 8000bd0:	f000 f81e 	bl	8000c10 <MC_ProgramSpeedRampMotor1>
	 MC_StartMotor1();
 8000bd4:	f000 f810 	bl	8000bf8 <MC_StartMotor1>
	 HAL_Delay(10000);
 8000bd8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000bdc:	f002 fe10 	bl	8003800 <HAL_Delay>
	 MC_StopMotor1();
 8000be0:	f000 f810 	bl	8000c04 <MC_StopMotor1>
	 HAL_Delay(5000);
 8000be4:	f241 3088 	movw	r0, #5000	; 0x1388
 8000be8:	f002 fe0a 	bl	8003800 <HAL_Delay>
  while (1)
 8000bec:	e7dc      	b.n	8000ba8 <main+0x5d4>
 8000bee:	bf00      	nop
 8000bf0:	fffffc18 	.word	0xfffffc18

08000bf4 <Error_Handler>:
 8000bf4:	b672      	cpsid	i
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <Error_Handler+0x2>

08000bf8 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8000bf8:	4b01      	ldr	r3, [pc, #4]	; (8000c00 <MC_StartMotor1+0x8>)
 8000bfa:	6818      	ldr	r0, [r3, #0]
 8000bfc:	f000 b846 	b.w	8000c8c <MCI_StartMotor>
 8000c00:	20000acc 	.word	0x20000acc

08000c04 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8000c04:	4b01      	ldr	r3, [pc, #4]	; (8000c0c <MC_StopMotor1+0x8>)
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	f000 b84a 	b.w	8000ca0 <MCI_StopMotor>
 8000c0c:	20000acc 	.word	0x20000acc

08000c10 <MC_ProgramSpeedRampMotor1>:
  * @param  hDurationms Duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1( int16_t hFinalSpeed, uint16_t hDurationms )
{
 8000c10:	b410      	push	{r4}
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8000c12:	4c04      	ldr	r4, [pc, #16]	; (8000c24 <MC_ProgramSpeedRampMotor1+0x14>)
{
 8000c14:	4603      	mov	r3, r0
 8000c16:	460a      	mov	r2, r1
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8000c18:	6820      	ldr	r0, [r4, #0]
}
 8000c1a:	f85d 4b04 	ldr.w	r4, [sp], #4
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8000c1e:	4619      	mov	r1, r3
 8000c20:	f000 b816 	b.w	8000c50 <MCI_ExecSpeedRamp>
 8000c24:	20000acc 	.word	0x20000acc

08000c28 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8000c28:	4b01      	ldr	r3, [pc, #4]	; (8000c30 <MC_GetSTMStateMotor1+0x8>)
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	f000 b880 	b.w	8000d30 <MCI_GetSTMState>
 8000c30:	20000acc 	.word	0x20000acc

08000c34 <MCI_Init>:
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000c34:	f04f 0c00 	mov.w	ip, #0
  pHandle->pSTC = pSTC;
 8000c38:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 8000c3c:	6083      	str	r3, [r0, #8]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000c3e:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8000c42:	f8c0 c00e 	str.w	ip, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8000c46:	f8a0 c016 	strh.w	ip, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000c4a:	f880 c018 	strb.w	ip, [r0, #24]
}
 8000c4e:	4770      	bx	lr

08000c50 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000c50:	f04f 0c01 	mov.w	ip, #1
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c54:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000c58:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8000c5c:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8000c5e:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c60:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8000c62:	4770      	bx	lr

08000c64 <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000c64:	f04f 0c02 	mov.w	ip, #2
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c68:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000c6a:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8000c6e:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8000c70:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c72:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000c78:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000c7a:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c7c:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000c7e:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.q = Iqdref.q;
 8000c80:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c84:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000c86:	b002      	add	sp, #8
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000c8c:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000c8e:	2103      	movs	r1, #3
{
 8000c90:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000c92:	6800      	ldr	r0, [r0, #0]
 8000c94:	f007 fb14 	bl	80082c0 <STM_NextState>

  if ( RetVal == true )
 8000c98:	b108      	cbz	r0, 8000c9e <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8000c9e:	bd10      	pop	{r4, pc}

08000ca0 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000ca0:	6800      	ldr	r0, [r0, #0]
 8000ca2:	2107      	movs	r1, #7
 8000ca4:	f007 bb0c 	b.w	80082c0 <STM_NextState>

08000ca8 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000ca8:	6800      	ldr	r0, [r0, #0]
 8000caa:	f007 bb81 	b.w	80083b0 <STM_FaultAcknowledged>
 8000cae:	bf00      	nop

08000cb0 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000cb0:	6800      	ldr	r0, [r0, #0]
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	f007 bb04 	b.w	80082c0 <STM_NextState>

08000cb8 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8000cb8:	b178      	cbz	r0, 8000cda <MCI_ExecBufferedCommands+0x22>
{
 8000cba:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000cbc:	7e03      	ldrb	r3, [r0, #24]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	d000      	beq.n	8000cc6 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000cc4:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8000cc6:	7b01      	ldrb	r1, [r0, #12]
 8000cc8:	2902      	cmp	r1, #2
 8000cca:	d020      	beq.n	8000d0e <MCI_ExecBufferedCommands+0x56>
 8000ccc:	2903      	cmp	r1, #3
 8000cce:	d005      	beq.n	8000cdc <MCI_ExecBufferedCommands+0x24>
 8000cd0:	2901      	cmp	r1, #1
 8000cd2:	d00c      	beq.n	8000cee <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	7623      	strb	r3, [r4, #24]
}
 8000cd8:	bd10      	pop	{r4, pc}
 8000cda:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000cdc:	6882      	ldr	r2, [r0, #8]
 8000cde:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000ce2:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8000ce6:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	7623      	strb	r3, [r4, #24]
}
 8000cec:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000cee:	6883      	ldr	r3, [r0, #8]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000cf6:	6840      	ldr	r0, [r0, #4]
 8000cf8:	f007 fa18 	bl	800812c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000cfc:	8ae2      	ldrh	r2, [r4, #22]
 8000cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d02:	6860      	ldr	r0, [r4, #4]
 8000d04:	f007 fa16 	bl	8008134 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d0e3      	beq.n	8000cd4 <MCI_ExecBufferedCommands+0x1c>
 8000d0c:	e7ec      	b.n	8000ce8 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000d0e:	6883      	ldr	r3, [r0, #8]
 8000d10:	2100      	movs	r1, #0
 8000d12:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000d16:	6840      	ldr	r0, [r0, #4]
 8000d18:	f007 fa08 	bl	800812c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000d1c:	8ae2      	ldrh	r2, [r4, #22]
 8000d1e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000d22:	6860      	ldr	r0, [r4, #4]
 8000d24:	f007 fa06 	bl	8008134 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000d28:	2800      	cmp	r0, #0
 8000d2a:	d0d3      	beq.n	8000cd4 <MCI_ExecBufferedCommands+0x1c>
 8000d2c:	e7dc      	b.n	8000ce8 <MCI_ExecBufferedCommands+0x30>
 8000d2e:	bf00      	nop

08000d30 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000d30:	6800      	ldr	r0, [r0, #0]
 8000d32:	f007 bb3b 	b.w	80083ac <STM_GetState>
 8000d36:	bf00      	nop

08000d38 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000d38:	7e40      	ldrb	r0, [r0, #25]
 8000d3a:	4770      	bx	lr

08000d3c <MCI_GetImposedMotorDirection>:
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
  int16_t retVal = 1;

  switch ( pHandle->lastCommand )
 8000d3c:	7b03      	ldrb	r3, [r0, #12]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d005      	beq.n	8000d4e <MCI_GetImposedMotorDirection+0x12>
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d013      	beq.n	8000d6e <MCI_GetImposedMotorDirection+0x32>
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d009      	beq.n	8000d5e <MCI_GetImposedMotorDirection+0x22>
 8000d4a:	2001      	movs	r0, #1
      break;
    default:
      break;
  }
  return retVal;
}
 8000d4c:	4770      	bx	lr
      if ( pHandle->hFinalTorque < 0 )
 8000d4e:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
        retVal = -1;
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	bfac      	ite	ge
 8000d56:	2001      	movge	r0, #1
 8000d58:	f04f 30ff 	movlt.w	r0, #4294967295
 8000d5c:	4770      	bx	lr
      if ( pHandle->hFinalSpeed < 0 )
 8000d5e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
        retVal = -1;
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	bfac      	ite	ge
 8000d66:	2001      	movge	r0, #1
 8000d68:	f04f 30ff 	movlt.w	r0, #4294967295
 8000d6c:	4770      	bx	lr
      if ( pHandle->Iqdref.q < 0 )
 8000d6e:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
        retVal = -1;
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	bfac      	ite	ge
 8000d76:	2001      	movge	r0, #1
 8000d78:	f04f 30ff 	movlt.w	r0, #4294967295
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000d80:	7b03      	ldrb	r3, [r0, #12]
 8000d82:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000d84:	bf0c      	ite	eq
 8000d86:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8000d8a:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000d90:	6840      	ldr	r0, [r0, #4]
 8000d92:	f007 ba17 	b.w	80081c4 <STC_StopRamp>
 8000d96:	bf00      	nop

08000d98 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000d98:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000d9a:	6840      	ldr	r0, [r0, #4]
 8000d9c:	f007 f9ac 	bl	80080f8 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000da0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000da4:	f007 b950 	b.w	8008048 <SPD_GetAvrgMecSpeedUnit>

08000da8 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000da8:	6840      	ldr	r0, [r0, #4]
 8000daa:	f007 b9af 	b.w	800810c <STC_GetMecSpeedRefUnit>
 8000dae:	bf00      	nop

08000db0 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000db0:	6882      	ldr	r2, [r0, #8]
 8000db2:	6810      	ldr	r0, [r2, #0]
 8000db4:	2300      	movs	r3, #0
 8000db6:	b282      	uxth	r2, r0
 8000db8:	f362 030f 	bfi	r3, r2, #0, #16
 8000dbc:	0c00      	lsrs	r0, r0, #16
 8000dbe:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000dc2:	b082      	sub	sp, #8
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	b002      	add	sp, #8
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop

08000dcc <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000dcc:	6882      	ldr	r2, [r0, #8]
 8000dce:	6850      	ldr	r0, [r2, #4]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	b282      	uxth	r2, r0
 8000dd4:	f362 030f 	bfi	r3, r2, #0, #16
 8000dd8:	0c00      	lsrs	r0, r0, #16
 8000dda:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000dde:	b082      	sub	sp, #8
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	b002      	add	sp, #8
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000de8:	6882      	ldr	r2, [r0, #8]
 8000dea:	68d0      	ldr	r0, [r2, #12]
 8000dec:	2300      	movs	r3, #0
 8000dee:	b282      	uxth	r2, r0
 8000df0:	f362 030f 	bfi	r3, r2, #0, #16
 8000df4:	0c00      	lsrs	r0, r0, #16
 8000df6:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000dfa:	b082      	sub	sp, #8
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	b002      	add	sp, #8
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000e04:	6882      	ldr	r2, [r0, #8]
 8000e06:	6910      	ldr	r0, [r2, #16]
 8000e08:	2300      	movs	r3, #0
 8000e0a:	b282      	uxth	r2, r0
 8000e0c:	f362 030f 	bfi	r3, r2, #0, #16
 8000e10:	0c00      	lsrs	r0, r0, #16
 8000e12:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e16:	b082      	sub	sp, #8
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	b002      	add	sp, #8
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000e20:	6882      	ldr	r2, [r0, #8]
 8000e22:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8000e26:	2300      	movs	r3, #0
 8000e28:	b282      	uxth	r2, r0
 8000e2a:	f362 030f 	bfi	r3, r2, #0, #16
 8000e2e:	0c00      	lsrs	r0, r0, #16
 8000e30:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e34:	b082      	sub	sp, #8
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	b002      	add	sp, #8
 8000e3a:	4770      	bx	lr

08000e3c <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000e3c:	6882      	ldr	r2, [r0, #8]
 8000e3e:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8000e42:	2300      	movs	r3, #0
 8000e44:	b282      	uxth	r2, r0
 8000e46:	f362 030f 	bfi	r3, r2, #0, #16
 8000e4a:	0c00      	lsrs	r0, r0, #16
 8000e4c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e50:	b082      	sub	sp, #8
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	b002      	add	sp, #8
 8000e56:	4770      	bx	lr

08000e58 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000e58:	6883      	ldr	r3, [r0, #8]
}
 8000e5a:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000e5e:	4770      	bx	lr

08000e60 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000e60:	2300      	movs	r3, #0
 8000e62:	6882      	ldr	r2, [r0, #8]
 8000e64:	f361 030f 	bfi	r3, r1, #0, #16
 8000e68:	f361 431f 	bfi	r3, r1, #16, #16
 8000e6c:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000e74:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000e76:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000e7a:	f007 f9e3 	bl	8008244 <STC_GetDefaultIqdref>
 8000e7e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000e82:	8220      	strh	r0, [r4, #16]
 8000e84:	8263      	strh	r3, [r4, #18]
}
 8000e86:	bd10      	pop	{r4, pc}

08000e88 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000e88:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8000e8c:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000e8e:	fb13 f201 	smulbb	r2, r3, r1
{
 8000e92:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000e96:	fb10 f001 	smulbb	r0, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000e9a:	4252      	negs	r2, r2
 8000e9c:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000ea0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
{
 8000ea4:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8000ea6:	da05      	bge.n	8000eb4 <MCM_Clarke+0x2c>
 8000ea8:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000eaa:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8000eae:	da0c      	bge.n	8000eca <MCM_Clarke+0x42>
 8000eb0:	4a09      	ldr	r2, [pc, #36]	; (8000ed8 <MCM_Clarke+0x50>)
 8000eb2:	e001      	b.n	8000eb8 <MCM_Clarke+0x30>
 8000eb4:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f363 000f 	bfi	r0, r3, #0, #16
 8000ec0:	b293      	uxth	r3, r2
 8000ec2:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000ec6:	b004      	add	sp, #16
 8000ec8:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000eca:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <MCM_Clarke+0x50>)
 8000ecc:	b20a      	sxth	r2, r1
 8000ece:	4282      	cmp	r2, r0
 8000ed0:	bfb8      	it	lt
 8000ed2:	4602      	movlt	r2, r0
 8000ed4:	e7f0      	b.n	8000eb8 <MCM_Clarke+0x30>
 8000ed6:	bf00      	nop
 8000ed8:	ffff8001 	.word	0xffff8001

08000edc <MCM_Trig_Functions>:
    uint32_t CordicRdata;
    Trig_Components Components;
  } CosSin;

  /* Configure CORDIC */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MCM_Trig_Functions+0x28>)
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <MCM_Trig_Functions+0x2c>)
 8000ee0:	601a      	str	r2, [r3, #0]
  LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) hAngle);
 8000ee2:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
 8000ee6:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8000eea:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8000eec:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	f362 000f 	bfi	r0, r2, #0, #16
 8000ef6:	0c1b      	lsrs	r3, r3, #16
{
 8000ef8:	b082      	sub	sp, #8
  return (CosSin.Components);
 8000efa:	f363 401f 	bfi	r0, r3, #16, #16

}
 8000efe:	b002      	add	sp, #8
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40020c00 	.word	0x40020c00
 8000f08:	00600040 	.word	0x00600040

08000f0c <MCM_Park>:
{
 8000f0c:	b530      	push	{r4, r5, lr}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	4604      	mov	r4, r0
 8000f12:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000f14:	4608      	mov	r0, r1
{
 8000f16:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000f18:	f7ff ffe0 	bl	8000edc <MCM_Trig_Functions>
 8000f1c:	b22d      	sxth	r5, r5
 8000f1e:	b201      	sxth	r1, r0
 8000f20:	1424      	asrs	r4, r4, #16
 8000f22:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000f24:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000f28:	fb04 3310 	mls	r3, r4, r0, r3
  if ( wqd_tmp > INT16_MAX )
 8000f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f30:	da05      	bge.n	8000f3e <MCM_Park+0x32>
 8000f32:	13da      	asrs	r2, r3, #15
  else if ( wqd_tmp < ( -32768 ) )
 8000f34:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8000f38:	da22      	bge.n	8000f80 <MCM_Park+0x74>
 8000f3a:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <MCM_Park+0x80>)
 8000f3c:	e001      	b.n	8000f42 <MCM_Park+0x36>
 8000f3e:	f647 72ff 	movw	r2, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000f42:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000f46:	fb05 4400 	mla	r4, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 8000f4a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000f4e:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if ( wqd_tmp > INT16_MAX )
 8000f52:	da04      	bge.n	8000f5e <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 8000f54:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000f58:	da0c      	bge.n	8000f74 <MCM_Park+0x68>
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MCM_Park+0x80>)
 8000f5c:	e001      	b.n	8000f62 <MCM_Park+0x56>
 8000f5e:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8000f62:	b292      	uxth	r2, r2
 8000f64:	2000      	movs	r0, #0
 8000f66:	f362 000f 	bfi	r0, r2, #0, #16
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000f70:	b005      	add	sp, #20
 8000f72:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000f74:	4905      	ldr	r1, [pc, #20]	; (8000f8c <MCM_Park+0x80>)
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	428b      	cmp	r3, r1
 8000f7a:	bfb8      	it	lt
 8000f7c:	460b      	movlt	r3, r1
 8000f7e:	e7f0      	b.n	8000f62 <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000f80:	4b02      	ldr	r3, [pc, #8]	; (8000f8c <MCM_Park+0x80>)
 8000f82:	b212      	sxth	r2, r2
 8000f84:	429a      	cmp	r2, r3
 8000f86:	bfb8      	it	lt
 8000f88:	461a      	movlt	r2, r3
 8000f8a:	e7da      	b.n	8000f42 <MCM_Park+0x36>
 8000f8c:	ffff8001 	.word	0xffff8001

08000f90 <MCM_Rev_Park>:
{
 8000f90:	b530      	push	{r4, r5, lr}
 8000f92:	b085      	sub	sp, #20
 8000f94:	4604      	mov	r4, r0
 8000f96:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000f98:	4608      	mov	r0, r1
{
 8000f9a:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000f9c:	f7ff ff9e 	bl	8000edc <MCM_Trig_Functions>
 8000fa0:	1424      	asrs	r4, r4, #16
 8000fa2:	1402      	asrs	r2, r0, #16
 8000fa4:	b22d      	sxth	r5, r5
 8000fa6:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000fa8:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000fac:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000fb0:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000fb4:	fb05 4412 	mls	r4, r5, r2, r4
  return ( Output );
 8000fb8:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f363 000f 	bfi	r0, r3, #0, #16
 8000fc2:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8000fc6:	f364 401f 	bfi	r0, r4, #16, #16
}
 8000fca:	b005      	add	sp, #20
 8000fcc:	bd30      	pop	{r4, r5, pc}
 8000fce:	bf00      	nop

08000fd0 <FOC_Clear>:
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8000fd0:	2226      	movs	r2, #38	; 0x26
{
 8000fd2:	b538      	push	{r3, r4, r5, lr}
 8000fd4:	fb00 f202 	mul.w	r2, r0, r2
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 8000fda:	2400      	movs	r4, #0
 8000fdc:	509c      	str	r4, [r3, r2]
{
 8000fde:	4605      	mov	r5, r0
 8000fe0:	f102 0108 	add.w	r1, r2, #8
 8000fe4:	1898      	adds	r0, r3, r2
 8000fe6:	3210      	adds	r2, #16
 8000fe8:	4419      	add	r1, r3
 8000fea:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000fec:	4a11      	ldr	r2, [pc, #68]	; (8001034 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8000fee:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000ff0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000ff4:	604c      	str	r4, [r1, #4]
 8000ff6:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000ff8:	f8c3 4006 	str.w	r4, [r3, #6]
 8000ffc:	f8c3 400a 	str.w	r4, [r3, #10]
 8001000:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001004:	4621      	mov	r1, r4
 8001006:	f005 fcf5 	bl	80069f4 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <FOC_Clear+0x68>)
 800100c:	4621      	mov	r1, r4
 800100e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001012:	f005 fcef 	bl	80069f4 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <FOC_Clear+0x6c>)
 8001018:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800101c:	f007 f86e 	bl	80080fc <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <FOC_Clear+0x70>)
 8001022:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800102a:	f005 beff 	b.w	8006e2c <PWMC_SwitchOffPWM>
 800102e:	bf00      	nop
 8001030:	200009f0 	.word	0x200009f0
 8001034:	20000aac 	.word	0x20000aac
 8001038:	20000aa8 	.word	0x20000aa8
 800103c:	20000ab8 	.word	0x20000ab8
 8001040:	20000ac0 	.word	0x20000ac0

08001044 <MCboot>:
{
 8001044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001048:	4603      	mov	r3, r0
 800104a:	b089      	sub	sp, #36	; 0x24
  STM_Init(&STM[M1]);
 800104c:	4861      	ldr	r0, [pc, #388]	; (80011d4 <MCboot+0x190>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800104e:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8001230 <MCboot+0x1ec>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001052:	4e61      	ldr	r6, [pc, #388]	; (80011d8 <MCboot+0x194>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001054:	4d61      	ldr	r5, [pc, #388]	; (80011dc <MCboot+0x198>)
  STO_PLL_Init (&STO_PLL_M1);
 8001056:	4f62      	ldr	r7, [pc, #392]	; (80011e0 <MCboot+0x19c>)
  PID_HandleInit(&PIDIqHandle_M1);
 8001058:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 8001234 <MCboot+0x1f0>
  PID_HandleInit(&PIDIdHandle_M1);
 800105c:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8001238 <MCboot+0x1f4>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001060:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 800123c <MCboot+0x1f8>
{
 8001064:	e9cd 3103 	strd	r3, r1, [sp, #12]
  STM_Init(&STM[M1]);
 8001068:	f007 f902 	bl	8008270 <STM_Init>
  bMCBootCompleted = 0;
 800106c:	4a5d      	ldr	r2, [pc, #372]	; (80011e4 <MCboot+0x1a0>)
  pCLM[M1] = &CircleLimitationM1;
 800106e:	4b5e      	ldr	r3, [pc, #376]	; (80011e8 <MCboot+0x1a4>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001070:	485e      	ldr	r0, [pc, #376]	; (80011ec <MCboot+0x1a8>)
 8001072:	f8c9 0000 	str.w	r0, [r9]
  bMCBootCompleted = 0;
 8001076:	2400      	movs	r4, #0
 8001078:	7014      	strb	r4, [r2, #0]
  pCLM[M1] = &CircleLimitationM1;
 800107a:	4a5d      	ldr	r2, [pc, #372]	; (80011f0 <MCboot+0x1ac>)
 800107c:	601a      	str	r2, [r3, #0]
  R3_2_Init(&PWM_Handle_M1);
 800107e:	f006 fa5d 	bl	800753c <R3_2_Init>
  startTimers();
 8001082:	f005 fd3d 	bl	8006b00 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001086:	4630      	mov	r0, r6
 8001088:	f005 fca0 	bl	80069cc <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 800108c:	4a59      	ldr	r2, [pc, #356]	; (80011f4 <MCboot+0x1b0>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 800108e:	4b5a      	ldr	r3, [pc, #360]	; (80011f8 <MCboot+0x1b4>)
 8001090:	602b      	str	r3, [r5, #0]
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001092:	6016      	str	r6, [r2, #0]
  STO_PLL_Init (&STO_PLL_M1);
 8001094:	4638      	mov	r0, r7
 8001096:	f007 fb7d 	bl	8008794 <STO_PLL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 800109a:	4856      	ldr	r0, [pc, #344]	; (80011f4 <MCboot+0x1b0>)
  VSS_Init (&VirtualSpeedSensorM1);
 800109c:	4e57      	ldr	r6, [pc, #348]	; (80011fc <MCboot+0x1b8>)
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 800109e:	6801      	ldr	r1, [r0, #0]
 80010a0:	6828      	ldr	r0, [r5, #0]
 80010a2:	463a      	mov	r2, r7
 80010a4:	f007 f810 	bl	80080c8 <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 80010a8:	4630      	mov	r0, r6
 80010aa:	f007 fda3 	bl	8008bf4 <VSS_Init>
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 80010ae:	f8d9 3000 	ldr.w	r3, [r9]
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	4632      	mov	r2, r6
 80010b6:	6829      	ldr	r1, [r5, #0]
 80010b8:	4b51      	ldr	r3, [pc, #324]	; (8001200 <MCboot+0x1bc>)
 80010ba:	4852      	ldr	r0, [pc, #328]	; (8001204 <MCboot+0x1c0>)
 80010bc:	f006 fed2 	bl	8007e64 <RUC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 80010c0:	4658      	mov	r0, fp
 80010c2:	f005 fc83 	bl	80069cc <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 80010c6:	4650      	mov	r0, sl
 80010c8:	f005 fc80 	bl	80069cc <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 80010cc:	4b4e      	ldr	r3, [pc, #312]	; (8001208 <MCboot+0x1c4>)
  pPIDId[M1] = &PIDIdHandle_M1;
 80010ce:	494f      	ldr	r1, [pc, #316]	; (800120c <MCboot+0x1c8>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 80010d0:	484f      	ldr	r0, [pc, #316]	; (8001210 <MCboot+0x1cc>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 80010d2:	f8c3 b000 	str.w	fp, [r3]
  pPIDId[M1] = &PIDIdHandle_M1;
 80010d6:	f8c1 a000 	str.w	sl, [r1]
  NTC_Init(&TempSensorParamsM1);
 80010da:	f8df b164 	ldr.w	fp, [pc, #356]	; 8001240 <MCboot+0x1fc>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 80010de:	f8c8 0000 	str.w	r0, [r8]
  RVBS_Init(pBusSensorM1);
 80010e2:	f006 fde5 	bl	8007cb0 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 80010e6:	494b      	ldr	r1, [pc, #300]	; (8001214 <MCboot+0x1d0>)
 80010e8:	4b4b      	ldr	r3, [pc, #300]	; (8001218 <MCboot+0x1d4>)
 80010ea:	600b      	str	r3, [r1, #0]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80010ec:	f8df a154 	ldr.w	sl, [pc, #340]	; 8001244 <MCboot+0x200>
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 80010f0:	f8d8 2000 	ldr.w	r2, [r8]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80010f4:	f8c3 a10c 	str.w	sl, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 80010f8:	4658      	mov	r0, fp
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 80010fa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  NTC_Init(&TempSensorParamsM1);
 80010fe:	f005 fc21 	bl	8006944 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8001102:	4a46      	ldr	r2, [pc, #280]	; (800121c <MCboot+0x1d8>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001104:	4b46      	ldr	r3, [pc, #280]	; (8001220 <MCboot+0x1dc>)
 8001106:	4847      	ldr	r0, [pc, #284]	; (8001224 <MCboot+0x1e0>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8001108:	f8c2 b000 	str.w	fp, [r2]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 800110c:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 800110e:	f006 fe1f 	bl	8007d50 <REMNG_Init>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001112:	f04f 0b01 	mov.w	fp, #1
  FOC_Clear(M1);
 8001116:	4620      	mov	r0, r4
 8001118:	f7ff ff5a 	bl	8000fd0 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 800111c:	f88a b024 	strb.w	fp, [sl, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001120:	6828      	ldr	r0, [r5, #0]
 8001122:	f007 f88f 	bl	8008244 <STC_GetDefaultIqdref>
 8001126:	f8ca 0010 	str.w	r0, [sl, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800112a:	6828      	ldr	r0, [r5, #0]
 800112c:	f007 f88a 	bl	8008244 <STC_GetDefaultIqdref>
 8001130:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8001134:	f8aa 0014 	strh.w	r0, [sl, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001138:	4653      	mov	r3, sl
  oMCInterface[M1] = & Mci[M1];
 800113a:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8001248 <MCboot+0x204>
 800113e:	483a      	ldr	r0, [pc, #232]	; (8001228 <MCboot+0x1e4>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001140:	682a      	ldr	r2, [r5, #0]
 8001142:	4924      	ldr	r1, [pc, #144]	; (80011d4 <MCboot+0x190>)
  oMCInterface[M1] = & Mci[M1];
 8001144:	f8ca 0000 	str.w	r0, [sl]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001148:	f7ff fd74 	bl	8000c34 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 800114c:	f8da 3000 	ldr.w	r3, [sl]
 8001150:	6828      	ldr	r0, [r5, #0]
 8001152:	9305      	str	r3, [sp, #20]
 8001154:	f007 f86c 	bl	8008230 <STC_GetMecSpeedRefUnitDefault>
 8001158:	9b05      	ldr	r3, [sp, #20]
 800115a:	4601      	mov	r1, r0
 800115c:	4622      	mov	r2, r4
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fd76 	bl	8000c50 <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 8001164:	9803      	ldr	r0, [sp, #12]
 8001166:	f8da 3000 	ldr.w	r3, [sl]
 800116a:	6003      	str	r3, [r0, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 800116c:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MCboot+0x1c4>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 800116e:	4821      	ldr	r0, [pc, #132]	; (80011f4 <MCboot+0x1b0>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001170:	f8d3 c000 	ldr.w	ip, [r3]
  MCT[M1].pPIDId = pPIDId[M1];
 8001174:	4b25      	ldr	r3, [pc, #148]	; (800120c <MCboot+0x1c8>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001176:	f8d0 e000 	ldr.w	lr, [r0]
  MCT[M1].pPIDId = pPIDId[M1];
 800117a:	6818      	ldr	r0, [r3, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 800117c:	4b25      	ldr	r3, [pc, #148]	; (8001214 <MCboot+0x1d0>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 800117e:	f8d9 1000 	ldr.w	r1, [r9]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001182:	f8d3 9000 	ldr.w	r9, [r3]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001186:	4b29      	ldr	r3, [pc, #164]	; (800122c <MCboot+0x1e8>)
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001188:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 800118a:	6098      	str	r0, [r3, #8]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 800118c:	4d23      	ldr	r5, [pc, #140]	; (800121c <MCboot+0x1d8>)
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 800118e:	481d      	ldr	r0, [pc, #116]	; (8001204 <MCboot+0x1c0>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001190:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001192:	f8d8 8000 	ldr.w	r8, [r8]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001196:	6119      	str	r1, [r3, #16]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 8001198:	e9c3 0705 	strd	r0, r7, [r3, #20]
  MCT[M1].pStateMachine = &STM[M1];
 800119c:	480d      	ldr	r0, [pc, #52]	; (80011d4 <MCboot+0x190>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 800119e:	f8c3 8030 	str.w	r8, [r3, #48]	; 0x30
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 80011a2:	e9c3 6208 	strd	r6, r2, [r3, #32]
  MCT[M1].pPIDIq = pPIDIq[M1];
 80011a6:	e9c3 ec00 	strd	lr, ip, [r3]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 80011aa:	e9c3 050a 	strd	r0, r5, [r3, #40]	; 0x28
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 80011ae:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 80011b2:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 80011b6:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  bMCBootCompleted = 1;
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <MCboot+0x1a0>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80011bc:	f8c3 903c 	str.w	r9, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 80011c0:	60dc      	str	r4, [r3, #12]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 80011c2:	61dc      	str	r4, [r3, #28]
  MCT[M1].pOTT = MC_NULL;
 80011c4:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 80011c6:	9904      	ldr	r1, [sp, #16]
 80011c8:	600b      	str	r3, [r1, #0]
  bMCBootCompleted = 1;
 80011ca:	f882 b000 	strb.w	fp, [r2]
}
 80011ce:	b009      	add	sp, #36	; 0x24
 80011d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011d4:	20000a88 	.word	0x20000a88
 80011d8:	2000010c 	.word	0x2000010c
 80011dc:	20000ab8 	.word	0x20000ab8
 80011e0:	20000394 	.word	0x20000394
 80011e4:	20000a8e 	.word	0x20000a8e
 80011e8:	20000aa0 	.word	0x20000aa0
 80011ec:	2000024c 	.word	0x2000024c
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000ab0 	.word	0x20000ab0
 80011f8:	200004bc 	.word	0x200004bc
 80011fc:	20000518 	.word	0x20000518
 8001200:	20000380 	.word	0x20000380
 8001204:	20000308 	.word	0x20000308
 8001208:	20000aac 	.word	0x20000aac
 800120c:	20000aa8 	.word	0x20000aa8
 8001210:	200002e0 	.word	0x200002e0
 8001214:	20000aa4 	.word	0x20000aa4
 8001218:	20000138 	.word	0x20000138
 800121c:	20000abc 	.word	0x20000abc
 8001220:	20000ab4 	.word	0x20000ab4
 8001224:	200002c8 	.word	0x200002c8
 8001228:	20000a6c 	.word	0x20000a6c
 800122c:	20000a18 	.word	0x20000a18
 8001230:	20000ac0 	.word	0x20000ac0
 8001234:	200000e0 	.word	0x200000e0
 8001238:	200000b4 	.word	0x200000b4
 800123c:	20000a9c 	.word	0x20000a9c
 8001240:	200004f0 	.word	0x200004f0
 8001244:	200009f0 	.word	0x200009f0
 8001248:	20000a98 	.word	0x20000a98

0800124c <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop

08001250 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001250:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001252:	4c08      	ldr	r4, [pc, #32]	; (8001274 <FOC_CalcCurrRef+0x24>)
 8001254:	2326      	movs	r3, #38	; 0x26
 8001256:	fb03 4400 	mla	r4, r3, r0, r4
 800125a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800125e:	b103      	cbz	r3, 8001262 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001260:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <FOC_CalcCurrRef+0x28>)
 8001264:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001268:	f006 ffb0 	bl	80081cc <STC_CalcTorqueReference>
 800126c:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 800126e:	8220      	strh	r0, [r4, #16]
}
 8001270:	bd10      	pop	{r4, pc}
 8001272:	bf00      	nop
 8001274:	200009f0 	.word	0x200009f0
 8001278:	20000ab8 	.word	0x20000ab8

0800127c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 800127c:	4b01      	ldr	r3, [pc, #4]	; (8001284 <TSK_SetChargeBootCapDelayM1+0x8>)
 800127e:	8018      	strh	r0, [r3, #0]
}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000a90 	.word	0x20000a90

08001288 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800128a:	8818      	ldrh	r0, [r3, #0]
 800128c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800128e:	fab0 f080 	clz	r0, r0
 8001292:	0940      	lsrs	r0, r0, #5
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000a90 	.word	0x20000a90

0800129c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 800129c:	4b01      	ldr	r3, [pc, #4]	; (80012a4 <TSK_SetStopPermanencyTimeM1+0x8>)
 800129e:	8018      	strh	r0, [r3, #0]
}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000a94 	.word	0x20000a94

080012a8 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 80012aa:	8818      	ldrh	r0, [r3, #0]
 80012ac:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80012ae:	fab0 f080 	clz	r0, r0
 80012b2:	0940      	lsrs	r0, r0, #5
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000a94 	.word	0x20000a94

080012bc <TSK_MediumFrequencyTaskM1>:
{
 80012bc:	b530      	push	{r4, r5, lr}
 80012be:	b083      	sub	sp, #12
  int16_t wAux = 0;
 80012c0:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80012c2:	4669      	mov	r1, sp
 80012c4:	489c      	ldr	r0, [pc, #624]	; (8001538 <TSK_MediumFrequencyTaskM1+0x27c>)
  int16_t wAux = 0;
 80012c6:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80012ca:	f007 f967 	bl	800859c <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 80012ce:	4d9b      	ldr	r5, [pc, #620]	; (800153c <TSK_MediumFrequencyTaskM1+0x280>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80012d0:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 80012d2:	6828      	ldr	r0, [r5, #0]
 80012d4:	f005 fbde 	bl	8006a94 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 80012d8:	4899      	ldr	r0, [pc, #612]	; (8001540 <TSK_MediumFrequencyTaskM1+0x284>)
 80012da:	f007 f867 	bl	80083ac <STM_GetState>
  switch ( StateM1 )
 80012de:	1ec3      	subs	r3, r0, #3
 80012e0:	2b10      	cmp	r3, #16
 80012e2:	d824      	bhi.n	800132e <TSK_MediumFrequencyTaskM1+0x72>
 80012e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80012e8:	005c0048 	.word	0x005c0048
 80012ec:	00be00a7 	.word	0x00be00a7
 80012f0:	00ce0011 	.word	0x00ce0011
 80012f4:	002300d8 	.word	0x002300d8
 80012f8:	00230023 	.word	0x00230023
 80012fc:	00230023 	.word	0x00230023
 8001300:	00e50023 	.word	0x00e50023
 8001304:	010100f4 	.word	0x010100f4
 8001308:	0025      	.short	0x0025
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 800130a:	4b8e      	ldr	r3, [pc, #568]	; (8001544 <TSK_MediumFrequencyTaskM1+0x288>)
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	f005 ffe3 	bl	80072d8 <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 8001312:	2000      	movs	r0, #0
 8001314:	f7ff fe5c 	bl	8000fd0 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001318:	6828      	ldr	r0, [r5, #0]
 800131a:	f005 facf 	bl	80068bc <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 800131e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001322:	f7ff ffbb 	bl	800129c <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8001326:	4886      	ldr	r0, [pc, #536]	; (8001540 <TSK_MediumFrequencyTaskM1+0x284>)
 8001328:	2108      	movs	r1, #8
 800132a:	f006 ffc9 	bl	80082c0 <STM_NextState>
}
 800132e:	b003      	add	sp, #12
 8001330:	bd30      	pop	{r4, r5, pc}
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8001332:	4885      	ldr	r0, [pc, #532]	; (8001548 <TSK_MediumFrequencyTaskM1+0x28c>)
 8001334:	f006 fe18 	bl	8007f68 <RUC_Exec>
 8001338:	2800      	cmp	r0, #0
 800133a:	f000 80f7 	beq.w	800152c <TSK_MediumFrequencyTaskM1+0x270>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 800133e:	4883      	ldr	r0, [pc, #524]	; (800154c <TSK_MediumFrequencyTaskM1+0x290>)
 8001340:	a901      	add	r1, sp, #4
 8001342:	f007 fcad 	bl	8008ca0 <VSS_CalcAvrgMecSpeedUnit>
 8001346:	4604      	mov	r4, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 8001348:	4880      	ldr	r0, [pc, #512]	; (800154c <TSK_MediumFrequencyTaskM1+0x290>)
 800134a:	f007 fd49 	bl	8008de0 <VSS_TransitionEnded>
        if ( LoopClosed == true )
 800134e:	b90c      	cbnz	r4, 8001354 <TSK_MediumFrequencyTaskM1+0x98>
 8001350:	2800      	cmp	r0, #0
 8001352:	d0ec      	beq.n	800132e <TSK_MediumFrequencyTaskM1+0x72>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8001354:	4a7e      	ldr	r2, [pc, #504]	; (8001550 <TSK_MediumFrequencyTaskM1+0x294>)
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8001356:	4b7f      	ldr	r3, [pc, #508]	; (8001554 <TSK_MediumFrequencyTaskM1+0x298>)
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8001358:	6814      	ldr	r4, [r2, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 800135a:	f9b3 5010 	ldrsh.w	r5, [r3, #16]
 800135e:	4620      	mov	r0, r4
 8001360:	f005 fb4c 	bl	80069fc <PID_GetKIDivisor>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8001364:	fb05 f100 	mul.w	r1, r5, r0
 8001368:	4620      	mov	r0, r4
 800136a:	f005 fb43 	bl	80069f4 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 800136e:	2105      	movs	r1, #5
 8001370:	4873      	ldr	r0, [pc, #460]	; (8001540 <TSK_MediumFrequencyTaskM1+0x284>)
 8001372:	f006 ffa5 	bl	80082c0 <STM_NextState>
    break;
 8001376:	e7da      	b.n	800132e <TSK_MediumFrequencyTaskM1+0x72>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 8001378:	4b77      	ldr	r3, [pc, #476]	; (8001558 <TSK_MediumFrequencyTaskM1+0x29c>)
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	f7ff fcde 	bl	8000d3c <MCI_GetImposedMotorDirection>
 8001380:	4601      	mov	r1, r0
 8001382:	4871      	ldr	r0, [pc, #452]	; (8001548 <TSK_MediumFrequencyTaskM1+0x28c>)
 8001384:	f006 fdac 	bl	8007ee0 <RUC_Clear>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8001388:	4b6e      	ldr	r3, [pc, #440]	; (8001544 <TSK_MediumFrequencyTaskM1+0x288>)
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	f005 ff2e 	bl	80071ec <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001390:	2014      	movs	r0, #20
 8001392:	f7ff ff73 	bl	800127c <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8001396:	2110      	movs	r1, #16
 8001398:	4869      	ldr	r0, [pc, #420]	; (8001540 <TSK_MediumFrequencyTaskM1+0x284>)
 800139a:	f006 ff91 	bl	80082c0 <STM_NextState>
    break;
 800139e:	e7c6      	b.n	800132e <TSK_MediumFrequencyTaskM1+0x72>
      if( ! RUC_Exec( &RevUpControlM1 ) )
 80013a0:	4869      	ldr	r0, [pc, #420]	; (8001548 <TSK_MediumFrequencyTaskM1+0x28c>)
 80013a2:	f006 fde1 	bl	8007f68 <RUC_Exec>
 80013a6:	2800      	cmp	r0, #0
 80013a8:	f000 80ba 	beq.w	8001520 <TSK_MediumFrequencyTaskM1+0x264>
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 80013ac:	4b6b      	ldr	r3, [pc, #428]	; (800155c <TSK_MediumFrequencyTaskM1+0x2a0>)
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	f006 ff0c 	bl	80081cc <STC_CalcTorqueReference>
        IqdRef.d = FOCVars[M1].UserIdref;
 80013b4:	4b67      	ldr	r3, [pc, #412]	; (8001554 <TSK_MediumFrequencyTaskM1+0x298>)
 80013b6:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
        FOCVars[M1].Iqdref = IqdRef;
 80013ba:	8218      	strh	r0, [r3, #16]
 80013bc:	825a      	strh	r2, [r3, #18]
      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 80013be:	4863      	ldr	r0, [pc, #396]	; (800154c <TSK_MediumFrequencyTaskM1+0x290>)
 80013c0:	f10d 0102 	add.w	r1, sp, #2
 80013c4:	f007 fc6c 	bl	8008ca0 <VSS_CalcAvrgMecSpeedUnit>
      if (RUC_FirstAccelerationStageReached(&RevUpControlM1) == true)
 80013c8:	485f      	ldr	r0, [pc, #380]	; (8001548 <TSK_MediumFrequencyTaskM1+0x28c>)
 80013ca:	f006 fe03 	bl	8007fd4 <RUC_FirstAccelerationStageReached>
 80013ce:	2800      	cmp	r0, #0
 80013d0:	d0ad      	beq.n	800132e <TSK_MediumFrequencyTaskM1+0x72>
        ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 80013d2:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80013d6:	4858      	ldr	r0, [pc, #352]	; (8001538 <TSK_MediumFrequencyTaskM1+0x27c>)
 80013d8:	f007 fa16 	bl	8008808 <STO_PLL_IsObserverConverged>
 80013dc:	4604      	mov	r4, r0
        STO_SetDirection(&STO_PLL_M1, MCI_GetImposedMotorDirection( &Mci[M1]));
 80013de:	4860      	ldr	r0, [pc, #384]	; (8001560 <TSK_MediumFrequencyTaskM1+0x2a4>)
 80013e0:	f7ff fcac 	bl	8000d3c <MCI_GetImposedMotorDirection>
 80013e4:	b2c1      	uxtb	r1, r0
 80013e6:	4854      	ldr	r0, [pc, #336]	; (8001538 <TSK_MediumFrequencyTaskM1+0x27c>)
 80013e8:	f007 face 	bl	8008988 <STO_SetDirection>
        (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 80013ec:	4857      	ldr	r0, [pc, #348]	; (800154c <TSK_MediumFrequencyTaskM1+0x290>)
 80013ee:	4621      	mov	r1, r4
 80013f0:	f007 fce8 	bl	8008dc4 <VSS_SetStartTransition>
      if ( ObserverConverged )
 80013f4:	2c00      	cmp	r4, #0
 80013f6:	d09a      	beq.n	800132e <TSK_MediumFrequencyTaskM1+0x72>
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 80013f8:	484f      	ldr	r0, [pc, #316]	; (8001538 <TSK_MediumFrequencyTaskM1+0x27c>)
 80013fa:	4d56      	ldr	r5, [pc, #344]	; (8001554 <TSK_MediumFrequencyTaskM1+0x298>)
        REMNG_Init( pREMNG[M1] );
 80013fc:	4c59      	ldr	r4, [pc, #356]	; (8001564 <TSK_MediumFrequencyTaskM1+0x2a8>)
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 80013fe:	f006 fe1f 	bl	8008040 <SPD_GetElAngle>
 8001402:	4601      	mov	r1, r0
 8001404:	6868      	ldr	r0, [r5, #4]
 8001406:	f7ff fd81 	bl	8000f0c <MCM_Park>
 800140a:	4603      	mov	r3, r0
        REMNG_Init( pREMNG[M1] );
 800140c:	6820      	ldr	r0, [r4, #0]
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 800140e:	9301      	str	r3, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 8001410:	f006 fc9e 	bl	8007d50 <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 8001414:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 8001418:	6820      	ldr	r0, [r4, #0]
 800141a:	2200      	movs	r2, #0
 800141c:	f006 fcde 	bl	8007ddc <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 8001420:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8001424:	6820      	ldr	r0, [r4, #0]
 8001426:	2219      	movs	r2, #25
 8001428:	f006 fcd8 	bl	8007ddc <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 800142c:	2113      	movs	r1, #19
 800142e:	4844      	ldr	r0, [pc, #272]	; (8001540 <TSK_MediumFrequencyTaskM1+0x284>)
 8001430:	f006 ff46 	bl	80082c0 <STM_NextState>
    break;
 8001434:	e77b      	b.n	800132e <TSK_MediumFrequencyTaskM1+0x72>
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001436:	4c49      	ldr	r4, [pc, #292]	; (800155c <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001438:	493f      	ldr	r1, [pc, #252]	; (8001538 <TSK_MediumFrequencyTaskM1+0x27c>)
 800143a:	6820      	ldr	r0, [r4, #0]
 800143c:	f006 fe5a 	bl	80080f4 <STC_SetSpeedSensor>
	  FOC_InitAdditionalMethods(M1);
 8001440:	2000      	movs	r0, #0
 8001442:	f7ff ff03 	bl	800124c <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff ff02 	bl	8001250 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 800144c:	2106      	movs	r1, #6
 800144e:	483c      	ldr	r0, [pc, #240]	; (8001540 <TSK_MediumFrequencyTaskM1+0x284>)
 8001450:	f006 ff36 	bl	80082c0 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001454:	6820      	ldr	r0, [r4, #0]
 8001456:	f006 ff03 	bl	8008260 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 800145a:	4b3f      	ldr	r3, [pc, #252]	; (8001558 <TSK_MediumFrequencyTaskM1+0x29c>)
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	f7ff fc2b 	bl	8000cb8 <MCI_ExecBufferedCommands>
    break;
 8001462:	e764      	b.n	800132e <TSK_MediumFrequencyTaskM1+0x72>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001464:	4b3c      	ldr	r3, [pc, #240]	; (8001558 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001466:	6818      	ldr	r0, [r3, #0]
 8001468:	f7ff fc26 	bl	8000cb8 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff feef 	bl	8001250 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 8001472:	2c00      	cmp	r4, #0
 8001474:	f47f af5b 	bne.w	800132e <TSK_MediumFrequencyTaskM1+0x72>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8001478:	4622      	mov	r2, r4
 800147a:	2120      	movs	r1, #32
 800147c:	4830      	ldr	r0, [pc, #192]	; (8001540 <TSK_MediumFrequencyTaskM1+0x284>)
 800147e:	f006 fefd 	bl	800827c <STM_FaultProcessing>
 8001482:	e754      	b.n	800132e <TSK_MediumFrequencyTaskM1+0x72>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001484:	f7ff ff10 	bl	80012a8 <TSK_StopPermanencyTimeHasElapsedM1>
 8001488:	2800      	cmp	r0, #0
 800148a:	f43f af50 	beq.w	800132e <TSK_MediumFrequencyTaskM1+0x72>
      STM_NextState( &STM[M1], STOP_IDLE );
 800148e:	2109      	movs	r1, #9
 8001490:	482b      	ldr	r0, [pc, #172]	; (8001540 <TSK_MediumFrequencyTaskM1+0x284>)
 8001492:	f006 ff15 	bl	80082c0 <STM_NextState>
 8001496:	e74a      	b.n	800132e <TSK_MediumFrequencyTaskM1+0x72>
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 8001498:	4b30      	ldr	r3, [pc, #192]	; (800155c <TSK_MediumFrequencyTaskM1+0x2a0>)
 800149a:	492c      	ldr	r1, [pc, #176]	; (800154c <TSK_MediumFrequencyTaskM1+0x290>)
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	f006 fe29 	bl	80080f4 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 80014a2:	482a      	ldr	r0, [pc, #168]	; (800154c <TSK_MediumFrequencyTaskM1+0x290>)
 80014a4:	f007 fb98 	bl	8008bd8 <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 80014a8:	2100      	movs	r1, #0
 80014aa:	4825      	ldr	r0, [pc, #148]	; (8001540 <TSK_MediumFrequencyTaskM1+0x284>)
 80014ac:	f006 ff08 	bl	80082c0 <STM_NextState>
}
 80014b0:	e73d      	b.n	800132e <TSK_MediumFrequencyTaskM1+0x72>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80014b2:	f7ff fee9 	bl	8001288 <TSK_ChargeBootCapDelayHasElapsedM1>
 80014b6:	2800      	cmp	r0, #0
 80014b8:	f43f af39 	beq.w	800132e <TSK_MediumFrequencyTaskM1+0x72>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <TSK_MediumFrequencyTaskM1+0x288>)
 80014be:	2100      	movs	r1, #0
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	f005 fcb5 	bl	8006e30 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 80014c6:	2111      	movs	r1, #17
 80014c8:	481d      	ldr	r0, [pc, #116]	; (8001540 <TSK_MediumFrequencyTaskM1+0x284>)
 80014ca:	f006 fef9 	bl	80082c0 <STM_NextState>
 80014ce:	e72e      	b.n	800132e <TSK_MediumFrequencyTaskM1+0x72>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80014d0:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <TSK_MediumFrequencyTaskM1+0x288>)
 80014d2:	2101      	movs	r1, #1
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	f005 fcab 	bl	8006e30 <PWMC_CurrentReadingCalibr>
 80014da:	2800      	cmp	r0, #0
 80014dc:	f43f af27 	beq.w	800132e <TSK_MediumFrequencyTaskM1+0x72>
      STM_NextState( &STM[M1], CLEAR );
 80014e0:	2112      	movs	r1, #18
 80014e2:	4817      	ldr	r0, [pc, #92]	; (8001540 <TSK_MediumFrequencyTaskM1+0x284>)
 80014e4:	f006 feec 	bl	80082c0 <STM_NextState>
 80014e8:	e721      	b.n	800132e <TSK_MediumFrequencyTaskM1+0x72>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80014ea:	4a1c      	ldr	r2, [pc, #112]	; (800155c <TSK_MediumFrequencyTaskM1+0x2a0>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <TSK_MediumFrequencyTaskM1+0x298>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80014ee:	6810      	ldr	r0, [r2, #0]
 80014f0:	4916      	ldr	r1, [pc, #88]	; (800154c <TSK_MediumFrequencyTaskM1+0x290>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80014f8:	f006 fdfc 	bl	80080f4 <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 80014fc:	480e      	ldr	r0, [pc, #56]	; (8001538 <TSK_MediumFrequencyTaskM1+0x27c>)
 80014fe:	f007 f923 	bl	8008748 <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8001502:	480f      	ldr	r0, [pc, #60]	; (8001540 <TSK_MediumFrequencyTaskM1+0x284>)
 8001504:	2104      	movs	r1, #4
 8001506:	f006 fedb 	bl	80082c0 <STM_NextState>
 800150a:	2800      	cmp	r0, #0
 800150c:	f43f af0f 	beq.w	800132e <TSK_MediumFrequencyTaskM1+0x72>
      FOC_Clear( M1 );
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff fd5d 	bl	8000fd0 <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <TSK_MediumFrequencyTaskM1+0x288>)
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	f005 fe91 	bl	8007240 <R3_2_SwitchOnPWM>
 800151e:	e706      	b.n	800132e <TSK_MediumFrequencyTaskM1+0x72>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8001520:	4602      	mov	r2, r0
 8001522:	2110      	movs	r1, #16
 8001524:	4806      	ldr	r0, [pc, #24]	; (8001540 <TSK_MediumFrequencyTaskM1+0x284>)
 8001526:	f006 fea9 	bl	800827c <STM_FaultProcessing>
 800152a:	e748      	b.n	80013be <TSK_MediumFrequencyTaskM1+0x102>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 800152c:	4602      	mov	r2, r0
 800152e:	2110      	movs	r1, #16
 8001530:	4803      	ldr	r0, [pc, #12]	; (8001540 <TSK_MediumFrequencyTaskM1+0x284>)
 8001532:	f006 fea3 	bl	800827c <STM_FaultProcessing>
 8001536:	e6fa      	b.n	800132e <TSK_MediumFrequencyTaskM1+0x72>
 8001538:	20000394 	.word	0x20000394
 800153c:	20000aa4 	.word	0x20000aa4
 8001540:	20000a88 	.word	0x20000a88
 8001544:	20000ac0 	.word	0x20000ac0
 8001548:	20000308 	.word	0x20000308
 800154c:	20000518 	.word	0x20000518
 8001550:	20000ab0 	.word	0x20000ab0
 8001554:	200009f0 	.word	0x200009f0
 8001558:	20000a98 	.word	0x20000a98
 800155c:	20000ab8 	.word	0x20000ab8
 8001560:	20000a6c 	.word	0x20000a6c
 8001564:	20000ab4 	.word	0x20000ab4

08001568 <MC_Scheduler>:
{
 8001568:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MC_Scheduler+0x48>)
 800156c:	781c      	ldrb	r4, [r3, #0]
 800156e:	2c01      	cmp	r4, #1
 8001570:	d000      	beq.n	8001574 <MC_Scheduler+0xc>
}
 8001572:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8001574:	4d0f      	ldr	r5, [pc, #60]	; (80015b4 <MC_Scheduler+0x4c>)
 8001576:	882b      	ldrh	r3, [r5, #0]
 8001578:	b29b      	uxth	r3, r3
 800157a:	b1ab      	cbz	r3, 80015a8 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 800157c:	882b      	ldrh	r3, [r5, #0]
 800157e:	3b01      	subs	r3, #1
 8001580:	b29b      	uxth	r3, r3
 8001582:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001584:	4a0c      	ldr	r2, [pc, #48]	; (80015b8 <MC_Scheduler+0x50>)
 8001586:	8813      	ldrh	r3, [r2, #0]
 8001588:	b29b      	uxth	r3, r3
 800158a:	b11b      	cbz	r3, 8001594 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 800158c:	8813      	ldrh	r3, [r2, #0]
 800158e:	3b01      	subs	r3, #1
 8001590:	b29b      	uxth	r3, r3
 8001592:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001594:	4a09      	ldr	r2, [pc, #36]	; (80015bc <MC_Scheduler+0x54>)
 8001596:	8813      	ldrh	r3, [r2, #0]
 8001598:	b29b      	uxth	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0e9      	beq.n	8001572 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 800159e:	8813      	ldrh	r3, [r2, #0]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	8013      	strh	r3, [r2, #0]
}
 80015a6:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 80015a8:	f7ff fe88 	bl	80012bc <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 80015ac:	802c      	strh	r4, [r5, #0]
 80015ae:	e7e9      	b.n	8001584 <MC_Scheduler+0x1c>
 80015b0:	20000a8e 	.word	0x20000a8e
 80015b4:	20000a92 	.word	0x20000a92
 80015b8:	20000a90 	.word	0x20000a90
 80015bc:	20000a94 	.word	0x20000a94

080015c0 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80015c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if ( STM[M1].bState == SWITCH_OVER )
 80015c4:	4b53      	ldr	r3, [pc, #332]	; (8001714 <TSK_HighFrequencyTask+0x154>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80015c6:	4c54      	ldr	r4, [pc, #336]	; (8001718 <TSK_HighFrequencyTask+0x158>)
  if ( STM[M1].bState == SWITCH_OVER )
 80015c8:	781b      	ldrb	r3, [r3, #0]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80015ca:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 80015ce:	b088      	sub	sp, #32
  if ( STM[M1].bState == SWITCH_OVER )
 80015d0:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80015d2:	9005      	str	r0, [sp, #20]
  if ( STM[M1].bState == SWITCH_OVER )
 80015d4:	f000 8091 	beq.w	80016fa <TSK_HighFrequencyTask+0x13a>

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80015d8:	4b50      	ldr	r3, [pc, #320]	; (800171c <TSK_HighFrequencyTask+0x15c>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80015da:	4f51      	ldr	r7, [pc, #324]	; (8001720 <TSK_HighFrequencyTask+0x160>)
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	f006 fd8b 	bl	80080f8 <STC_GetSpeedSensor>
 80015e2:	4680      	mov	r8, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 80015e4:	f006 fd2c 	bl	8008040 <SPD_GetElAngle>
 80015e8:	4605      	mov	r5, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 80015ea:	4640      	mov	r0, r8
 80015ec:	f006 fd30 	bl	8008050 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80015f0:	a902      	add	r1, sp, #8
 80015f2:	6838      	ldr	r0, [r7, #0]
 80015f4:	f005 fae6 	bl	8006bc4 <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 80015f8:	f000 ff9c 	bl	8002534 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 80015fc:	f000 ff46 	bl	800248c <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8001600:	9802      	ldr	r0, [sp, #8]
 8001602:	f7ff fc41 	bl	8000e88 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001606:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001608:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800160a:	f7ff fc7f 	bl	8000f0c <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800160e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001612:	9000      	str	r0, [sp, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001614:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001616:	1ac9      	subs	r1, r1, r3
 8001618:	4b42      	ldr	r3, [pc, #264]	; (8001724 <TSK_HighFrequencyTask+0x164>)
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	f005 f9f6 	bl	8006a0c <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001620:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8001624:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.d = PI_Controller(pPIDId[M1],
 8001628:	1ac9      	subs	r1, r1, r3
 800162a:	4b3f      	ldr	r3, [pc, #252]	; (8001728 <TSK_HighFrequencyTask+0x168>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 800162c:	4606      	mov	r6, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	f005 f9ec 	bl	8006a0c <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001634:	4b3d      	ldr	r3, [pc, #244]	; (800172c <TSK_HighFrequencyTask+0x16c>)
 8001636:	f8ad 6004 	strh.w	r6, [sp, #4]
 800163a:	f8ad 0006 	strh.w	r0, [sp, #6]
 800163e:	9901      	ldr	r1, [sp, #4]
 8001640:	6818      	ldr	r0, [r3, #0]
 8001642:	f005 f8d9 	bl	80067f8 <Circle_Limitation>
 8001646:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001648:	4640      	mov	r0, r8
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 800164a:	9601      	str	r6, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800164c:	f006 fd00 	bl	8008050 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001650:	4629      	mov	r1, r5
 8001652:	9801      	ldr	r0, [sp, #4]
 8001654:	f7ff fc9c 	bl	8000f90 <MCM_Rev_Park>
 8001658:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800165a:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800165c:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800165e:	f005 fab3 	bl	8006bc8 <PWMC_SetPhaseVoltage>
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001662:	9b02      	ldr	r3, [sp, #8]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001664:	9a03      	ldr	r2, [sp, #12]
  FOCVars[M1].Iab = Iab;
 8001666:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001668:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 800166a:	9b00      	ldr	r3, [sp, #0]
  FOCVars[M1].Valphabeta = Valphabeta;
 800166c:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 800166e:	f8c4 6016 	str.w	r6, [r4, #22]
  if(hFOCreturn == MC_FOC_DURATION)
 8001672:	2901      	cmp	r1, #1
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001674:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001676:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001678:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 800167c:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 800167e:	d034      	beq.n	80016ea <TSK_HighFrequencyTask+0x12a>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001680:	482b      	ldr	r0, [pc, #172]	; (8001730 <TSK_HighFrequencyTask+0x170>)
 8001682:	f006 fca7 	bl	8007fd4 <RUC_FirstAccelerationStageReached>
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001686:	492b      	ldr	r1, [pc, #172]	; (8001734 <TSK_HighFrequencyTask+0x174>)
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8001688:	6862      	ldr	r2, [r4, #4]
 800168a:	9206      	str	r2, [sp, #24]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 800168c:	4603      	mov	r3, r0
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800168e:	6808      	ldr	r0, [r1, #0]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001690:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001692:	f005 f8a9 	bl	80067e8 <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001696:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001698:	4603      	mov	r3, r0
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 800169a:	4827      	ldr	r0, [pc, #156]	; (8001738 <TSK_HighFrequencyTask+0x178>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800169c:	f8ad 301c 	strh.w	r3, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 80016a0:	f006 fe98 	bl	80083d4 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 80016a4:	4824      	ldr	r0, [pc, #144]	; (8001738 <TSK_HighFrequencyTask+0x178>)
 80016a6:	f007 f81d 	bl	80086e4 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 80016aa:	b164      	cbz	r4, 80016c6 <TSK_HighFrequencyTask+0x106>
    hState = STM_GetState(&STM[M1]);
 80016ac:	4819      	ldr	r0, [pc, #100]	; (8001714 <TSK_HighFrequencyTask+0x154>)
 80016ae:	f006 fe7d 	bl	80083ac <STM_GetState>
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 80016b2:	1f03      	subs	r3, r0, #4
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d909      	bls.n	80016ce <TSK_HighFrequencyTask+0x10e>
 80016ba:	2813      	cmp	r0, #19
 80016bc:	d007      	beq.n	80016ce <TSK_HighFrequencyTask+0x10e>
}
 80016be:	2000      	movs	r0, #0
 80016c0:	b008      	add	sp, #32
 80016c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      STO_ResetPLL(&STO_PLL_M1);
 80016c6:	481c      	ldr	r0, [pc, #112]	; (8001738 <TSK_HighFrequencyTask+0x178>)
 80016c8:	f007 f942 	bl	8008950 <STO_ResetPLL>
 80016cc:	e7ee      	b.n	80016ac <TSK_HighFrequencyTask+0xec>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80016ce:	481a      	ldr	r0, [pc, #104]	; (8001738 <TSK_HighFrequencyTask+0x178>)
 80016d0:	f006 fcb6 	bl	8008040 <SPD_GetElAngle>
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 80016d4:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80016d6:	4603      	mov	r3, r0
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 80016d8:	4818      	ldr	r0, [pc, #96]	; (800173c <TSK_HighFrequencyTask+0x17c>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80016da:	f8ad 3010 	strh.w	r3, [sp, #16]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 80016de:	f007 fa8d 	bl	8008bfc <VSS_CalcElAngle>
}
 80016e2:	2000      	movs	r0, #0
 80016e4:	b008      	add	sp, #32
 80016e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	4809      	ldr	r0, [pc, #36]	; (8001714 <TSK_HighFrequencyTask+0x154>)
 80016ee:	f006 fdc5 	bl	800827c <STM_FaultProcessing>
}
 80016f2:	2000      	movs	r0, #0
 80016f4:	b008      	add	sp, #32
 80016f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 80016fa:	4d11      	ldr	r5, [pc, #68]	; (8001740 <TSK_HighFrequencyTask+0x180>)
 80016fc:	6828      	ldr	r0, [r5, #0]
 80016fe:	f006 fb51 	bl	8007da4 <REMNG_RampCompleted>
 8001702:	2800      	cmp	r0, #0
 8001704:	f47f af68 	bne.w	80015d8 <TSK_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 8001708:	6828      	ldr	r0, [r5, #0]
 800170a:	f006 fb29 	bl	8007d60 <REMNG_Calc>
 800170e:	8220      	strh	r0, [r4, #16]
 8001710:	e762      	b.n	80015d8 <TSK_HighFrequencyTask+0x18>
 8001712:	bf00      	nop
 8001714:	20000a88 	.word	0x20000a88
 8001718:	200009f0 	.word	0x200009f0
 800171c:	20000ab8 	.word	0x20000ab8
 8001720:	20000ac0 	.word	0x20000ac0
 8001724:	20000aac 	.word	0x20000aac
 8001728:	20000aa8 	.word	0x20000aa8
 800172c:	20000aa0 	.word	0x20000aa0
 8001730:	20000308 	.word	0x20000308
 8001734:	20000a9c 	.word	0x20000a9c
 8001738:	20000394 	.word	0x20000394
 800173c:	20000518 	.word	0x20000518
 8001740:	20000ab4 	.word	0x20000ab4

08001744 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001748:	4e20      	ldr	r6, [pc, #128]	; (80017cc <TSK_SafetyTask_PWMOFF+0x88>)
{
 800174a:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800174c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001750:	f005 f90a 	bl	8006968 <NTC_CalcAvTemp>
 8001754:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001756:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800175a:	f005 fb93 	bl	8006e84 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800175e:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001762:	4328      	orrs	r0, r5
 8001764:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8001766:	b334      	cbz	r4, 80017b6 <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001768:	4f19      	ldr	r7, [pc, #100]	; (80017d0 <TSK_SafetyTask_PWMOFF+0x8c>)
 800176a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800176e:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8001772:	43ea      	mvns	r2, r5
 8001774:	b292      	uxth	r2, r2
 8001776:	4629      	mov	r1, r5
 8001778:	4638      	mov	r0, r7
 800177a:	f006 fd7f 	bl	800827c <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 800177e:	4638      	mov	r0, r7
 8001780:	f006 fe14 	bl	80083ac <STM_GetState>
 8001784:	280a      	cmp	r0, #10
 8001786:	d002      	beq.n	800178e <TSK_SafetyTask_PWMOFF+0x4a>
 8001788:	280b      	cmp	r0, #11
 800178a:	d00e      	beq.n	80017aa <TSK_SafetyTask_PWMOFF+0x66>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 800178c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800178e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001792:	f005 fb4b 	bl	8006e2c <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001796:	4620      	mov	r0, r4
 8001798:	f7ff fc1a 	bl	8000fd0 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <TSK_SafetyTask_PWMOFF+0x90>)
 800179e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 80017a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80017a6:	f005 b889 	b.w	80068bc <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80017aa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 80017ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80017b2:	f005 bb3b 	b.w	8006e2c <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <TSK_SafetyTask_PWMOFF+0x94>)
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	f006 fa93 	bl	8007ce4 <RVBS_CalcAvVbus>
 80017be:	f000 000e 	and.w	r0, r0, #14
 80017c2:	4305      	orrs	r5, r0
 80017c4:	e7d0      	b.n	8001768 <TSK_SafetyTask_PWMOFF+0x24>
 80017c6:	bf00      	nop
 80017c8:	20000abc 	.word	0x20000abc
 80017cc:	20000ac0 	.word	0x20000ac0
 80017d0:	20000a88 	.word	0x20000a88
 80017d4:	20000aa4 	.word	0x20000aa4
 80017d8:	20000a9c 	.word	0x20000a9c

080017dc <TSK_SafetyTask>:
{
 80017dc:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <TSK_SafetyTask+0x1c>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d000      	beq.n	80017e8 <TSK_SafetyTask+0xc>
}
 80017e6:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80017e8:	2000      	movs	r0, #0
 80017ea:	f7ff ffab 	bl	8001744 <TSK_SafetyTask_PWMOFF>
}
 80017ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 80017f2:	f000 be1b 	b.w	800242c <RCM_ExecUserConv>
 80017f6:	bf00      	nop
 80017f8:	20000a8e 	.word	0x20000a8e

080017fc <MC_RunMotorControlTasks>:
{
 80017fc:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MC_RunMotorControlTasks+0x1c>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	b903      	cbnz	r3, 8001806 <MC_RunMotorControlTasks+0xa>
}
 8001804:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001806:	f7ff feaf 	bl	8001568 <MC_Scheduler>
    TSK_SafetyTask();
 800180a:	f7ff ffe7 	bl	80017dc <TSK_SafetyTask>
}
 800180e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 8001812:	f001 ba4b 	b.w	8002cac <UI_Scheduler>
 8001816:	bf00      	nop
 8001818:	20000a8e 	.word	0x20000a8e

0800181c <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 800181c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <TSK_HardwareFaultTask+0x18>)
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	f005 fd59 	bl	80072d8 <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001826:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 800182a:	4803      	ldr	r0, [pc, #12]	; (8001838 <TSK_HardwareFaultTask+0x1c>)
 800182c:	2200      	movs	r2, #0
 800182e:	2180      	movs	r1, #128	; 0x80
 8001830:	f006 bd24 	b.w	800827c <STM_FaultProcessing>
 8001834:	20000ac0 	.word	0x20000ac0
 8001838:	20000a88 	.word	0x20000a88

0800183c <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 800183c:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800183e:	4a4d      	ldr	r2, [pc, #308]	; (8001974 <mc_lock_pins+0x138>)
 8001840:	494d      	ldr	r1, [pc, #308]	; (8001978 <mc_lock_pins+0x13c>)
 8001842:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001844:	2504      	movs	r5, #4
 8001846:	b092      	sub	sp, #72	; 0x48
 8001848:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800184a:	61d1      	str	r1, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 800184c:	69d3      	ldr	r3, [r2, #28]
 800184e:	9311      	str	r3, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001850:	484a      	ldr	r0, [pc, #296]	; (800197c <mc_lock_pins+0x140>)
  (void) temp;
 8001852:	9b11      	ldr	r3, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001854:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001856:	2602      	movs	r6, #2
 8001858:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800185a:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800185c:	69d3      	ldr	r3, [r2, #28]
 800185e:	9310      	str	r3, [sp, #64]	; 0x40
  (void) temp;
 8001860:	9b10      	ldr	r3, [sp, #64]	; 0x40
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001862:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001866:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
 800186a:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800186c:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800186e:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001870:	69d4      	ldr	r4, [r2, #28]
 8001872:	940f      	str	r4, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001874:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
  (void) temp;
 8001878:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, PinMask);
 800187a:	2701      	movs	r7, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800187c:	f04f 1401 	mov.w	r4, #65537	; 0x10001
 8001880:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001882:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001884:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001886:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 800188a:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  (void) temp;
 800188e:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001892:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001894:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001896:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001898:	69d4      	ldr	r4, [r2, #28]
 800189a:	940d      	str	r4, [sp, #52]	; 0x34
  (void) temp;
 800189c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800189e:	4c38      	ldr	r4, [pc, #224]	; (8001980 <mc_lock_pins+0x144>)
 80018a0:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018a2:	2780      	movs	r7, #128	; 0x80
 80018a4:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018a6:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018a8:	69dc      	ldr	r4, [r3, #28]
 80018aa:	940c      	str	r4, [sp, #48]	; 0x30
  (void) temp;
 80018ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018ae:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018b0:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018b2:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018b4:	69d8      	ldr	r0, [r3, #28]
 80018b6:	900b      	str	r0, [sp, #44]	; 0x2c
  (void) temp;
 80018b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018ba:	4832      	ldr	r0, [pc, #200]	; (8001984 <mc_lock_pins+0x148>)
 80018bc:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018be:	2408      	movs	r4, #8
 80018c0:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018c2:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018c4:	69d8      	ldr	r0, [r3, #28]
 80018c6:	900a      	str	r0, [sp, #40]	; 0x28
  (void) temp;
 80018c8:	980a      	ldr	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018ca:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018cc:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018ce:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018d0:	69d9      	ldr	r1, [r3, #28]
 80018d2:	9109      	str	r1, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018d4:	2040      	movs	r0, #64	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018d6:	492c      	ldr	r1, [pc, #176]	; (8001988 <mc_lock_pins+0x14c>)
  (void) temp;
 80018d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018da:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018dc:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018de:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018e0:	69d9      	ldr	r1, [r3, #28]
 80018e2:	9108      	str	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018e4:	2020      	movs	r0, #32
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018e6:	4929      	ldr	r1, [pc, #164]	; (800198c <mc_lock_pins+0x150>)
  (void) temp;
 80018e8:	9c08      	ldr	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018ea:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018ec:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018ee:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018f0:	69d8      	ldr	r0, [r3, #28]
 80018f2:	9007      	str	r0, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018f4:	31e0      	adds	r1, #224	; 0xe0
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018f6:	f44f 7080 	mov.w	r0, #256	; 0x100
  (void) temp;
 80018fa:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018fc:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018fe:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001900:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001902:	69d9      	ldr	r1, [r3, #28]
 8001904:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001906:	f44f 7000 	mov.w	r0, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800190a:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  (void) temp;
 800190e:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001910:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001912:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001914:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001916:	69d9      	ldr	r1, [r3, #28]
 8001918:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800191a:	f44f 6080 	mov.w	r0, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800191e:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  (void) temp;
 8001922:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001924:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001926:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001928:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800192a:	69d9      	ldr	r1, [r3, #28]
 800192c:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800192e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001932:	f44f 3188 	mov.w	r1, #69632	; 0x11000
  (void) temp;
 8001936:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001938:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800193a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800193c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	9303      	str	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001942:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001946:	f44f 33c0 	mov.w	r3, #98304	; 0x18000
  (void) temp;
 800194a:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800194c:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800194e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001950:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001952:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <mc_lock_pins+0x154>)
  temp = READ_REG(GPIOx->LCKR);
 8001956:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001958:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800195c:	f44f 3290 	mov.w	r2, #73728	; 0x12000
  (void) temp;
 8001960:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001962:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001964:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001966:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	9301      	str	r3, [sp, #4]
  (void) temp;
 800196c:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 800196e:	b012      	add	sp, #72	; 0x48
 8001970:	bcf0      	pop	{r4, r5, r6, r7}
 8001972:	4770      	bx	lr
 8001974:	48000400 	.word	0x48000400
 8001978:	00010004 	.word	0x00010004
 800197c:	00010002 	.word	0x00010002
 8001980:	00010080 	.word	0x00010080
 8001984:	00010008 	.word	0x00010008
 8001988:	00010040 	.word	0x00010040
 800198c:	00010020 	.word	0x00010020
 8001990:	48000800 	.word	0x48000800

08001994 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001996:	460c      	mov	r4, r1
 8001998:	b08d      	sub	sp, #52	; 0x34
 800199a:	4616      	mov	r6, r2
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 800199c:	2100      	movs	r1, #0
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 800199e:	0962      	lsrs	r2, r4, #5
{
 80019a0:	4605      	mov	r5, r0
 80019a2:	461f      	mov	r7, r3
  bool bNoError = false; // Default is error
 80019a4:	f88d 1009 	strb.w	r1, [sp, #9]
  if (bMotorSelection != 0)
 80019a8:	d122      	bne.n	80019f0 <MCP_ReceivedFrame+0x5c>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 80019aa:	2c12      	cmp	r4, #18
 80019ac:	d814      	bhi.n	80019d8 <MCP_ReceivedFrame+0x44>
 80019ae:	e8df f014 	tbh	[pc, r4, lsl #1]
 80019b2:	0016      	.short	0x0016
 80019b4:	00d8017b 	.word	0x00d8017b
 80019b8:	00130171 	.word	0x00130171
 80019bc:	004c0013 	.word	0x004c0013
 80019c0:	008d0078 	.word	0x008d0078
 80019c4:	021b00b6 	.word	0x021b00b6
 80019c8:	01f701d0 	.word	0x01f701d0
 80019cc:	001301e7 	.word	0x001301e7
 80019d0:	00130013 	.word	0x00130013
 80019d4:	00160013 	.word	0x00160013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 80019d8:	2301      	movs	r3, #1
 80019da:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 80019de:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80019e2:	2301      	movs	r3, #1
 80019e4:	f10d 020e 	add.w	r2, sp, #14
 80019e8:	21ff      	movs	r1, #255	; 0xff
 80019ea:	47a0      	blx	r4
    }
  }
}
 80019ec:	b00d      	add	sp, #52	; 0x34
 80019ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 80019f0:	3a01      	subs	r2, #1
 80019f2:	f001 f9a7 	bl	8002d44 <UI_SetReg>
 80019f6:	b1c8      	cbz	r0, 8001a2c <MCP_ReceivedFrame+0x98>
  switch (Code)
 80019f8:	f004 041f 	and.w	r4, r4, #31
 80019fc:	2c12      	cmp	r4, #18
 80019fe:	f200 829a 	bhi.w	8001f36 <MCP_ReceivedFrame+0x5a2>
 8001a02:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001a06:	0089      	.short	0x0089
 8001a08:	00ae0151 	.word	0x00ae0151
 8001a0c:	02980147 	.word	0x02980147
 8001a10:	00220298 	.word	0x00220298
 8001a14:	0063004e 	.word	0x0063004e
 8001a18:	01f1008c 	.word	0x01f1008c
 8001a1c:	01cd01a6 	.word	0x01cd01a6
 8001a20:	029801bd 	.word	0x029801bd
 8001a24:	02980298 	.word	0x02980298
 8001a28:	00890298 	.word	0x00890298
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8001a2c:	230b      	movs	r3, #11
    if (bNoError)
 8001a2e:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8001a32:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001a36:	2800      	cmp	r0, #0
 8001a38:	d0d1      	beq.n	80019de <MCP_ReceivedFrame+0x4a>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001a40:	461a      	mov	r2, r3
 8001a42:	21f0      	movs	r1, #240	; 0xf0
 8001a44:	47a0      	blx	r4
}
 8001a46:	b00d      	add	sp, #52	; 0x34
 8001a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
        outBuff[i] = 0;
 8001a4a:	ac04      	add	r4, sp, #16
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2220      	movs	r2, #32
 8001a50:	4620      	mov	r0, r4
 8001a52:	f007 f9c9 	bl	8008de8 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001a56:	f8d5 c0a8 	ldr.w	ip, [r5, #168]	; 0xa8
 8001a5a:	f10d 0112 	add.w	r1, sp, #18
 8001a5e:	f10c 33ff 	add.w	r3, ip, #4294967295
 8001a62:	f10c 071c 	add.w	r7, ip, #28
 8001a66:	f1cc 0601 	rsb	r6, ip, #1
 8001a6a:	e004      	b.n	8001a76 <MCP_ReceivedFrame+0xe2>
 8001a6c:	42bb      	cmp	r3, r7
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001a6e:	f801 2f01 	strb.w	r2, [r1, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001a72:	f000 82a2 	beq.w	8001fba <MCP_ReceivedFrame+0x626>
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001a76:	18f0      	adds	r0, r6, r3
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001a78:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8001a7c:	2a09      	cmp	r2, #9
 8001a7e:	d1f5      	bne.n	8001a6c <MCP_ReceivedFrame+0xd8>
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001a80:	1d43      	adds	r3, r0, #5
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001a82:	1dc2      	adds	r2, r0, #7
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001a84:	3009      	adds	r0, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001a86:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8001a8a:	f88d 3010 	strb.w	r3, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001a8e:	f81c 3002 	ldrb.w	r3, [ip, r2]
 8001a92:	f88d 3011 	strb.w	r3, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001a96:	f81c 3000 	ldrb.w	r3, [ip, r0]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001a9a:	69ee      	ldr	r6, [r5, #28]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001a9c:	f88d 3012 	strb.w	r3, [sp, #18]
 8001aa0:	e199      	b.n	8001dd6 <MCP_ReceivedFrame+0x442>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001aa2:	7872      	ldrb	r2, [r6, #1]
 8001aa4:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001aa6:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001aa8:	78f1      	ldrb	r1, [r6, #3]
 8001aaa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001aae:	78b2      	ldrb	r2, [r6, #2]
 8001ab0:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001ab4:	7932      	ldrb	r2, [r6, #4]
 8001ab6:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001aba:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8001abe:	b292      	uxth	r2, r2
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	f001 fde5 	bl	8003690 <UI_ExecSpeedRamp>
 8001ac6:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001aca:	e7b4      	b.n	8001a36 <MCP_ReceivedFrame+0xa2>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8001acc:	f10d 000e 	add.w	r0, sp, #14
 8001ad0:	7831      	ldrb	r1, [r6, #0]
 8001ad2:	9000      	str	r0, [sp, #0]
 8001ad4:	ab03      	add	r3, sp, #12
 8001ad6:	f10d 020a 	add.w	r2, sp, #10
 8001ada:	4628      	mov	r0, r5
 8001adc:	f001 fdf4 	bl	80036c8 <UI_GetRevupData>
      outBuff[4] = (uint8_t)(FinalTorque);
 8001ae0:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
      outBuff[6] = (uint8_t)(Durationms);
 8001ae4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001ae8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001aec:	69ec      	ldr	r4, [r5, #28]
      outBuff[0] = (uint8_t)(rpm);
 8001aee:	2200      	movs	r2, #0
 8001af0:	f360 0207 	bfi	r2, r0, #0, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001af4:	1200      	asrs	r0, r0, #8
      outBuff[0] = (uint8_t)(rpm);
 8001af6:	f360 220f 	bfi	r2, r0, #8, #8
 8001afa:	f361 4217 	bfi	r2, r1, #16, #8
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001afe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001b02:	0a09      	lsrs	r1, r1, #8
      outBuff[0] = (uint8_t)(rpm);
 8001b04:	f361 621f 	bfi	r2, r1, #24, #8
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001b08:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8001b0a:	e9cd 3204 	strd	r3, r2, [sp, #16]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001b0e:	69a8      	ldr	r0, [r5, #24]
 8001b10:	2308      	movs	r3, #8
 8001b12:	aa04      	add	r2, sp, #16
 8001b14:	21f0      	movs	r1, #240	; 0xf0
 8001b16:	47a0      	blx	r4
    if (bNoError)
 8001b18:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001b1c:	e78b      	b.n	8001a36 <MCP_ReceivedFrame+0xa2>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001b1e:	78b1      	ldrb	r1, [r6, #2]
 8001b20:	7872      	ldrb	r2, [r6, #1]
 8001b22:	78f3      	ldrb	r3, [r6, #3]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001b24:	7970      	ldrb	r0, [r6, #5]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001b26:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8001b2a:	7931      	ldrb	r1, [r6, #4]
 8001b2c:	eb02 4203 	add.w	r2, r2, r3, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001b30:	4bb6      	ldr	r3, [pc, #728]	; (8001e0c <MCP_ReceivedFrame+0x478>)
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001b32:	eb02 6201 	add.w	r2, r2, r1, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001b36:	fb83 1302 	smull	r1, r3, r3, r2
 8001b3a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001b3e:	7a31      	ldrb	r1, [r6, #8]
 8001b40:	79f2      	ldrb	r2, [r6, #7]
 8001b42:	eb02 2201 	add.w	r2, r2, r1, lsl #8
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001b46:	79b1      	ldrb	r1, [r6, #6]
 8001b48:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001b4c:	b200      	sxth	r0, r0
 8001b4e:	7831      	ldrb	r1, [r6, #0]
 8001b50:	9000      	str	r0, [sp, #0]
 8001b52:	b21b      	sxth	r3, r3
 8001b54:	b292      	uxth	r2, r2
 8001b56:	4628      	mov	r0, r5
 8001b58:	f001 fdd4 	bl	8003704 <UI_SetRevupData>
 8001b5c:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001b60:	e769      	b.n	8001a36 <MCP_ReceivedFrame+0xa2>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001b62:	f996 3000 	ldrsb.w	r3, [r6]
 8001b66:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8001b68:	2203      	movs	r2, #3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f88d 200e 	strb.w	r2, [sp, #14]
 8001b70:	f2c0 816f 	blt.w	8001e52 <MCP_ReceivedFrame+0x4be>
 8001b74:	2963      	cmp	r1, #99	; 0x63
 8001b76:	f200 81c3 	bhi.w	8001f00 <MCP_ReceivedFrame+0x56c>
 8001b7a:	2941      	cmp	r1, #65	; 0x41
 8001b7c:	f200 814a 	bhi.w	8001e14 <MCP_ReceivedFrame+0x480>
 8001b80:	2941      	cmp	r1, #65	; 0x41
 8001b82:	d8c9      	bhi.n	8001b18 <MCP_ReceivedFrame+0x184>
 8001b84:	a301      	add	r3, pc, #4	; (adr r3, 8001b8c <MCP_ReceivedFrame+0x1f8>)
 8001b86:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8001b8a:	bf00      	nop
 8001b8c:	08001f69 	.word	0x08001f69
 8001b90:	08001f13 	.word	0x08001f13
 8001b94:	08001f69 	.word	0x08001f69
 8001b98:	08001f69 	.word	0x08001f69
 8001b9c:	08001f13 	.word	0x08001f13
 8001ba0:	08001e2f 	.word	0x08001e2f
 8001ba4:	08001e2f 	.word	0x08001e2f
 8001ba8:	08001e2f 	.word	0x08001e2f
 8001bac:	08001e2f 	.word	0x08001e2f
 8001bb0:	08001e2f 	.word	0x08001e2f
 8001bb4:	08001e2f 	.word	0x08001e2f
 8001bb8:	08001e2f 	.word	0x08001e2f
 8001bbc:	08001e2f 	.word	0x08001e2f
 8001bc0:	08001e2f 	.word	0x08001e2f
 8001bc4:	08001e2f 	.word	0x08001e2f
 8001bc8:	08001e2f 	.word	0x08001e2f
 8001bcc:	08001e2f 	.word	0x08001e2f
 8001bd0:	08001e2f 	.word	0x08001e2f
 8001bd4:	08001e2f 	.word	0x08001e2f
 8001bd8:	08001e2f 	.word	0x08001e2f
 8001bdc:	08001e2f 	.word	0x08001e2f
 8001be0:	08001e2f 	.word	0x08001e2f
 8001be4:	08001e2f 	.word	0x08001e2f
 8001be8:	08001e2f 	.word	0x08001e2f
 8001bec:	08001e2f 	.word	0x08001e2f
 8001bf0:	08001e2f 	.word	0x08001e2f
 8001bf4:	08001e2f 	.word	0x08001e2f
 8001bf8:	08001e2f 	.word	0x08001e2f
 8001bfc:	08001b19 	.word	0x08001b19
 8001c00:	08001b19 	.word	0x08001b19
 8001c04:	08001f13 	.word	0x08001f13
 8001c08:	08001e2f 	.word	0x08001e2f
 8001c0c:	08001e2f 	.word	0x08001e2f
 8001c10:	08001e2f 	.word	0x08001e2f
 8001c14:	08001f69 	.word	0x08001f69
 8001c18:	08001b19 	.word	0x08001b19
 8001c1c:	08001b19 	.word	0x08001b19
 8001c20:	08001b19 	.word	0x08001b19
 8001c24:	08001b19 	.word	0x08001b19
 8001c28:	08001b19 	.word	0x08001b19
 8001c2c:	08001b19 	.word	0x08001b19
 8001c30:	08001b19 	.word	0x08001b19
 8001c34:	08001b19 	.word	0x08001b19
 8001c38:	08001b19 	.word	0x08001b19
 8001c3c:	08001b19 	.word	0x08001b19
 8001c40:	08001b19 	.word	0x08001b19
 8001c44:	08001b19 	.word	0x08001b19
 8001c48:	08001b19 	.word	0x08001b19
 8001c4c:	08001b19 	.word	0x08001b19
 8001c50:	08001b19 	.word	0x08001b19
 8001c54:	08001b19 	.word	0x08001b19
 8001c58:	08001b19 	.word	0x08001b19
 8001c5c:	08001b19 	.word	0x08001b19
 8001c60:	08001b19 	.word	0x08001b19
 8001c64:	08001b19 	.word	0x08001b19
 8001c68:	08001b19 	.word	0x08001b19
 8001c6c:	08001b19 	.word	0x08001b19
 8001c70:	08001b19 	.word	0x08001b19
 8001c74:	08001b19 	.word	0x08001b19
 8001c78:	08001b19 	.word	0x08001b19
 8001c7c:	08001b19 	.word	0x08001b19
 8001c80:	08001b19 	.word	0x08001b19
 8001c84:	08001b19 	.word	0x08001b19
 8001c88:	08001b19 	.word	0x08001b19
 8001c8c:	08001b19 	.word	0x08001b19
 8001c90:	08001e2f 	.word	0x08001e2f
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001c94:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001c96:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001c98:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001c9c:	4628      	mov	r0, r5
 8001c9e:	f001 fcbb 	bl	8003618 <UI_ExecCmd>
 8001ca2:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001ca6:	e6c6      	b.n	8001a36 <MCP_ReceivedFrame+0xa2>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001ca8:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8001caa:	2305      	movs	r3, #5
 8001cac:	2948      	cmp	r1, #72	; 0x48
 8001cae:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001cb2:	f200 80ed 	bhi.w	8001e90 <MCP_ReceivedFrame+0x4fc>
 8001cb6:	2948      	cmp	r1, #72	; 0x48
 8001cb8:	f200 8102 	bhi.w	8001ec0 <MCP_ReceivedFrame+0x52c>
 8001cbc:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001cc0:	01000175 	.word	0x01000175
 8001cc4:	016e0100 	.word	0x016e0100
 8001cc8:	01410100 	.word	0x01410100
 8001ccc:	01410141 	.word	0x01410141
 8001cd0:	01410141 	.word	0x01410141
 8001cd4:	01410141 	.word	0x01410141
 8001cd8:	01410141 	.word	0x01410141
 8001cdc:	01410141 	.word	0x01410141
 8001ce0:	01100110 	.word	0x01100110
 8001ce4:	01000100 	.word	0x01000100
 8001ce8:	01410141 	.word	0x01410141
 8001cec:	01410141 	.word	0x01410141
 8001cf0:	01000141 	.word	0x01000141
 8001cf4:	01000100 	.word	0x01000100
 8001cf8:	00900090 	.word	0x00900090
 8001cfc:	01000100 	.word	0x01000100
 8001d00:	01000100 	.word	0x01000100
 8001d04:	01000100 	.word	0x01000100
 8001d08:	01000100 	.word	0x01000100
 8001d0c:	01000100 	.word	0x01000100
 8001d10:	01000100 	.word	0x01000100
 8001d14:	01000100 	.word	0x01000100
 8001d18:	01000100 	.word	0x01000100
 8001d1c:	01000100 	.word	0x01000100
 8001d20:	01000100 	.word	0x01000100
 8001d24:	01000100 	.word	0x01000100
 8001d28:	01000100 	.word	0x01000100
 8001d2c:	01000100 	.word	0x01000100
 8001d30:	01000100 	.word	0x01000100
 8001d34:	01000100 	.word	0x01000100
 8001d38:	01000100 	.word	0x01000100
 8001d3c:	01000100 	.word	0x01000100
 8001d40:	01410100 	.word	0x01410100
 8001d44:	01000100 	.word	0x01000100
 8001d48:	01000100 	.word	0x01000100
 8001d4c:	01100110 	.word	0x01100110
 8001d50:	0110      	.short	0x0110
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001d52:	4c2f      	ldr	r4, [pc, #188]	; (8001e10 <MCP_ReceivedFrame+0x47c>)
      stepList.data = buffer;
 8001d54:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001d56:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001d58:	4621      	mov	r1, r4
 8001d5a:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8001d5c:	f88d 7014 	strb.w	r7, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001d60:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001d64:	f001 fcf8 	bl	8003758 <UI_GetMPInfo>
 8001d68:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 8001d6c:	2800      	cmp	r0, #0
 8001d6e:	f43f ae36 	beq.w	80019de <MCP_ReceivedFrame+0x4a>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001d72:	69ee      	ldr	r6, [r5, #28]
 8001d74:	7923      	ldrb	r3, [r4, #4]
 8001d76:	6822      	ldr	r2, [r4, #0]
 8001d78:	69a8      	ldr	r0, [r5, #24]
 8001d7a:	21f0      	movs	r1, #240	; 0xf0
 8001d7c:	47b0      	blx	r6
  if (RequireAck)
 8001d7e:	e635      	b.n	80019ec <MCP_ReceivedFrame+0x58>
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001d80:	7870      	ldrb	r0, [r6, #1]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001d82:	7973      	ldrb	r3, [r6, #5]
 8001d84:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001d86:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001d88:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001d8c:	eb01 2100 	add.w	r1, r1, r0, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001d90:	b292      	uxth	r2, r2
 8001d92:	b209      	sxth	r1, r1
 8001d94:	4628      	mov	r0, r5
 8001d96:	f001 fc8d 	bl	80036b4 <UI_ExecTorqueRamp>
 8001d9a:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001d9e:	e64a      	b.n	8001a36 <MCP_ReceivedFrame+0xa2>
 8001da0:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
 8001da4:	ac04      	add	r4, sp, #16
 8001da6:	3801      	subs	r0, #1
 8001da8:	4626      	mov	r6, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001daa:	2200      	movs	r2, #0
 8001dac:	e003      	b.n	8001db6 <MCP_ReceivedFrame+0x422>
 8001dae:	2a20      	cmp	r2, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8001db0:	f806 1b01 	strb.w	r1, [r6], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001db4:	d00e      	beq.n	8001dd4 <MCP_ReceivedFrame+0x440>
 8001db6:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8001dba:	b2d3      	uxtb	r3, r2
 8001dbc:	3201      	adds	r2, #1
 8001dbe:	2900      	cmp	r1, #0
 8001dc0:	d1f5      	bne.n	8001dae <MCP_ReceivedFrame+0x41a>
        outBuff[i] = 0;
 8001dc2:	f103 0230 	add.w	r2, r3, #48	; 0x30
      for (; i < 32; i++)
 8001dc6:	3301      	adds	r3, #1
        outBuff[i] = 0;
 8001dc8:	446a      	add	r2, sp
      for (; i < 32; i++)
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b20      	cmp	r3, #32
        outBuff[i] = 0;
 8001dce:	f802 1c20 	strb.w	r1, [r2, #-32]
      for (; i < 32; i++)
 8001dd2:	d1f6      	bne.n	8001dc2 <MCP_ReceivedFrame+0x42e>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001dd4:	69ee      	ldr	r6, [r5, #28]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001dd6:	69a8      	ldr	r0, [r5, #24]
 8001dd8:	2320      	movs	r3, #32
 8001dda:	4622      	mov	r2, r4
 8001ddc:	21f0      	movs	r1, #240	; 0xf0
 8001dde:	47b0      	blx	r6
      bNoError = true;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001de6:	e628      	b.n	8001a3a <MCP_ReceivedFrame+0xa6>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001de8:	78f3      	ldrb	r3, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001dea:	7870      	ldrb	r0, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001dec:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001dee:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001df0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001df4:	eb01 2100 	add.w	r1, r1, r0, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001df8:	b212      	sxth	r2, r2
 8001dfa:	b209      	sxth	r1, r1
 8001dfc:	4628      	mov	r0, r5
 8001dfe:	f001 fc9d 	bl	800373c <UI_SetCurrentReferences>
      bNoError = true;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001e08:	e617      	b.n	8001a3a <MCP_ReceivedFrame+0xa6>
 8001e0a:	bf00      	nop
 8001e0c:	2aaaaaab 	.word	0x2aaaaaab
 8001e10:	20000ac4 	.word	0x20000ac4
 8001e14:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b1b      	cmp	r3, #27
 8001e1c:	f63f ae7c 	bhi.w	8001b18 <MCP_ReceivedFrame+0x184>
 8001e20:	4868      	ldr	r0, [pc, #416]	; (8001fc4 <MCP_ReceivedFrame+0x630>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	4203      	tst	r3, r0
 8001e2a:	f000 80af 	beq.w	8001f8c <MCP_ReceivedFrame+0x5f8>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001e2e:	f10d 0209 	add.w	r2, sp, #9
 8001e32:	4628      	mov	r0, r5
 8001e34:	f001 f8f6 	bl	8003024 <UI_GetReg>
          if ( bNoError == true )
 8001e38:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001e3c:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f43f adcd 	beq.w	80019de <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001e44:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001e48:	2302      	movs	r3, #2
 8001e4a:	aa04      	add	r2, sp, #16
 8001e4c:	21f0      	movs	r1, #240	; 0xf0
 8001e4e:	47a0      	blx	r4
  if (RequireAck)
 8001e50:	e5cc      	b.n	80019ec <MCP_ReceivedFrame+0x58>
 8001e52:	f081 0380 	eor.w	r3, r1, #128	; 0x80
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
 8001e5c:	f63f ae5c 	bhi.w	8001b18 <MCP_ReceivedFrame+0x184>
 8001e60:	2a08      	cmp	r2, #8
 8001e62:	f63f ae59 	bhi.w	8001b18 <MCP_ReceivedFrame+0x184>
 8001e66:	a301      	add	r3, pc, #4	; (adr r3, 8001e6c <MCP_ReceivedFrame+0x4d8>)
 8001e68:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001e6c:	08001f69 	.word	0x08001f69
 8001e70:	08001b19 	.word	0x08001b19
 8001e74:	08001f69 	.word	0x08001f69
 8001e78:	08001f13 	.word	0x08001f13
 8001e7c:	08001f13 	.word	0x08001f13
 8001e80:	08001f13 	.word	0x08001f13
 8001e84:	08001e2f 	.word	0x08001e2f
 8001e88:	08001e2f 	.word	0x08001e2f
 8001e8c:	08001e2f 	.word	0x08001e2f
 8001e90:	2965      	cmp	r1, #101	; 0x65
 8001e92:	d913      	bls.n	8001ebc <MCP_ReceivedFrame+0x528>
 8001e94:	f1a1 0374 	sub.w	r3, r1, #116	; 0x74
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	2a14      	cmp	r2, #20
 8001e9c:	d810      	bhi.n	8001ec0 <MCP_ReceivedFrame+0x52c>
 8001e9e:	2b14      	cmp	r3, #20
 8001ea0:	d80e      	bhi.n	8001ec0 <MCP_ReceivedFrame+0x52c>
 8001ea2:	e8df f003 	tbb	[pc, r3]
 8001ea6:	1d7b      	.short	0x1d7b
 8001ea8:	1d1d1d1d 	.word	0x1d1d1d1d
 8001eac:	1d0d0d0d 	.word	0x1d0d0d0d
 8001eb0:	0d0d0d1d 	.word	0x0d0d0d1d
 8001eb4:	0d0d0d0d 	.word	0x0d0d0d0d
 8001eb8:	4e4e      	.short	0x4e4e
 8001eba:	4e          	.byte	0x4e
 8001ebb:	00          	.byte	0x00
 8001ebc:	294e      	cmp	r1, #78	; 0x4e
 8001ebe:	d805      	bhi.n	8001ecc <MCP_ReceivedFrame+0x538>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001ec0:	2302      	movs	r3, #2
    if (bNoError)
 8001ec2:	f89d 0009 	ldrb.w	r0, [sp, #9]
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001ec6:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8001eca:	e5b4      	b.n	8001a36 <MCP_ReceivedFrame+0xa2>
 8001ecc:	f1a1 024f 	sub.w	r2, r1, #79	; 0x4f
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	4093      	lsls	r3, r2
 8001ed6:	4a3c      	ldr	r2, [pc, #240]	; (8001fc8 <MCP_ReceivedFrame+0x634>)
 8001ed8:	4213      	tst	r3, r2
 8001eda:	d132      	bne.n	8001f42 <MCP_ReceivedFrame+0x5ae>
 8001edc:	295b      	cmp	r1, #91	; 0x5b
 8001ede:	d1ef      	bne.n	8001ec0 <MCP_ReceivedFrame+0x52c>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001ee0:	78b2      	ldrb	r2, [r6, #2]
 8001ee2:	7873      	ldrb	r3, [r6, #1]
 8001ee4:	78f0      	ldrb	r0, [r6, #3]
 8001ee6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001eea:	7932      	ldrb	r2, [r6, #4]
 8001eec:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001ef0:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8001ef4:	4628      	mov	r0, r5
 8001ef6:	f000 ff25 	bl	8002d44 <UI_SetReg>
 8001efa:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001efe:	e59a      	b.n	8001a36 <MCP_ReceivedFrame+0xa2>
 8001f00:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
 8001f04:	4831      	ldr	r0, [pc, #196]	; (8001fcc <MCP_ReceivedFrame+0x638>)
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2201      	movs	r2, #1
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	4018      	ands	r0, r3
 8001f10:	b308      	cbz	r0, 8001f56 <MCP_ReceivedFrame+0x5c2>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001f12:	f10d 0209 	add.w	r2, sp, #9
 8001f16:	4628      	mov	r0, r5
 8001f18:	f001 f884 	bl	8003024 <UI_GetReg>
          if ( bNoError == true )
 8001f1c:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001f20:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f43f ad5b 	beq.w	80019de <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001f28:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001f2c:	2304      	movs	r3, #4
 8001f2e:	aa04      	add	r2, sp, #16
 8001f30:	21f0      	movs	r1, #240	; 0xf0
 8001f32:	47a0      	blx	r4
  if (RequireAck)
 8001f34:	e55a      	b.n	80019ec <MCP_ReceivedFrame+0x58>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001f36:	2301      	movs	r3, #1
    if (bNoError)
 8001f38:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001f3c:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8001f40:	e579      	b.n	8001a36 <MCP_ReceivedFrame+0xa2>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001f42:	78b2      	ldrb	r2, [r6, #2]
 8001f44:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001f46:	4628      	mov	r0, r5
 8001f48:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8001f4c:	f000 fefa 	bl	8002d44 <UI_SetReg>
 8001f50:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001f54:	e56f      	b.n	8001a36 <MCP_ReceivedFrame+0xa2>
 8001f56:	f64c 4203 	movw	r2, #52227	; 0xcc03
 8001f5a:	4213      	tst	r3, r2
 8001f5c:	f47f af67 	bne.w	8001e2e <MCP_ReceivedFrame+0x49a>
 8001f60:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <MCP_ReceivedFrame+0x63c>)
 8001f62:	4213      	tst	r3, r2
 8001f64:	f43f add8 	beq.w	8001b18 <MCP_ReceivedFrame+0x184>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001f68:	f10d 0209 	add.w	r2, sp, #9
 8001f6c:	4628      	mov	r0, r5
 8001f6e:	f001 f859 	bl	8003024 <UI_GetReg>
           if ( bNoError == true )
 8001f72:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001f76:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f43f ad30 	beq.w	80019de <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001f7e:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001f82:	2301      	movs	r3, #1
 8001f84:	aa04      	add	r2, sp, #16
 8001f86:	21f0      	movs	r1, #240	; 0xf0
 8001f88:	47a0      	blx	r4
  if (RequireAck)
 8001f8a:	e52f      	b.n	80019ec <MCP_ReceivedFrame+0x58>
 8001f8c:	4a11      	ldr	r2, [pc, #68]	; (8001fd4 <MCP_ReceivedFrame+0x640>)
 8001f8e:	4213      	tst	r3, r2
 8001f90:	d1bf      	bne.n	8001f12 <MCP_ReceivedFrame+0x57e>
 8001f92:	4a11      	ldr	r2, [pc, #68]	; (8001fd8 <MCP_ReceivedFrame+0x644>)
 8001f94:	401a      	ands	r2, r3
 8001f96:	2a00      	cmp	r2, #0
 8001f98:	d1e6      	bne.n	8001f68 <MCP_ReceivedFrame+0x5d4>
 8001f9a:	e5bd      	b.n	8001b18 <MCP_ReceivedFrame+0x184>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001f9c:	7872      	ldrb	r2, [r6, #1]
 8001f9e:	4628      	mov	r0, r5
 8001fa0:	f000 fed0 	bl	8002d44 <UI_SetReg>
 8001fa4:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001fa8:	e545      	b.n	8001a36 <MCP_ReceivedFrame+0xa2>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001faa:	7872      	ldrb	r2, [r6, #1]
 8001fac:	2100      	movs	r1, #0
 8001fae:	4628      	mov	r0, r5
 8001fb0:	f000 fec8 	bl	8002d44 <UI_SetReg>
 8001fb4:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001fb8:	e53d      	b.n	8001a36 <MCP_ReceivedFrame+0xa2>
 8001fba:	2026      	movs	r0, #38	; 0x26
 8001fbc:	2224      	movs	r2, #36	; 0x24
 8001fbe:	2322      	movs	r3, #34	; 0x22
 8001fc0:	e561      	b.n	8001a86 <MCP_ReceivedFrame+0xf2>
 8001fc2:	bf00      	nop
 8001fc4:	0f8ffe78 	.word	0x0f8ffe78
 8001fc8:	006407f1 	.word	0x006407f1
 8001fcc:	0ffe11f0 	.word	0x0ffe11f0
 8001fd0:	0001020c 	.word	0x0001020c
 8001fd4:	00200107 	.word	0x00200107
 8001fd8:	00100080 	.word	0x00100080

08001fdc <MCP_WaitNextFrame>:
{
 8001fdc:	b510      	push	{r4, lr}
 8001fde:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001fe0:	6980      	ldr	r0, [r0, #24]
 8001fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fe4:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001fe6:	2280      	movs	r2, #128	; 0x80
 8001fe8:	f884 20ac 	strb.w	r2, [r4, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8001fec:	6a23      	ldr	r3, [r4, #32]
 8001fee:	69a0      	ldr	r0, [r4, #24]
}
 8001ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001ff4:	4718      	bx	r3
 8001ff6:	bf00      	nop

08001ff8 <MCP_Init>:
{
 8001ff8:	b570      	push	{r4, r5, r6, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	4604      	mov	r4, r0
 8001ffe:	461d      	mov	r5, r3
 8002000:	9b07      	ldr	r3, [sp, #28]
  pHandle->s_fwVer = s_fwVer;
 8002002:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
  FCP_SetClient( pFCP, pHandle,
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <MCP_Init+0x34>)
  pHandle->pFCP = pFCP;
 8002008:	61a1      	str	r1, [r4, #24]
{
 800200a:	4608      	mov	r0, r1
 800200c:	4616      	mov	r6, r2
  FCP_SetClient( pFCP, pHandle,
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	4a07      	ldr	r2, [pc, #28]	; (8002030 <MCP_Init+0x38>)
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <MCP_Init+0x3c>)
 8002014:	4621      	mov	r1, r4
 8002016:	f004 fc33 	bl	8006880 <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 800201a:	9b06      	ldr	r3, [sp, #24]
 800201c:	6263      	str	r3, [r4, #36]	; 0x24
  pHandle->fFcpReceive = fFcpReceive;
 800201e:	e9c4 6507 	strd	r6, r5, [r4, #28]
  MCP_WaitNextFrame(pHandle);
 8002022:	4620      	mov	r0, r4
 8002024:	f7ff ffda 	bl	8001fdc <MCP_WaitNextFrame>
}
 8002028:	b002      	add	sp, #8
 800202a:	bd70      	pop	{r4, r5, r6, pc}
 800202c:	08002039 	.word	0x08002039
 8002030:	08002041 	.word	0x08002041
 8002034:	08001995 	.word	0x08001995

08002038 <MCP_OnTimeOut>:
{
 8002038:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 800203a:	f7ff ffcf 	bl	8001fdc <MCP_WaitNextFrame>
}
 800203e:	bd08      	pop	{r3, pc}

08002040 <MCP_SentFrame>:
{
 8002040:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8002042:	f7ff ffcb 	bl	8001fdc <MCP_WaitNextFrame>
}
 8002046:	bd08      	pop	{r3, pc}

08002048 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002048:	b530      	push	{r4, r5, lr}
 800204a:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 800204c:	f003 fa6a 	bl	8005524 <HAL_RCC_GetHCLKFreq>
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8002052:	4d0c      	ldr	r5, [pc, #48]	; (8002084 <MX_MotorControl_Init+0x3c>)
 8002054:	4c0c      	ldr	r4, [pc, #48]	; (8002088 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8002056:	fba3 3000 	umull	r3, r0, r3, r0
 800205a:	09c0      	lsrs	r0, r0, #7
 800205c:	f002 fbcc 	bl	80047f8 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8002060:	4629      	mov	r1, r5
 8002062:	4620      	mov	r0, r4
 8002064:	f7fe ffee 	bl	8001044 <MCboot>
  mc_lock_pins();
 8002068:	f7ff fbe8 	bl	800183c <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 800206c:	4b07      	ldr	r3, [pc, #28]	; (800208c <MX_MotorControl_Init+0x44>)
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	4807      	ldr	r0, [pc, #28]	; (8002090 <MX_MotorControl_Init+0x48>)
 8002072:	462b      	mov	r3, r5
 8002074:	4622      	mov	r2, r4
 8002076:	2101      	movs	r1, #1
 8002078:	f000 fdd6 	bl	8002c28 <UI_TaskInit>
}
 800207c:	b003      	add	sp, #12
 800207e:	bd30      	pop	{r4, r5, pc}
 8002080:	10624dd3 	.word	0x10624dd3
 8002084:	20000ad0 	.word	0x20000ad0
 8002088:	20000acc 	.word	0x20000acc
 800208c:	08008f88 	.word	0x08008f88
 8002090:	2000068c 	.word	0x2000068c

08002094 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002094:	497e      	ldr	r1, [pc, #504]	; (8002290 <RCM_RegisterRegConv+0x1fc>)
{
 8002096:	b570      	push	{r4, r5, r6, lr}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002098:	680c      	ldr	r4, [r1, #0]
{
 800209a:	4602      	mov	r2, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800209c:	2c00      	cmp	r4, #0
 800209e:	f000 808f 	beq.w	80021c0 <RCM_RegisterRegConv+0x12c>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80020a2:	f890 c004 	ldrb.w	ip, [r0, #4]
 80020a6:	7923      	ldrb	r3, [r4, #4]
 80020a8:	459c      	cmp	ip, r3
 80020aa:	d026      	beq.n	80020fa <RCM_RegisterRegConv+0x66>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80020ac:	684b      	ldr	r3, [r1, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80a2 	beq.w	80021f8 <RCM_RegisterRegConv+0x164>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80020b4:	791c      	ldrb	r4, [r3, #4]
 80020b6:	4564      	cmp	r4, ip
  uint8_t handle=255;
 80020b8:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80020bc:	f000 808a 	beq.w	80021d4 <RCM_RegisterRegConv+0x140>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80020c0:	688c      	ldr	r4, [r1, #8]
 80020c2:	2c00      	cmp	r4, #0
 80020c4:	f000 80bb 	beq.w	800223e <RCM_RegisterRegConv+0x1aa>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80020c8:	7923      	ldrb	r3, [r4, #4]
 80020ca:	4563      	cmp	r3, ip
 80020cc:	f000 808b 	beq.w	80021e6 <RCM_RegisterRegConv+0x152>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80020d0:	68cb      	ldr	r3, [r1, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 80bc 	beq.w	8002250 <RCM_RegisterRegConv+0x1bc>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80020d8:	791c      	ldrb	r4, [r3, #4]
 80020da:	4564      	cmp	r4, ip
 80020dc:	f000 8098 	beq.w	8002210 <RCM_RegisterRegConv+0x17c>
    while (i < RCM_MAX_CONV)
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	f360 0307 	bfi	r3, r0, #0, #8
 80020e8:	f360 230f 	bfi	r3, r0, #8, #8
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 80020ec:	2803      	cmp	r0, #3
 80020ee:	461c      	mov	r4, r3
 80020f0:	bf88      	it	hi
 80020f2:	20ff      	movhi	r0, #255	; 0xff
 80020f4:	f240 80c9 	bls.w	800228a <RCM_RegisterRegConv+0x1f6>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 80020f8:	bd70      	pop	{r4, r5, r6, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80020fa:	6803      	ldr	r3, [r0, #0]
 80020fc:	6820      	ldr	r0, [r4, #0]
 80020fe:	4283      	cmp	r3, r0
 8002100:	d1d4      	bne.n	80020ac <RCM_RegisterRegConv+0x18>
  uint8_t i=0;
 8002102:	2000      	movs	r0, #0
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002104:	4604      	mov	r4, r0
      RCM_handle_array [handle] = regConv;
 8002106:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800210a:	4d62      	ldr	r5, [pc, #392]	; (8002294 <RCM_RegisterRegConv+0x200>)
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800210c:	6899      	ldr	r1, [r3, #8]
 800210e:	2600      	movs	r6, #0
 8002110:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8002114:	07ce      	lsls	r6, r1, #31
 8002116:	d422      	bmi.n	800215e <RCM_RegisterRegConv+0xca>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	f021 0104 	bic.w	r1, r1, #4
 800211e:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002120:	2104      	movs	r1, #4
 8002122:	6019      	str	r1, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8002124:	6859      	ldr	r1, [r3, #4]
 8002126:	f021 0120 	bic.w	r1, r1, #32
 800212a:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800212c:	2120      	movs	r1, #32
 800212e:	6019      	str	r1, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8002130:	6899      	ldr	r1, [r3, #8]
 8002132:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8002136:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800213a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800213e:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002140:	6899      	ldr	r1, [r3, #8]
 8002142:	2900      	cmp	r1, #0
 8002144:	dbfc      	blt.n	8002140 <RCM_RegisterRegConv+0xac>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002146:	6819      	ldr	r1, [r3, #0]
 8002148:	07cd      	lsls	r5, r1, #31
 800214a:	d408      	bmi.n	800215e <RCM_RegisterRegConv+0xca>
  MODIFY_REG(ADCx->CR,
 800214c:	4d52      	ldr	r5, [pc, #328]	; (8002298 <RCM_RegisterRegConv+0x204>)
 800214e:	6899      	ldr	r1, [r3, #8]
 8002150:	4029      	ands	r1, r5
 8002152:	f041 0101 	orr.w	r1, r1, #1
 8002156:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002158:	6819      	ldr	r1, [r3, #0]
 800215a:	07c9      	lsls	r1, r1, #31
 800215c:	d5f7      	bpl.n	800214e <RCM_RegisterRegConv+0xba>
      RCM_NoInj_array [handle].enable = false;
 800215e:	4d4f      	ldr	r5, [pc, #316]	; (800229c <RCM_RegisterRegConv+0x208>)
 8002160:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8002164:	0049      	lsls	r1, r1, #1
      RCM_NoInj_array [handle].prev = handle;
 8002166:	eb05 0c01 	add.w	ip, r5, r1
      RCM_NoInj_array [handle].enable = false;
 800216a:	f04f 0e00 	mov.w	lr, #0
 800216e:	f805 e001 	strb.w	lr, [r5, r1]
      RCM_NoInj_array [handle].prev = handle;
 8002172:	f8ac 4004 	strh.w	r4, [ip, #4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002176:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002178:	f021 010f 	bic.w	r1, r1, #15
 800217c:	6319      	str	r1, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 800217e:	7914      	ldrb	r4, [r2, #4]
 8002180:	2c09      	cmp	r4, #9
 8002182:	d84e      	bhi.n	8002222 <RCM_RegisterRegConv+0x18e>
 8002184:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8002188:	06a1      	lsls	r1, r4, #26
 800218a:	ea41 5105 	orr.w	r1, r1, r5, lsl #20
 800218e:	2501      	movs	r5, #1
 8002190:	fa05 f404 	lsl.w	r4, r5, r4
 8002194:	4321      	orrs	r1, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002196:	0dcc      	lsrs	r4, r1, #23
 8002198:	f103 0514 	add.w	r5, r3, #20
 800219c:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 80021a0:	6893      	ldr	r3, [r2, #8]
 80021a2:	f04f 0e07 	mov.w	lr, #7
 80021a6:	f3c1 5204 	ubfx	r2, r1, #20, #5
 80021aa:	5929      	ldr	r1, [r5, r4]
 80021ac:	fa03 fc02 	lsl.w	ip, r3, r2
 80021b0:	fa0e f202 	lsl.w	r2, lr, r2
 80021b4:	ea21 0202 	bic.w	r2, r1, r2
 80021b8:	ea42 020c 	orr.w	r2, r2, ip
 80021bc:	512a      	str	r2, [r5, r4]
}
 80021be:	bd70      	pop	{r4, r5, r6, pc}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80021c0:	684b      	ldr	r3, [r1, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d04b      	beq.n	800225e <RCM_RegisterRegConv+0x1ca>
 80021c6:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 80021ca:	4620      	mov	r0, r4
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80021cc:	791c      	ldrb	r4, [r3, #4]
 80021ce:	4564      	cmp	r4, ip
 80021d0:	f47f af76 	bne.w	80020c0 <RCM_RegisterRegConv+0x2c>
 80021d4:	681c      	ldr	r4, [r3, #0]
 80021d6:	6813      	ldr	r3, [r2, #0]
 80021d8:	429c      	cmp	r4, r3
 80021da:	f47f af71 	bne.w	80020c0 <RCM_RegisterRegConv+0x2c>
      i++;
 80021de:	2001      	movs	r0, #1
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80021e0:	f240 1401 	movw	r4, #257	; 0x101
 80021e4:	e78f      	b.n	8002106 <RCM_RegisterRegConv+0x72>
 80021e6:	6824      	ldr	r4, [r4, #0]
 80021e8:	6813      	ldr	r3, [r2, #0]
 80021ea:	429c      	cmp	r4, r3
 80021ec:	f47f af70 	bne.w	80020d0 <RCM_RegisterRegConv+0x3c>
      i++;
 80021f0:	2002      	movs	r0, #2
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80021f2:	f240 2402 	movw	r4, #514	; 0x202
 80021f6:	e786      	b.n	8002106 <RCM_RegisterRegConv+0x72>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80021f8:	688c      	ldr	r4, [r1, #8]
      i++;
 80021fa:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80021fc:	2c00      	cmp	r4, #0
 80021fe:	f47f af63 	bne.w	80020c8 <RCM_RegisterRegConv+0x34>
 8002202:	68cb      	ldr	r3, [r1, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d03a      	beq.n	800227e <RCM_RegisterRegConv+0x1ea>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002208:	791d      	ldrb	r5, [r3, #4]
 800220a:	7914      	ldrb	r4, [r2, #4]
 800220c:	42a5      	cmp	r5, r4
 800220e:	d136      	bne.n	800227e <RCM_RegisterRegConv+0x1ea>
 8002210:	681c      	ldr	r4, [r3, #0]
 8002212:	6813      	ldr	r3, [r2, #0]
 8002214:	429c      	cmp	r4, r3
 8002216:	f47f af63 	bne.w	80020e0 <RCM_RegisterRegConv+0x4c>
      i++;
 800221a:	2003      	movs	r0, #3
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800221c:	f240 3403 	movw	r4, #771	; 0x303
 8002220:	e771      	b.n	8002106 <RCM_RegisterRegConv+0x72>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002222:	f06f 011d 	mvn.w	r1, #29
 8002226:	2503      	movs	r5, #3
 8002228:	fb15 1504 	smlabb	r5, r5, r4, r1
 800222c:	2101      	movs	r1, #1
 800222e:	40a1      	lsls	r1, r4
 8002230:	ea41 5105 	orr.w	r1, r1, r5, lsl #20
 8002234:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8002238:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800223c:	e7ab      	b.n	8002196 <RCM_RegisterRegConv+0x102>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800223e:	2804      	cmp	r0, #4
 8002240:	d913      	bls.n	800226a <RCM_RegisterRegConv+0x1d6>
 8002242:	68cb      	ldr	r3, [r1, #12]
 8002244:	b113      	cbz	r3, 800224c <RCM_RegisterRegConv+0x1b8>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002246:	7918      	ldrb	r0, [r3, #4]
 8002248:	4560      	cmp	r0, ip
 800224a:	d010      	beq.n	800226e <RCM_RegisterRegConv+0x1da>
 800224c:	6813      	ldr	r3, [r2, #0]
 800224e:	e7cf      	b.n	80021f0 <RCM_RegisterRegConv+0x15c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002250:	2804      	cmp	r0, #4
 8002252:	d914      	bls.n	800227e <RCM_RegisterRegConv+0x1ea>
 8002254:	6813      	ldr	r3, [r2, #0]
      i++;
 8002256:	2003      	movs	r0, #3
 8002258:	f240 3403 	movw	r4, #771	; 0x303
 800225c:	e753      	b.n	8002106 <RCM_RegisterRegConv+0x72>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800225e:	688c      	ldr	r4, [r1, #8]
 8002260:	b11c      	cbz	r4, 800226a <RCM_RegisterRegConv+0x1d6>
 8002262:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 8002266:	4618      	mov	r0, r3
 8002268:	e72e      	b.n	80020c8 <RCM_RegisterRegConv+0x34>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800226a:	4620      	mov	r0, r4
 800226c:	e7c9      	b.n	8002202 <RCM_RegisterRegConv+0x16e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	6813      	ldr	r3, [r2, #0]
 8002272:	4298      	cmp	r0, r3
 8002274:	d0d1      	beq.n	800221a <RCM_RegisterRegConv+0x186>
 8002276:	f240 2402 	movw	r4, #514	; 0x202
      i++;
 800227a:	2002      	movs	r0, #2
 800227c:	e743      	b.n	8002106 <RCM_RegisterRegConv+0x72>
    while (i < RCM_MAX_CONV)
 800227e:	f04f 0400 	mov.w	r4, #0
 8002282:	f360 0407 	bfi	r4, r0, #0, #8
 8002286:	f360 240f 	bfi	r4, r0, #8, #8
 800228a:	6813      	ldr	r3, [r2, #0]
    if (handle < RCM_MAX_CONV )
 800228c:	e73b      	b.n	8002106 <RCM_RegisterRegConv+0x72>
 800228e:	bf00      	nop
 8002290:	20000b14 	.word	0x20000b14
 8002294:	20000ad4 	.word	0x20000ad4
 8002298:	7fffffc0 	.word	0x7fffffc0
 800229c:	20000af4 	.word	0x20000af4

080022a0 <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 80022a0:	4b5e      	ldr	r3, [pc, #376]	; (800241c <RCM_ExecRegularConv+0x17c>)
 80022a2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 80022a6:	b510      	push	{r4, lr}
  if (RCM_NoInj_array [handle].enable == false)
 80022a8:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80022ac:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 80022b0:	2a00      	cmp	r2, #0
 80022b2:	d13c      	bne.n	800232e <RCM_ExecRegularConv+0x8e>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 80022b4:	7819      	ldrb	r1, [r3, #0]
 80022b6:	b9a9      	cbnz	r1, 80022e4 <RCM_ExecRegularConv+0x44>
  uint8_t LastEnable = RCM_MAX_CONV;
 80022b8:	2204      	movs	r2, #4
      if (RCM_NoInj_array [i].enable == true)
 80022ba:	7999      	ldrb	r1, [r3, #6]
 80022bc:	2900      	cmp	r1, #0
 80022be:	d07f      	beq.n	80023c0 <RCM_ExecRegularConv+0x120>
      {
        if (RCM_NoInj_array [i].next > handle)
 80022c0:	7ad9      	ldrb	r1, [r3, #11]
 80022c2:	4288      	cmp	r0, r1
 80022c4:	f0c0 809b 	bcc.w	80023fe <RCM_ExecRegularConv+0x15e>
      if (RCM_NoInj_array [i].enable == true)
 80022c8:	7b1a      	ldrb	r2, [r3, #12]
 80022ca:	2a00      	cmp	r2, #0
 80022cc:	f000 809a 	beq.w	8002404 <RCM_ExecRegularConv+0x164>
        if (RCM_NoInj_array [i].next > handle)
 80022d0:	7c59      	ldrb	r1, [r3, #17]
 80022d2:	4288      	cmp	r0, r1
 80022d4:	f0c0 80a0 	bcc.w	8002418 <RCM_ExecRegularConv+0x178>
      if (RCM_NoInj_array [i].enable == true)
 80022d8:	7c9a      	ldrb	r2, [r3, #18]
 80022da:	2a00      	cmp	r2, #0
 80022dc:	f040 8096 	bne.w	800240c <RCM_ExecRegularConv+0x16c>
        }
      }
      else
      { /* nothing to do */
      }
      i++;
 80022e0:	2202      	movs	r2, #2
 80022e2:	e074      	b.n	80023ce <RCM_ExecRegularConv+0x12e>
        if (RCM_NoInj_array [i].next > handle)
 80022e4:	7959      	ldrb	r1, [r3, #5]
 80022e6:	4281      	cmp	r1, r0
 80022e8:	d9e7      	bls.n	80022ba <RCM_ExecRegularConv+0x1a>
      if (RCM_NoInj_array [i].enable == true)
 80022ea:	4696      	mov	lr, r2
          RCM_NoInj_array [handle].next = formerNext;
 80022ec:	eb0c 0400 	add.w	r4, ip, r0
 80022f0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
          RCM_NoInj_array [i].next = handle;
 80022f4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
          RCM_NoInj_array [handle].prev = i;
 80022f8:	7122      	strb	r2, [r4, #4]
          RCM_NoInj_array [handle].next = formerNext;
 80022fa:	7161      	strb	r1, [r4, #5]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80022fc:	4c48      	ldr	r4, [pc, #288]	; (8002420 <RCM_ExecRegularConv+0x180>)
          RCM_NoInj_array [formerNext].prev = handle;
 80022fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array [i].next = handle;
 8002302:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 8002306:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 800230a:	7822      	ldrb	r2, [r4, #0]
          RCM_NoInj_array [i].next = handle;
 800230c:	f88e 0005 	strb.w	r0, [lr, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 8002310:	7108      	strb	r0, [r1, #4]
    RCM_NoInj_array [handle].enable = true;
 8002312:	eb0c 0100 	add.w	r1, ip, r0
 8002316:	f04f 0e01 	mov.w	lr, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 800231a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array [handle].enable = true;
 800231e:	f823 e011 	strh.w	lr, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8002322:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8002326:	7852      	ldrb	r2, [r2, #1]
 8002328:	4572      	cmp	r2, lr
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 800232a:	bf18      	it	ne
 800232c:	7020      	strbne	r0, [r4, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 800232e:	4a3d      	ldr	r2, [pc, #244]	; (8002424 <RCM_ExecRegularConv+0x184>)
 8002330:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 8002334:	2a00      	cmp	r2, #0
 8002336:	d133      	bne.n	80023a0 <RCM_ExecRegularConv+0x100>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002338:	4a3b      	ldr	r2, [pc, #236]	; (8002428 <RCM_ExecRegularConv+0x188>)
 800233a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800233e:	7914      	ldrb	r4, [r2, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002340:	6811      	ldr	r1, [r2, #0]
 8002342:	2c09      	cmp	r4, #9
 8002344:	d931      	bls.n	80023aa <RCM_ExecRegularConv+0x10a>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002346:	f06f 021d 	mvn.w	r2, #29
 800234a:	f04f 0e03 	mov.w	lr, #3
 800234e:	fb1e 2e04 	smlabb	lr, lr, r4, r2
 8002352:	2201      	movs	r2, #1
 8002354:	40a2      	lsls	r2, r4
 8002356:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 800235a:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800235e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8002362:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8002364:	0d12      	lsrs	r2, r2, #20
 8002366:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 800236a:	f424 64f8 	bic.w	r4, r4, #1984	; 0x7c0
 800236e:	4322      	orrs	r2, r4
 8002370:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002372:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8002374:	688a      	ldr	r2, [r1, #8]
 8002376:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800237a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800237e:	f042 0204 	orr.w	r2, r2, #4
 8002382:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8002384:	680a      	ldr	r2, [r1, #0]
 8002386:	0752      	lsls	r2, r2, #29
 8002388:	d5fc      	bpl.n	8002384 <RCM_ExecRegularConv+0xe4>
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 800238a:	eb0c 0200 	add.w	r2, ip, r0
 800238e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002392:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002394:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8002396:	4922      	ldr	r1, [pc, #136]	; (8002420 <RCM_ExecRegularConv+0x180>)
 8002398:	7954      	ldrb	r4, [r2, #5]
 800239a:	700c      	strb	r4, [r1, #0]
    RCM_NoInj_array [handle].status = valid;
 800239c:	2102      	movs	r1, #2
 800239e:	7051      	strb	r1, [r2, #1]
  }
  retVal = RCM_NoInj_array [handle].value;
 80023a0:	4484      	add	ip, r0
 80023a2:	eb03 034c 	add.w	r3, r3, ip, lsl #1
return retVal;
}
 80023a6:	8858      	ldrh	r0, [r3, #2]
 80023a8:	bd10      	pop	{r4, pc}
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80023aa:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 80023ae:	06a2      	lsls	r2, r4, #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80023b0:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80023b4:	f04f 0e01 	mov.w	lr, #1
 80023b8:	fa0e f404 	lsl.w	r4, lr, r4
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80023bc:	4322      	orrs	r2, r4
 80023be:	e7d0      	b.n	8002362 <RCM_ExecRegularConv+0xc2>
      if (RCM_NoInj_array [i].enable == true)
 80023c0:	7b19      	ldrb	r1, [r3, #12]
 80023c2:	2900      	cmp	r1, #0
 80023c4:	d184      	bne.n	80022d0 <RCM_ExecRegularConv+0x30>
 80023c6:	7c99      	ldrb	r1, [r3, #18]
 80023c8:	bb01      	cbnz	r1, 800240c <RCM_ExecRegularConv+0x16c>
       if (LastEnable != RCM_MAX_CONV )
 80023ca:	2a04      	cmp	r2, #4
 80023cc:	d013      	beq.n	80023f6 <RCM_ExecRegularConv+0x156>
         formerNext = RCM_NoInj_array [LastEnable].next;
 80023ce:	eb02 0142 	add.w	r1, r2, r2, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 80023d2:	eb0c 0400 	add.w	r4, ip, r0
 80023d6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
         formerNext = RCM_NoInj_array [LastEnable].next;
 80023da:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array [handle].prev = LastEnable;
 80023de:	7122      	strb	r2, [r4, #4]
         formerNext = RCM_NoInj_array [LastEnable].next;
 80023e0:	794a      	ldrb	r2, [r1, #5]
         RCM_NoInj_array [handle].next = formerNext;
 80023e2:	7162      	strb	r2, [r4, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 80023e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80023e8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80023ec:	4c0c      	ldr	r4, [pc, #48]	; (8002420 <RCM_ExecRegularConv+0x180>)
         RCM_NoInj_array [formerNext].prev = handle;
 80023ee:	7110      	strb	r0, [r2, #4]
         RCM_NoInj_array [LastEnable].next = handle;
 80023f0:	7148      	strb	r0, [r1, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80023f2:	7822      	ldrb	r2, [r4, #0]
 80023f4:	e78d      	b.n	8002312 <RCM_ExecRegularConv+0x72>
         RCM_currentHandle = handle;
 80023f6:	4c0a      	ldr	r4, [pc, #40]	; (8002420 <RCM_ExecRegularConv+0x180>)
 80023f8:	4602      	mov	r2, r0
 80023fa:	7020      	strb	r0, [r4, #0]
    while (i < RCM_MAX_CONV)
 80023fc:	e789      	b.n	8002312 <RCM_ExecRegularConv+0x72>
      i++;
 80023fe:	2201      	movs	r2, #1
      if (RCM_NoInj_array [i].enable == true)
 8002400:	4696      	mov	lr, r2
 8002402:	e773      	b.n	80022ec <RCM_ExecRegularConv+0x4c>
 8002404:	7c9a      	ldrb	r2, [r3, #18]
 8002406:	b90a      	cbnz	r2, 800240c <RCM_ExecRegularConv+0x16c>
      i++;
 8002408:	2201      	movs	r2, #1
 800240a:	e7e0      	b.n	80023ce <RCM_ExecRegularConv+0x12e>
        if (RCM_NoInj_array [i].next > handle)
 800240c:	7dd9      	ldrb	r1, [r3, #23]
 800240e:	4281      	cmp	r1, r0
      i++;
 8002410:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array [i].next > handle)
 8002414:	d9db      	bls.n	80023ce <RCM_ExecRegularConv+0x12e>
 8002416:	e768      	b.n	80022ea <RCM_ExecRegularConv+0x4a>
      i++;
 8002418:	2202      	movs	r2, #2
 800241a:	e766      	b.n	80022ea <RCM_ExecRegularConv+0x4a>
 800241c:	20000af4 	.word	0x20000af4
 8002420:	20000b10 	.word	0x20000b10
 8002424:	2000024c 	.word	0x2000024c
 8002428:	20000b14 	.word	0x20000b14

0800242c <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 800242c:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 800242e:	4c12      	ldr	r4, [pc, #72]	; (8002478 <RCM_ExecUserConv+0x4c>)
 8002430:	7823      	ldrb	r3, [r4, #0]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d000      	beq.n	8002438 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8002436:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002438:	4d10      	ldr	r5, [pc, #64]	; (800247c <RCM_ExecUserConv+0x50>)
 800243a:	7828      	ldrb	r0, [r5, #0]
 800243c:	f7ff ff30 	bl	80022a0 <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8002440:	782b      	ldrb	r3, [r5, #0]
 8002442:	4a0f      	ldr	r2, [pc, #60]	; (8002480 <RCM_ExecUserConv+0x54>)
 8002444:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002448:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800244c:	490d      	ldr	r1, [pc, #52]	; (8002484 <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 800244e:	7852      	ldrb	r2, [r2, #1]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002450:	8008      	strh	r0, [r1, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8002452:	b10a      	cbz	r2, 8002458 <RCM_ExecUserConv+0x2c>
      RCM_UserConvState = RCM_USERCONV_EOC;
 8002454:	2202      	movs	r2, #2
 8002456:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002458:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <RCM_ExecUserConv+0x5c>)
 800245a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800245e:	2d00      	cmp	r5, #0
 8002460:	d0e9      	beq.n	8002436 <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002462:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002466:	4601      	mov	r1, r0
 8002468:	4618      	mov	r0, r3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 800246a:	2300      	movs	r3, #0
 800246c:	7023      	strb	r3, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800246e:	6852      	ldr	r2, [r2, #4]
 8002470:	462b      	mov	r3, r5
}
 8002472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002476:	4718      	bx	r3
 8002478:	20000b0d 	.word	0x20000b0d
 800247c:	20000b0c 	.word	0x20000b0c
 8002480:	20000af4 	.word	0x20000af4
 8002484:	20000b0e 	.word	0x20000b0e
 8002488:	20000ad4 	.word	0x20000ad4

0800248c <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 800248c:	4a26      	ldr	r2, [pc, #152]	; (8002528 <RCM_ExecNextConv+0x9c>)
 800248e:	4927      	ldr	r1, [pc, #156]	; (800252c <RCM_ExecNextConv+0xa0>)
 8002490:	7813      	ldrb	r3, [r2, #0]
 8002492:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8002496:	f811 0010 	ldrb.w	r0, [r1, r0, lsl #1]
 800249a:	2800      	cmp	r0, #0
 800249c:	d038      	beq.n	8002510 <RCM_ExecNextConv+0x84>
{
 800249e:	b410      	push	{r4}
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 80024a0:	4c23      	ldr	r4, [pc, #140]	; (8002530 <RCM_ExecNextConv+0xa4>)
 80024a2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80024a6:	681b      	ldr	r3, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80024a8:	2004      	movs	r0, #4
 80024aa:	6018      	str	r0, [r3, #0]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80024ac:	7810      	ldrb	r0, [r2, #0]
 80024ae:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80024b2:	f893 c004 	ldrb.w	ip, [r3, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	f1bc 0f09 	cmp.w	ip, #9
 80024bc:	d929      	bls.n	8002512 <RCM_ExecNextConv+0x86>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80024be:	f06f 031d 	mvn.w	r3, #29
 80024c2:	2403      	movs	r4, #3
 80024c4:	fb14 340c 	smlabb	r4, r4, ip, r3
 80024c8:	2301      	movs	r3, #1
 80024ca:	fa03 f30c 	lsl.w	r3, r3, ip
 80024ce:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 80024d2:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80024d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 80024da:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80024dc:	0d1b      	lsrs	r3, r3, #20
 80024de:	f424 6cf8 	bic.w	ip, r4, #1984	; 0x7c0
 80024e2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80024e6:	ea43 030c 	orr.w	r3, r3, ip
 80024ea:	6313      	str	r3, [r2, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80024ec:	6c13      	ldr	r3, [r2, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80024ee:	6893      	ldr	r3, [r2, #8]

    LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 80024f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80024f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024f8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80024fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	2001      	movs	r0, #1
 8002506:	6093      	str	r3, [r2, #8]
 8002508:	7048      	strb	r0, [r1, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 800250a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8002512:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8002516:	ea4f 638c 	mov.w	r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 800251a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 800251e:	2401      	movs	r4, #1
 8002520:	fa04 f40c 	lsl.w	r4, r4, ip
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8002524:	4323      	orrs	r3, r4
 8002526:	e7d8      	b.n	80024da <RCM_ExecNextConv+0x4e>
 8002528:	20000b10 	.word	0x20000b10
 800252c:	20000af4 	.word	0x20000af4
 8002530:	20000b14 	.word	0x20000b14

08002534 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 8002534:	b470      	push	{r4, r5, r6}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 8002536:	4c10      	ldr	r4, [pc, #64]	; (8002578 <RCM_ReadOngoingConv+0x44>)
 8002538:	4a10      	ldr	r2, [pc, #64]	; (800257c <RCM_ReadOngoingConv+0x48>)
 800253a:	7823      	ldrb	r3, [r4, #0]
 800253c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002540:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8002544:	0058      	lsls	r0, r3, #1
 8002546:	f891 c001 	ldrb.w	ip, [r1, #1]
 800254a:	f1bc 0f01 	cmp.w	ip, #1
 800254e:	d006      	beq.n	800255e <RCM_ReadOngoingConv+0x2a>
    RCM_NoInj_array [RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8002550:	4403      	add	r3, r0
 8002552:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002556:	7953      	ldrb	r3, [r2, #5]
 8002558:	7023      	strb	r3, [r4, #0]
}
 800255a:	bc70      	pop	{r4, r5, r6}
 800255c:	4770      	bx	lr
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 800255e:	4d08      	ldr	r5, [pc, #32]	; (8002580 <RCM_ReadOngoingConv+0x4c>)
 8002560:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8002564:	682d      	ldr	r5, [r5, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8002566:	682e      	ldr	r6, [r5, #0]
 8002568:	0776      	lsls	r6, r6, #29
 800256a:	d5f1      	bpl.n	8002550 <RCM_ReadOngoingConv+0x1c>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800256c:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 800256e:	804d      	strh	r5, [r1, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 8002570:	2502      	movs	r5, #2
 8002572:	704d      	strb	r5, [r1, #1]
 8002574:	e7ec      	b.n	8002550 <RCM_ReadOngoingConv+0x1c>
 8002576:	bf00      	nop
 8002578:	20000b10 	.word	0x20000b10
 800257c:	20000af4 	.word	0x20000af4
 8002580:	20000b14 	.word	0x20000b14

08002584 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_MspInit+0x30>)
 8002586:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	661a      	str	r2, [r3, #96]	; 0x60
 800258e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8002590:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002592:	f002 0201 	and.w	r2, r2, #1
 8002596:	9200      	str	r2, [sp, #0]
 8002598:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800259a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800259c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025a0:	659a      	str	r2, [r3, #88]	; 0x58
 80025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a8:	9301      	str	r3, [sp, #4]
 80025aa:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80025ac:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ae:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80025b0:	f002 b8c4 	b.w	800473c <HAL_NVIC_SetPriorityGrouping>
 80025b4:	40021000 	.word	0x40021000

080025b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025b8:	b510      	push	{r4, lr}
 80025ba:	4604      	mov	r4, r0
 80025bc:	b09c      	sub	sp, #112	; 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025be:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025c0:	2244      	movs	r2, #68	; 0x44
 80025c2:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80025c8:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80025cc:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025ce:	f006 fc0b 	bl	8008de8 <memset>
  if(hadc->Instance==ADC1)
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025d8:	d004      	beq.n	80025e4 <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80025da:	4a43      	ldr	r2, [pc, #268]	; (80026e8 <HAL_ADC_MspInit+0x130>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d046      	beq.n	800266e <HAL_ADC_MspInit+0xb6>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80025e0:	b01c      	add	sp, #112	; 0x70
 80025e2:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80025e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80025e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025ec:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80025ee:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80025f0:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025f2:	f002 ffc1 	bl	8005578 <HAL_RCCEx_PeriphCLKConfig>
 80025f6:	2800      	cmp	r0, #0
 80025f8:	d16a      	bne.n	80026d0 <HAL_ADC_MspInit+0x118>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80025fa:	4a3c      	ldr	r2, [pc, #240]	; (80026ec <HAL_ADC_MspInit+0x134>)
 80025fc:	6813      	ldr	r3, [r2, #0]
 80025fe:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002600:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002602:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002604:	d109      	bne.n	800261a <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002606:	4b3a      	ldr	r3, [pc, #232]	; (80026f0 <HAL_ADC_MspInit+0x138>)
 8002608:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800260a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800260e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002616:	9301      	str	r3, [sp, #4]
 8002618:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261a:	4b35      	ldr	r3, [pc, #212]	; (80026f0 <HAL_ADC_MspInit+0x138>)
 800261c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	64da      	str	r2, [r3, #76]	; 0x4c
 8002624:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002626:	f002 0201 	and.w	r2, r2, #1
 800262a:	9202      	str	r2, [sp, #8]
 800262c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002630:	f042 0202 	orr.w	r2, r2, #2
 8002634:	64da      	str	r2, [r3, #76]	; 0x4c
 8002636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002640:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8002642:	2205      	movs	r2, #5
 8002644:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 800264a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002650:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002652:	f002 f9f3 	bl	8004a3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8002656:	f244 0202 	movw	r2, #16386	; 0x4002
 800265a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265c:	4825      	ldr	r0, [pc, #148]	; (80026f4 <HAL_ADC_MspInit+0x13c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002660:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8002662:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002666:	f002 f9e9 	bl	8004a3c <HAL_GPIO_Init>
}
 800266a:	b01c      	add	sp, #112	; 0x70
 800266c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800266e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8002672:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002676:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002678:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800267a:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800267c:	f002 ff7c 	bl	8005578 <HAL_RCCEx_PeriphCLKConfig>
 8002680:	bb48      	cbnz	r0, 80026d6 <HAL_ADC_MspInit+0x11e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002682:	4a1a      	ldr	r2, [pc, #104]	; (80026ec <HAL_ADC_MspInit+0x134>)
 8002684:	6813      	ldr	r3, [r2, #0]
 8002686:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002688:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800268a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800268c:	d109      	bne.n	80026a2 <HAL_ADC_MspInit+0xea>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800268e:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <HAL_ADC_MspInit+0x138>)
 8002690:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002692:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002696:	64da      	str	r2, [r3, #76]	; 0x4c
 8002698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800269e:	9304      	str	r3, [sp, #16]
 80026a0:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <HAL_ADC_MspInit+0x138>)
 80026a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80026ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 80026ae:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80026e0 <HAL_ADC_MspInit+0x128>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80026b8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80026bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 80026c0:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c4:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80026c8:	f002 f9b8 	bl	8004a3c <HAL_GPIO_Init>
}
 80026cc:	b01c      	add	sp, #112	; 0x70
 80026ce:	bd10      	pop	{r4, pc}
      Error_Handler();
 80026d0:	f7fe fa90 	bl	8000bf4 <Error_Handler>
 80026d4:	e791      	b.n	80025fa <HAL_ADC_MspInit+0x42>
      Error_Handler();
 80026d6:	f7fe fa8d 	bl	8000bf4 <Error_Handler>
 80026da:	e7d2      	b.n	8002682 <HAL_ADC_MspInit+0xca>
 80026dc:	f3af 8000 	nop.w
 80026e0:	00000040 	.word	0x00000040
 80026e4:	00000003 	.word	0x00000003
 80026e8:	50000100 	.word	0x50000100
 80026ec:	20000b24 	.word	0x20000b24
 80026f0:	40021000 	.word	0x40021000
 80026f4:	48000400 	.word	0x48000400

080026f8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80026f8:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 80026fa:	6802      	ldr	r2, [r0, #0]
 80026fc:	4934      	ldr	r1, [pc, #208]	; (80027d0 <HAL_COMP_MspInit+0xd8>)
{
 80026fe:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002700:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 8002702:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002708:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800270c:	9308      	str	r3, [sp, #32]
  if(hcomp->Instance==COMP1)
 800270e:	d008      	beq.n	8002722 <HAL_COMP_MspInit+0x2a>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 8002710:	4b30      	ldr	r3, [pc, #192]	; (80027d4 <HAL_COMP_MspInit+0xdc>)
 8002712:	429a      	cmp	r2, r3
 8002714:	d01e      	beq.n	8002754 <HAL_COMP_MspInit+0x5c>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 8002716:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <HAL_COMP_MspInit+0xe0>)
 8002718:	429a      	cmp	r2, r3
 800271a:	d034      	beq.n	8002786 <HAL_COMP_MspInit+0x8e>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 800271c:	b00b      	add	sp, #44	; 0x2c
 800271e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002726:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 800272a:	ed9f 7b23 	vldr	d7, [pc, #140]	; 80027b8 <HAL_COMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002730:	f042 0201 	orr.w	r2, r2, #1
 8002734:	64da      	str	r2, [r3, #76]	; 0x4c
 8002736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800273e:	a904      	add	r1, sp, #16
 8002740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8002744:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002748:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800274a:	f002 f977 	bl	8004a3c <HAL_GPIO_Init>
}
 800274e:	b00b      	add	sp, #44	; 0x2c
 8002750:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002754:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8002758:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800275c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	64da      	str	r2, [r3, #76]	; 0x4c
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8002766:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80027c0 <HAL_COMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8002770:	a904      	add	r1, sp, #16
 8002772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8002776:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277a:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 800277c:	f002 f95e 	bl	8004a3c <HAL_GPIO_Init>
}
 8002780:	b00b      	add	sp, #44	; 0x2c
 8002782:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 800278a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800278e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8002790:	4812      	ldr	r0, [pc, #72]	; (80027dc <HAL_COMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002792:	f042 0202 	orr.w	r2, r2, #2
 8002796:	64da      	str	r2, [r3, #76]	; 0x4c
 8002798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 800279a:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 80027c8 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 80027a4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 80027a6:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027aa:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 80027ac:	f002 f946 	bl	8004a3c <HAL_GPIO_Init>
}
 80027b0:	b00b      	add	sp, #44	; 0x2c
 80027b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80027b6:	bf00      	nop
 80027b8:	00000002 	.word	0x00000002
 80027bc:	00000003 	.word	0x00000003
 80027c0:	00000080 	.word	0x00000080
 80027c4:	00000003 	.word	0x00000003
 80027c8:	00000001 	.word	0x00000001
 80027cc:	00000003 	.word	0x00000003
 80027d0:	40010200 	.word	0x40010200
 80027d4:	40010204 	.word	0x40010204
 80027d8:	4001020c 	.word	0x4001020c
 80027dc:	48000400 	.word	0x48000400

080027e0 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 80027e0:	4b0a      	ldr	r3, [pc, #40]	; (800280c <HAL_CORDIC_MspInit+0x2c>)
 80027e2:	6802      	ldr	r2, [r0, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d000      	beq.n	80027ea <HAL_CORDIC_MspInit+0xa>
 80027e8:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80027ea:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 80027ee:	f042 0208 	orr.w	r2, r2, #8
 80027f2:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 80027f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 80027fa:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80027fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8002806:	b002      	add	sp, #8
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40020c00 	.word	0x40020c00

08002810 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC3)
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_DAC_MspInit+0x2c>)
 8002812:	6802      	ldr	r2, [r0, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d000      	beq.n	800281a <HAL_DAC_MspInit+0xa>
 8002818:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 800281a:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800281e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
{
 8002822:	b082      	sub	sp, #8
    __HAL_RCC_DAC3_CLK_ENABLE();
 8002824:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002826:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800282a:	64da      	str	r2, [r3, #76]	; 0x4c
 800282c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002832:	9301      	str	r3, [sp, #4]
 8002834:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8002836:	b002      	add	sp, #8
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	50001000 	.word	0x50001000

08002840 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002840:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 8002842:	6802      	ldr	r2, [r0, #0]
 8002844:	4934      	ldr	r1, [pc, #208]	; (8002918 <HAL_OPAMP_MspInit+0xd8>)
{
 8002846:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 800284a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002850:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002854:	9308      	str	r3, [sp, #32]
  if(hopamp->Instance==OPAMP1)
 8002856:	d008      	beq.n	800286a <HAL_OPAMP_MspInit+0x2a>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 8002858:	4b30      	ldr	r3, [pc, #192]	; (800291c <HAL_OPAMP_MspInit+0xdc>)
 800285a:	429a      	cmp	r2, r3
 800285c:	d01e      	beq.n	800289c <HAL_OPAMP_MspInit+0x5c>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 800285e:	4b30      	ldr	r3, [pc, #192]	; (8002920 <HAL_OPAMP_MspInit+0xe0>)
 8002860:	429a      	cmp	r2, r3
 8002862:	d033      	beq.n	80028cc <HAL_OPAMP_MspInit+0x8c>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8002864:	b00b      	add	sp, #44	; 0x2c
 8002866:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800286e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8002872:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8002900 <HAL_OPAMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002878:	f042 0201 	orr.w	r2, r2, #1
 800287c:	64da      	str	r2, [r3, #76]	; 0x4c
 800287e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002886:	a904      	add	r1, sp, #16
 8002888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 800288c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002890:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002892:	f002 f8d3 	bl	8004a3c <HAL_GPIO_Init>
}
 8002896:	b00b      	add	sp, #44	; 0x2c
 8002898:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289c:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80028a0:	33fc      	adds	r3, #252	; 0xfc
 80028a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028a4:	f042 0201 	orr.w	r2, r2, #1
 80028a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80028aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 80028ac:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8002908 <HAL_OPAMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b6:	a904      	add	r1, sp, #16
 80028b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 80028bc:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c0:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c2:	f002 f8bb 	bl	8004a3c <HAL_GPIO_Init>
}
 80028c6:	b00b      	add	sp, #44	; 0x2c
 80028c8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028cc:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80028d0:	33f8      	adds	r3, #248	; 0xf8
 80028d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d4:	4813      	ldr	r0, [pc, #76]	; (8002924 <HAL_OPAMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d6:	f042 0202 	orr.w	r2, r2, #2
 80028da:	64da      	str	r2, [r3, #76]	; 0x4c
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 80028de:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8002910 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 80028ea:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ee:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f0:	f002 f8a4 	bl	8004a3c <HAL_GPIO_Init>
}
 80028f4:	b00b      	add	sp, #44	; 0x2c
 80028f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80028fa:	bf00      	nop
 80028fc:	f3af 8000 	nop.w
 8002900:	0000000e 	.word	0x0000000e
 8002904:	00000003 	.word	0x00000003
 8002908:	000000e0 	.word	0x000000e0
 800290c:	00000003 	.word	0x00000003
 8002910:	00000007 	.word	0x00000007
 8002914:	00000003 	.word	0x00000003
 8002918:	40010300 	.word	0x40010300
 800291c:	40010304 	.word	0x40010304
 8002920:	40010308 	.word	0x40010308
 8002924:	48000400 	.word	0x48000400

08002928 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_TIM_Base_MspInit+0x28>)
 800292a:	6802      	ldr	r2, [r0, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d000      	beq.n	8002932 <HAL_TIM_Base_MspInit+0xa>
 8002930:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002932:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
{
 8002936:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002938:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800293a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800293e:	661a      	str	r2, [r3, #96]	; 0x60
 8002940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800294a:	b002      	add	sp, #8
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40012c00 	.word	0x40012c00

08002954 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002954:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8002956:	4a2a      	ldr	r2, [pc, #168]	; (8002a00 <HAL_TIM_MspPostInit+0xac>)
 8002958:	6801      	ldr	r1, [r0, #0]
{
 800295a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800295e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002964:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002968:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 800296a:	d001      	beq.n	8002970 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800296c:	b00a      	add	sp, #40	; 0x28
 800296e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002970:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002974:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002978:	2604      	movs	r6, #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800297a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 800297c:	4821      	ldr	r0, [pc, #132]	; (8002a04 <HAL_TIM_MspPostInit+0xb0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800297e:	4332      	orrs	r2, r6
 8002980:	64da      	str	r2, [r3, #76]	; 0x4c
 8002982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002984:	4032      	ands	r2, r6
 8002986:	9201      	str	r2, [sp, #4]
 8002988:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800298a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800298c:	f042 0202 	orr.w	r2, r2, #2
 8002990:	64da      	str	r2, [r3, #76]	; 0x4c
 8002992:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002994:	f002 0202 	and.w	r2, r2, #2
 8002998:	9202      	str	r2, [sp, #8]
 800299a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80029a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80029a6:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80029ae:	2402      	movs	r4, #2
 80029b0:	2502      	movs	r5, #2
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80029b2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80029b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029b8:	2302      	movs	r3, #2
 80029ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80029be:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c2:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80029c4:	f002 f83a 	bl	8004a3c <HAL_GPIO_Init>
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 80029c8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 80029ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80029ce:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 80029d0:	480d      	ldr	r0, [pc, #52]	; (8002a08 <HAL_TIM_MspPostInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80029d2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 80029d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80029d8:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 80029dc:	f002 f82e 	bl	8004a3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 80029e0:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80029e4:	2302      	movs	r3, #2
 80029e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ea:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80029ec:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 80029f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80029f6:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f8:	f002 f820 	bl	8004a3c <HAL_GPIO_Init>
}
 80029fc:	b00a      	add	sp, #40	; 0x28
 80029fe:	bd70      	pop	{r4, r5, r6, pc}
 8002a00:	40012c00 	.word	0x40012c00
 8002a04:	48000800 	.word	0x48000800
 8002a08:	48000400 	.word	0x48000400
 8002a0c:	00000000 	.word	0x00000000

08002a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a10:	b510      	push	{r4, lr}
 8002a12:	4604      	mov	r4, r0
 8002a14:	b098      	sub	sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a16:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a18:	2244      	movs	r2, #68	; 0x44
 8002a1a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002a20:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8002a24:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a26:	f006 f9df 	bl	8008de8 <memset>
  if(huart->Instance==USART2)
 8002a2a:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <HAL_UART_MspInit+0x90>)
 8002a2c:	6822      	ldr	r2, [r4, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d001      	beq.n	8002a36 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a32:	b018      	add	sp, #96	; 0x60
 8002a34:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a36:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a38:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a3a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a3c:	f002 fd9c 	bl	8005578 <HAL_RCCEx_PeriphCLKConfig>
 8002a40:	bb10      	cbnz	r0, 8002a88 <HAL_UART_MspInit+0x78>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a42:	4b18      	ldr	r3, [pc, #96]	; (8002aa4 <HAL_UART_MspInit+0x94>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a44:	4818      	ldr	r0, [pc, #96]	; (8002aa8 <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a48:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002a4c:	659a      	str	r2, [r3, #88]	; 0x58
 8002a4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a50:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002a54:	9200      	str	r2, [sp, #0]
 8002a56:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002a5a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8002a90 <HAL_UART_MspInit+0x80>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5e:	f042 0202 	orr.w	r2, r2, #2
 8002a62:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002a66:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002a6a:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8002a98 <HAL_UART_MspInit+0x88>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a74:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a76:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002a78:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7c:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a7e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a80:	f001 ffdc 	bl	8004a3c <HAL_GPIO_Init>
}
 8002a84:	b018      	add	sp, #96	; 0x60
 8002a86:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002a88:	f7fe f8b4 	bl	8000bf4 <Error_Handler>
 8002a8c:	e7d9      	b.n	8002a42 <HAL_UART_MspInit+0x32>
 8002a8e:	bf00      	nop
 8002a90:	00000018 	.word	0x00000018
 8002a94:	00000002 	.word	0x00000002
	...
 8002aa0:	40004400 	.word	0x40004400
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	48000400 	.word	0x48000400

08002aac <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8002aac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ab0:	2240      	movs	r2, #64	; 0x40
 8002ab2:	601a      	str	r2, [r3, #0]

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  // Highfrequency task
  TSK_HighFrequencyTask();
 8002ab4:	f7fe bd84 	b.w	80015c0 <TSK_HighFrequencyTask>

08002ab8 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002ab8:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8002aba:	4804      	ldr	r0, [pc, #16]	; (8002acc <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002abc:	f06f 0201 	mvn.w	r2, #1
 8002ac0:	611a      	str	r2, [r3, #16]
 8002ac2:	f004 bf19 	b.w	80078f8 <R3_2_TIMx_UP_IRQHandler>
 8002ac6:	bf00      	nop
 8002ac8:	40012c00 	.word	0x40012c00
 8002acc:	2000024c 	.word	0x2000024c

08002ad0 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8002ad0:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002ad2:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	0611      	lsls	r1, r2, #24
 8002ad8:	d505      	bpl.n	8002ae6 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002ada:	f06f 0280 	mvn.w	r2, #128	; 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 8002ade:	480a      	ldr	r0, [pc, #40]	; (8002b08 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002ae0:	611a      	str	r2, [r3, #16]
 8002ae2:	f004 ff65 	bl	80079b0 <R3_2_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8002ae6:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	05d2      	lsls	r2, r2, #23
 8002aec:	d505      	bpl.n	8002afa <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8002aee:	f46f 7280 	mvn.w	r2, #256	; 0x100
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 8002af2:	4805      	ldr	r0, [pc, #20]	; (8002b08 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002af4:	611a      	str	r2, [r3, #16]
 8002af6:	f004 ff3b 	bl	8007970 <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8002afa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8002afe:	f7fe bd33 	b.w	8001568 <MC_Scheduler>
 8002b02:	bf00      	nop
 8002b04:	40012c00 	.word	0x40012c00
 8002b08:	2000024c 	.word	0x2000024c

08002b0c <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8002b0c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002b0e:	4c18      	ldr	r4, [pc, #96]	; (8002b70 <USART2_IRQHandler+0x64>)
 8002b10:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	0691      	lsls	r1, r2, #26
 8002b18:	d50b      	bpl.n	8002b32 <USART2_IRQHandler+0x26>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002b1a:	6a59      	ldr	r1, [r3, #36]	; 0x24
  {
    uint16_t retVal;
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	b2c9      	uxtb	r1, r1
 8002b20:	f005 ffdc 	bl	8008adc <UFCP_RX_IRQ_Handler>
 8002b24:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d01a      	beq.n	8002b60 <USART2_IRQHandler+0x54>
    {
      UI_SerialCommunicationTimeOutStart();
    }
    if (retVal == 2)
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d01d      	beq.n	8002b6a <USART2_IRQHandler+0x5e>
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002b2e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	0612      	lsls	r2, r2, #24
 8002b36:	d504      	bpl.n	8002b42 <USART2_IRQHandler+0x36>
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 8002b38:	480d      	ldr	r0, [pc, #52]	; (8002b70 <USART2_IRQHandler+0x64>)
 8002b3a:	f005 ff2b 	bl	8008994 <UFCP_TX_IRQ_Handler>
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002b3e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	071b      	lsls	r3, r3, #28
 8002b46:	d50a      	bpl.n	8002b5e <USART2_IRQHandler+0x52>
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8002b48:	4809      	ldr	r0, [pc, #36]	; (8002b70 <USART2_IRQHandler+0x64>)
 8002b4a:	f006 f831 	bl	8008bb0 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002b4e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002b52:	2208      	movs	r2, #8
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8002b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b58:	621a      	str	r2, [r3, #32]
    UI_SerialCommunicationTimeOutStop();
 8002b5a:	f000 b8c9 	b.w	8002cf0 <UI_SerialCommunicationTimeOutStop>
}
 8002b5e:	bd10      	pop	{r4, pc}
      UI_SerialCommunicationTimeOutStart();
 8002b60:	f000 f8cc 	bl	8002cfc <UI_SerialCommunicationTimeOutStart>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002b64:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002b68:	e7e3      	b.n	8002b32 <USART2_IRQHandler+0x26>
      UI_SerialCommunicationTimeOutStop();
 8002b6a:	f000 f8c1 	bl	8002cf0 <UI_SerialCommunicationTimeOutStop>
 8002b6e:	e7de      	b.n	8002b2e <USART2_IRQHandler+0x22>
 8002b70:	20000550 	.word	0x20000550

08002b74 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002b74:	b538      	push	{r3, r4, r5, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8002b76:	f7fe fe51 	bl	800181c <TSK_HardwareFaultTask>
 8002b7a:	4c18      	ldr	r4, [pc, #96]	; (8002bdc <HardFault_Handler+0x68>)
 8002b7c:	2508      	movs	r5, #8

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002b7e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002b82:	69da      	ldr	r2, [r3, #28]
 8002b84:	0711      	lsls	r1, r2, #28
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 8002b86:	4620      	mov	r0, r4
 8002b88:	d508      	bpl.n	8002b9c <HardFault_Handler+0x28>
 8002b8a:	f006 f811 	bl	8008bb0 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002b8e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002b92:	621d      	str	r5, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 8002b94:	f000 f8ac 	bl	8002cf0 <UI_SerialCommunicationTimeOutStop>
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002b98:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002b9c:	69da      	ldr	r2, [r3, #28]
 8002b9e:	0612      	lsls	r2, r2, #24
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	d513      	bpl.n	8002bcc <HardFault_Handler+0x58>
 8002ba4:	f005 fef6 	bl	8008994 <UFCP_TX_IRQ_Handler>
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002ba8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002bac:	69da      	ldr	r2, [r3, #28]
 8002bae:	0691      	lsls	r1, r2, #26
 8002bb0:	d5e7      	bpl.n	8002b82 <HardFault_Handler+0xe>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002bb2:	6a59      	ldr	r1, [r3, #36]	; 0x24
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	b2c9      	uxtb	r1, r1
 8002bb8:	f005 ff90 	bl	8008adc <UFCP_RX_IRQ_Handler>
 8002bbc:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d008      	beq.n	8002bd4 <HardFault_Handler+0x60>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d1db      	bne.n	8002b7e <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 8002bc6:	f000 f893 	bl	8002cf0 <UI_SerialCommunicationTimeOutStop>
 8002bca:	e7d8      	b.n	8002b7e <HardFault_Handler+0xa>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002bcc:	69da      	ldr	r2, [r3, #28]
 8002bce:	0692      	lsls	r2, r2, #26
 8002bd0:	d5d7      	bpl.n	8002b82 <HardFault_Handler+0xe>
 8002bd2:	e7ee      	b.n	8002bb2 <HardFault_Handler+0x3e>
          UI_SerialCommunicationTimeOutStart();
 8002bd4:	f000 f892 	bl	8002cfc <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8002bd8:	e7d1      	b.n	8002b7e <HardFault_Handler+0xa>
 8002bda:	bf00      	nop
 8002bdc:	20000550 	.word	0x20000550

08002be0 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8002be0:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002be2:	4c0a      	ldr	r4, [pc, #40]	; (8002c0c <SysTick_Handler+0x2c>)
 8002be4:	7823      	ldrb	r3, [r4, #0]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d006      	beq.n	8002bf8 <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8002bea:	3301      	adds	r3, #1
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8002bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002bf4:	f7fe be02 	b.w	80017fc <MC_RunMotorControlTasks>
    HAL_IncTick();
 8002bf8:	f000 fdf0 	bl	80037dc <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002bfc:	f001 fe18 	bl	8004830 <HAL_SYSTICK_IRQHandler>
 8002c00:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8002c02:	7023      	strb	r3, [r4, #0]
}
 8002c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002c08:	f7fe bdf8 	b.w	80017fc <MC_RunMotorControlTasks>
 8002c0c:	20000690 	.word	0x20000690

08002c10 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <EXTI15_10_IRQHandler+0x14>)
 8002c12:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC10.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10) )
 8002c14:	0552      	lsls	r2, r2, #21
 8002c16:	d400      	bmi.n	8002c1a <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_10);
    UI_HandleStartStopButton_cb ();
  }

}
 8002c18:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002c1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c1e:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8002c20:	f000 b872 	b.w	8002d08 <UI_HandleStartStopButton_cb>
 8002c24:	40010400 	.word	0x40010400

08002c28 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8002c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    pMCP = &MCP_UI_Params;
 8002c2c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8002ca0 <UI_TaskInit+0x78>
    pMCP->_Super = UI_Params;
 8002c30:	f8df e070 	ldr.w	lr, [pc, #112]	; 8002ca4 <UI_TaskInit+0x7c>

    UFCP_Init( & pUSART );
 8002c34:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8002ca8 <UI_TaskInit+0x80>
{
 8002c38:	461e      	mov	r6, r3
    pMCP = &MCP_UI_Params;
 8002c3a:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <UI_TaskInit+0x68>)
 8002c3c:	f8c8 3000 	str.w	r3, [r8]
{
 8002c40:	4607      	mov	r7, r0
 8002c42:	460c      	mov	r4, r1
 8002c44:	4615      	mov	r5, r2
    pMCP->_Super = UI_Params;
 8002c46:	469c      	mov	ip, r3
 8002c48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002c4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002c50:	e89e 0003 	ldmia.w	lr, {r0, r1}
{
 8002c54:	b082      	sub	sp, #8
    pMCP->_Super = UI_Params;
 8002c56:	e88c 0003 	stmia.w	ip, {r0, r1}
    UFCP_Init( & pUSART );
 8002c5a:	4648      	mov	r0, r9
{
 8002c5c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    UFCP_Init( & pUSART );
 8002c60:	f005 fe96 	bl	8008990 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <UI_TaskInit+0x6c>)
 8002c66:	f8d8 0000 	ldr.w	r0, [r8]
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	4649      	mov	r1, r9
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <UI_TaskInit+0x70>)
 8002c70:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <UI_TaskInit+0x74>)
 8002c72:	f8cd a004 	str.w	sl, [sp, #4]
 8002c76:	f7ff f9bf 	bl	8001ff8 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002c7a:	f8d8 0000 	ldr.w	r0, [r8]
 8002c7e:	970a      	str	r7, [sp, #40]	; 0x28
 8002c80:	4633      	mov	r3, r6
 8002c82:	462a      	mov	r2, r5
 8002c84:	4621      	mov	r1, r4

}
 8002c86:	b002      	add	sp, #8
 8002c88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002c8c:	f000 b848 	b.w	8002d20 <UI_Init>
 8002c90:	20000b28 	.word	0x20000b28
 8002c94:	08008bd1 	.word	0x08008bd1
 8002c98:	080089fd 	.word	0x080089fd
 8002c9c:	08008a25 	.word	0x08008a25
 8002ca0:	20000bdc 	.word	0x20000bdc
 8002ca4:	200009d8 	.word	0x200009d8
 8002ca8:	20000550 	.word	0x20000550

08002cac <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8002cac:	4a0d      	ldr	r2, [pc, #52]	; (8002ce4 <UI_Scheduler+0x38>)
 8002cae:	8813      	ldrh	r3, [r2, #0]
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	b11b      	cbz	r3, 8002cbc <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8002cb4:	8813      	ldrh	r3, [r2, #0]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8002cbc:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <UI_Scheduler+0x3c>)
 8002cbe:	8813      	ldrh	r3, [r2, #0]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d903      	bls.n	8002cce <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 8002cc6:	8813      	ldrh	r3, [r2, #0]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8002cce:	4a07      	ldr	r2, [pc, #28]	; (8002cec <UI_Scheduler+0x40>)
 8002cd0:	8813      	ldrh	r3, [r2, #0]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d903      	bls.n	8002ce0 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8002cd8:	8813      	ldrh	r3, [r2, #0]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	8013      	strh	r3, [r2, #0]
  }
}
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	20000bda 	.word	0x20000bda
 8002ce8:	20000bd8 	.word	0x20000bd8
 8002cec:	20000692 	.word	0x20000692

08002cf0 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002cf0:	4b01      	ldr	r3, [pc, #4]	; (8002cf8 <UI_SerialCommunicationTimeOutStop+0x8>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	801a      	strh	r2, [r3, #0]
}
 8002cf6:	4770      	bx	lr
 8002cf8:	20000bd8 	.word	0x20000bd8

08002cfc <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8002cfc:	4b01      	ldr	r3, [pc, #4]	; (8002d04 <UI_SerialCommunicationTimeOutStart+0x8>)
 8002cfe:	224f      	movs	r2, #79	; 0x4f
 8002d00:	801a      	strh	r2, [r3, #0]
}
 8002d02:	4770      	bx	lr
 8002d04:	20000bd8 	.word	0x20000bd8

08002d08 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002d08:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 8002d0a:	f7fd ff8d 	bl	8000c28 <MC_GetSTMStateMotor1>
 8002d0e:	b918      	cbnz	r0, 8002d18 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002d10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 8002d14:	f7fd bf70 	b.w	8000bf8 <MC_StartMotor1>
}
 8002d18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 8002d1c:	f7fd bf72 	b.w	8000c04 <MC_StopMotor1>

08002d20 <UI_Init>:
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 8002d20:	e9c0 2302 	strd	r2, r3, [r0, #8]
  pHandle->bDriveNum = bMCNum;
 8002d24:	7101      	strb	r1, [r0, #4]
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8002d26:	9b00      	ldr	r3, [sp, #0]
 8002d28:	6103      	str	r3, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	7501      	strb	r1, [r0, #20]
}
 8002d2e:	4770      	bx	lr

08002d30 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8002d30:	7903      	ldrb	r3, [r0, #4]
 8002d32:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8002d34:	bf86      	itte	hi
 8002d36:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 8002d38:	2001      	movhi	r0, #1
    retVal = false;
 8002d3a:	2000      	movls	r0, #0
  }
  return retVal;
}
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop

08002d40 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8002d40:	7d00      	ldrb	r0, [r0, #20]
 8002d42:	4770      	bx	lr

08002d44 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002d44:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002d46:	6884      	ldr	r4, [r0, #8]
 8002d48:	7d03      	ldrb	r3, [r0, #20]
 8002d4a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 8002d4e:	4614      	mov	r4, r2
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002d50:	68c2      	ldr	r2, [r0, #12]
{
 8002d52:	b083      	sub	sp, #12
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002d54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 8002d58:	295b      	cmp	r1, #91	; 0x5b
 8002d5a:	d85d      	bhi.n	8002e18 <UI_SetReg+0xd4>
 8002d5c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002d60:	005c011c 	.word	0x005c011c
 8002d64:	010c005c 	.word	0x010c005c
 8002d68:	0106005c 	.word	0x0106005c
 8002d6c:	012c0100 	.word	0x012c0100
 8002d70:	00bc0120 	.word	0x00bc0120
 8002d74:	00da00b6 	.word	0x00da00b6
 8002d78:	00c800ce 	.word	0x00c800ce
 8002d7c:	00fa00c2 	.word	0x00fa00c2
 8002d80:	009b00e0 	.word	0x009b00e0
 8002d84:	005c005c 	.word	0x005c005c
 8002d88:	00710080 	.word	0x00710080
 8002d8c:	005c005c 	.word	0x005c005c
 8002d90:	005c005c 	.word	0x005c005c
 8002d94:	005c005c 	.word	0x005c005c
 8002d98:	005c005c 	.word	0x005c005c
 8002d9c:	005c005c 	.word	0x005c005c
 8002da0:	005c005c 	.word	0x005c005c
 8002da4:	005c005c 	.word	0x005c005c
 8002da8:	005c005c 	.word	0x005c005c
 8002dac:	005c005c 	.word	0x005c005c
 8002db0:	005c005c 	.word	0x005c005c
 8002db4:	005c005c 	.word	0x005c005c
 8002db8:	005c005c 	.word	0x005c005c
 8002dbc:	005c005c 	.word	0x005c005c
 8002dc0:	005c005c 	.word	0x005c005c
 8002dc4:	005c005c 	.word	0x005c005c
 8002dc8:	005c005c 	.word	0x005c005c
 8002dcc:	005c005c 	.word	0x005c005c
 8002dd0:	005c005c 	.word	0x005c005c
 8002dd4:	005c005c 	.word	0x005c005c
 8002dd8:	005c005c 	.word	0x005c005c
 8002ddc:	005c005c 	.word	0x005c005c
 8002de0:	006b005c 	.word	0x006b005c
 8002de4:	005c005c 	.word	0x005c005c
 8002de8:	005c005c 	.word	0x005c005c
 8002dec:	005c005c 	.word	0x005c005c
 8002df0:	005c005c 	.word	0x005c005c
 8002df4:	005c005c 	.word	0x005c005c
 8002df8:	005c005c 	.word	0x005c005c
 8002dfc:	005c005c 	.word	0x005c005c
 8002e00:	005c005c 	.word	0x005c005c
 8002e04:	005c005c 	.word	0x005c005c
 8002e08:	005c005c 	.word	0x005c005c
 8002e0c:	005c005c 	.word	0x005c005c
 8002e10:	005c005c 	.word	0x005c005c
 8002e14:	005f005c 	.word	0x005f005c
 8002e18:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8002e1a:	b003      	add	sp, #12
 8002e1c:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8002e1e:	4980      	ldr	r1, [pc, #512]	; (8003020 <UI_SetReg+0x2dc>)
 8002e20:	fb81 3104 	smull	r3, r1, r1, r4
 8002e24:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8002e28:	4628      	mov	r0, r5
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	b209      	sxth	r1, r1
 8002e2e:	f7fd ff0f 	bl	8000c50 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002e32:	2001      	movs	r0, #1
    break;
 8002e34:	e7f1      	b.n	8002e1a <UI_SetReg+0xd6>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8002e36:	4628      	mov	r0, r5
 8002e38:	b221      	sxth	r1, r4
 8002e3a:	f7fe f811 	bl	8000e60 <MCI_SetIdref>
  bool retVal = true;
 8002e3e:	2001      	movs	r0, #1
    break;
 8002e40:	e7eb      	b.n	8002e1a <UI_SetReg+0xd6>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002e42:	6901      	ldr	r1, [r0, #16]
 8002e44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e48:	0f19      	lsrs	r1, r3, #28
 8002e4a:	2909      	cmp	r1, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e4c:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e50:	f000 80d7 	beq.w	8003002 <UI_SetReg+0x2be>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e54:	2b09      	cmp	r3, #9
 8002e56:	f000 80c3 	beq.w	8002fe0 <UI_SetReg+0x29c>
  bool retVal = true;
 8002e5a:	2001      	movs	r0, #1
}
 8002e5c:	b003      	add	sp, #12
 8002e5e:	bd30      	pop	{r4, r5, pc}
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002e60:	6901      	ldr	r1, [r0, #16]
 8002e62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e66:	0f19      	lsrs	r1, r3, #28
 8002e68:	2909      	cmp	r1, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e6a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e6e:	f000 80b2 	beq.w	8002fd6 <UI_SetReg+0x292>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e72:	2b09      	cmp	r3, #9
 8002e74:	d1f1      	bne.n	8002e5a <UI_SetReg+0x116>
        pSPD = pMCT->pSpeedSensorAux;
 8002e76:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002e78:	2d00      	cmp	r5, #0
 8002e7a:	d0ee      	beq.n	8002e5a <UI_SetReg+0x116>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002e7c:	aa01      	add	r2, sp, #4
 8002e7e:	f10d 0102 	add.w	r1, sp, #2
 8002e82:	4628      	mov	r0, r5
 8002e84:	f005 fd42 	bl	800890c <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 8002e88:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002e8c:	b222      	sxth	r2, r4
 8002e8e:	4628      	mov	r0, r5
 8002e90:	f005 fd4a 	bl	8008928 <STO_SetPLLGains>
    break;
 8002e94:	e7e1      	b.n	8002e5a <UI_SetReg+0x116>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002e96:	6901      	ldr	r1, [r0, #16]
 8002e98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002e9c:	0f19      	lsrs	r1, r3, #28
 8002e9e:	2909      	cmp	r1, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ea0:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ea4:	f000 8092 	beq.w	8002fcc <UI_SetReg+0x288>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ea8:	2b09      	cmp	r3, #9
 8002eaa:	d1d6      	bne.n	8002e5a <UI_SetReg+0x116>
        pSPD = pMCT->pSpeedSensorAux;
 8002eac:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002eae:	2d00      	cmp	r5, #0
 8002eb0:	d0d3      	beq.n	8002e5a <UI_SetReg+0x116>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002eb2:	aa01      	add	r2, sp, #4
 8002eb4:	f10d 0102 	add.w	r1, sp, #2
 8002eb8:	4628      	mov	r0, r5
 8002eba:	f005 fd1b 	bl	80088f4 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 8002ebe:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002ec2:	b222      	sxth	r2, r4
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	f005 fd1d 	bl	8008904 <STO_PLL_SetObserverGains>
    break;
 8002eca:	e7c6      	b.n	8002e5a <UI_SetReg+0x116>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8002ecc:	6850      	ldr	r0, [r2, #4]
 8002ece:	b221      	sxth	r1, r4
 8002ed0:	f003 fd86 	bl	80069e0 <PID_SetKI>
  bool retVal = true;
 8002ed4:	2001      	movs	r0, #1
    break;
 8002ed6:	e7a0      	b.n	8002e1a <UI_SetReg+0xd6>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8002ed8:	6850      	ldr	r0, [r2, #4]
 8002eda:	b221      	sxth	r1, r4
 8002edc:	f003 fd7e 	bl	80069dc <PID_SetKP>
  bool retVal = true;
 8002ee0:	2001      	movs	r0, #1
    break;
 8002ee2:	e79a      	b.n	8002e1a <UI_SetReg+0xd6>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8002ee4:	6890      	ldr	r0, [r2, #8]
 8002ee6:	b221      	sxth	r1, r4
 8002ee8:	f003 fd7a 	bl	80069e0 <PID_SetKI>
  bool retVal = true;
 8002eec:	2001      	movs	r0, #1
    break;
 8002eee:	e794      	b.n	8002e1a <UI_SetReg+0xd6>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8002ef0:	6890      	ldr	r0, [r2, #8]
 8002ef2:	b221      	sxth	r1, r4
 8002ef4:	f003 fd72 	bl	80069dc <PID_SetKP>
  bool retVal = true;
 8002ef8:	2001      	movs	r0, #1
    break;
 8002efa:	e78e      	b.n	8002e1a <UI_SetReg+0xd6>
      currComp = MCI_GetIqdref(pMCI);
 8002efc:	4628      	mov	r0, r5
 8002efe:	f7fd ff81 	bl	8000e04 <MCI_GetIqdref>
 8002f02:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8002f04:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002f08:	4628      	mov	r0, r5
 8002f0a:	9901      	ldr	r1, [sp, #4]
 8002f0c:	f7fd feb4 	bl	8000c78 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002f10:	2001      	movs	r0, #1
    break;
 8002f12:	e782      	b.n	8002e1a <UI_SetReg+0xd6>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8002f14:	6850      	ldr	r0, [r2, #4]
 8002f16:	b221      	sxth	r1, r4
 8002f18:	f003 fd72 	bl	8006a00 <PID_SetKD>
  bool retVal = true;
 8002f1c:	2001      	movs	r0, #1
    break;
 8002f1e:	e77c      	b.n	8002e1a <UI_SetReg+0xd6>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002f20:	6901      	ldr	r1, [r0, #16]
 8002f22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f26:	0f19      	lsrs	r1, r3, #28
 8002f28:	2909      	cmp	r1, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f2a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f2e:	d049      	beq.n	8002fc4 <UI_SetReg+0x280>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f30:	2b09      	cmp	r3, #9
 8002f32:	d192      	bne.n	8002e5a <UI_SetReg+0x116>
        pSPD = pMCT->pSpeedSensorAux;
 8002f34:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002f36:	2d00      	cmp	r5, #0
 8002f38:	d08f      	beq.n	8002e5a <UI_SetReg+0x116>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002f3a:	aa01      	add	r2, sp, #4
 8002f3c:	f10d 0102 	add.w	r1, sp, #2
 8002f40:	4628      	mov	r0, r5
 8002f42:	f005 fcd7 	bl	80088f4 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 8002f46:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002f4a:	b221      	sxth	r1, r4
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	f005 fcd9 	bl	8008904 <STO_PLL_SetObserverGains>
    break;
 8002f52:	e782      	b.n	8002e5a <UI_SetReg+0x116>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8002f54:	6890      	ldr	r0, [r2, #8]
 8002f56:	b221      	sxth	r1, r4
 8002f58:	f003 fd52 	bl	8006a00 <PID_SetKD>
  bool retVal = true;
 8002f5c:	2001      	movs	r0, #1
    break;
 8002f5e:	e75c      	b.n	8002e1a <UI_SetReg+0xd6>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002f60:	6810      	ldr	r0, [r2, #0]
 8002f62:	b221      	sxth	r1, r4
 8002f64:	f003 fd3c 	bl	80069e0 <PID_SetKI>
  bool retVal = true;
 8002f68:	2001      	movs	r0, #1
    break;
 8002f6a:	e756      	b.n	8002e1a <UI_SetReg+0xd6>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002f6c:	6810      	ldr	r0, [r2, #0]
 8002f6e:	b221      	sxth	r1, r4
 8002f70:	f003 fd34 	bl	80069dc <PID_SetKP>
  bool retVal = true;
 8002f74:	2001      	movs	r0, #1
    break;
 8002f76:	e750      	b.n	8002e1a <UI_SetReg+0xd6>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8002f78:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002f7c:	d045      	beq.n	800300a <UI_SetReg+0x2c6>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002f7e:	2c01      	cmp	r4, #1
 8002f80:	f47f af6b 	bne.w	8002e5a <UI_SetReg+0x116>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8002f84:	4628      	mov	r0, r5
 8002f86:	f7fd ff0f 	bl	8000da8 <MCI_GetMecSpeedRefUnit>
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	4601      	mov	r1, r0
 8002f8e:	4628      	mov	r0, r5
 8002f90:	f7fd fe5e 	bl	8000c50 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002f94:	4620      	mov	r0, r4
 8002f96:	e740      	b.n	8002e1a <UI_SetReg+0xd6>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8002f98:	b2e1      	uxtb	r1, r4
 8002f9a:	f7ff fec9 	bl	8002d30 <UI_SelectMC>
    break;
 8002f9e:	e73c      	b.n	8002e1a <UI_SetReg+0xd6>
      currComp = MCI_GetIqdref(pMCI);
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	f7fd ff2f 	bl	8000e04 <MCI_GetIqdref>
 8002fa6:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8002fa8:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002fac:	4628      	mov	r0, r5
 8002fae:	9901      	ldr	r1, [sp, #4]
 8002fb0:	f7fd fe62 	bl	8000c78 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002fb4:	2001      	movs	r0, #1
    break;
 8002fb6:	e730      	b.n	8002e1a <UI_SetReg+0xd6>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002fb8:	6810      	ldr	r0, [r2, #0]
 8002fba:	b221      	sxth	r1, r4
 8002fbc:	f003 fd20 	bl	8006a00 <PID_SetKD>
  bool retVal = true;
 8002fc0:	2001      	movs	r0, #1
    break;
 8002fc2:	e72a      	b.n	8002e1a <UI_SetReg+0xd6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002fc4:	2b09      	cmp	r3, #9
 8002fc6:	d0b5      	beq.n	8002f34 <UI_SetReg+0x1f0>
        pSPD = pMCT->pSpeedSensorMain;
 8002fc8:	6995      	ldr	r5, [r2, #24]
 8002fca:	e7b4      	b.n	8002f36 <UI_SetReg+0x1f2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002fcc:	2b09      	cmp	r3, #9
 8002fce:	f43f af6d 	beq.w	8002eac <UI_SetReg+0x168>
        pSPD = pMCT->pSpeedSensorMain;
 8002fd2:	6995      	ldr	r5, [r2, #24]
 8002fd4:	e76b      	b.n	8002eae <UI_SetReg+0x16a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002fd6:	2b09      	cmp	r3, #9
 8002fd8:	f43f af4d 	beq.w	8002e76 <UI_SetReg+0x132>
        pSPD = pMCT->pSpeedSensorMain;
 8002fdc:	6995      	ldr	r5, [r2, #24]
 8002fde:	e74b      	b.n	8002e78 <UI_SetReg+0x134>
        pSPD = pMCT->pSpeedSensorAux;
 8002fe0:	69d5      	ldr	r5, [r2, #28]
      if (pSPD != MC_NULL)
 8002fe2:	2d00      	cmp	r5, #0
 8002fe4:	f43f af39 	beq.w	8002e5a <UI_SetReg+0x116>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002fe8:	aa01      	add	r2, sp, #4
 8002fea:	f10d 0102 	add.w	r1, sp, #2
 8002fee:	4628      	mov	r0, r5
 8002ff0:	f005 fc8c 	bl	800890c <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 8002ff4:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002ff8:	b221      	sxth	r1, r4
 8002ffa:	4628      	mov	r0, r5
 8002ffc:	f005 fc94 	bl	8008928 <STO_SetPLLGains>
    break;
 8003000:	e72b      	b.n	8002e5a <UI_SetReg+0x116>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003002:	2b09      	cmp	r3, #9
 8003004:	d0ec      	beq.n	8002fe0 <UI_SetReg+0x29c>
        pSPD = pMCT->pSpeedSensorMain;
 8003006:	6995      	ldr	r5, [r2, #24]
 8003008:	e7eb      	b.n	8002fe2 <UI_SetReg+0x29e>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 800300a:	4628      	mov	r0, r5
 800300c:	f7fd ff24 	bl	8000e58 <MCI_GetTeref>
 8003010:	4622      	mov	r2, r4
 8003012:	4601      	mov	r1, r0
 8003014:	4628      	mov	r0, r5
 8003016:	f7fd fe25 	bl	8000c64 <MCI_ExecTorqueRamp>
  bool retVal = true;
 800301a:	2001      	movs	r0, #1
 800301c:	e6fd      	b.n	8002e1a <UI_SetReg+0xd6>
 800301e:	bf00      	nop
 8003020:	2aaaaaab 	.word	0x2aaaaaab

08003024 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8003024:	b530      	push	{r4, r5, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003026:	68c4      	ldr	r4, [r0, #12]
 8003028:	7d03      	ldrb	r3, [r0, #20]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800302a:	6885      	ldr	r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800302c:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003030:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
{
 8003034:	b091      	sub	sp, #68	; 0x44

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 8003036:	2a00      	cmp	r2, #0
 8003038:	f000 808b 	beq.w	8003152 <UI_GetReg+0x12e>
  {
    *success = true;
 800303c:	f04f 0c01 	mov.w	ip, #1
 8003040:	f882 c000 	strb.w	ip, [r2]
  }

  switch (bRegID)
 8003044:	2981      	cmp	r1, #129	; 0x81
 8003046:	f200 8104 	bhi.w	8003252 <UI_GetReg+0x22e>
 800304a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800304e:	0203      	.short	0x0203
 8003050:	01f901fd 	.word	0x01f901fd
 8003054:	01ee01f5 	.word	0x01ee01f5
 8003058:	01e601ea 	.word	0x01e601ea
 800305c:	010801e2 	.word	0x010801e2
 8003060:	01cc01c4 	.word	0x01cc01c4
 8003064:	00fd01c8 	.word	0x00fd01c8
 8003068:	01de01c0 	.word	0x01de01c0
 800306c:	01ab01da 	.word	0x01ab01da
 8003070:	01020198 	.word	0x01020198
 8003074:	01890102 	.word	0x01890102
 8003078:	01020117 	.word	0x01020117
 800307c:	01020102 	.word	0x01020102
 8003080:	01700174 	.word	0x01700174
 8003084:	0102016c 	.word	0x0102016c
 8003088:	01820102 	.word	0x01820102
 800308c:	0112010d 	.word	0x0112010d
 8003090:	01260102 	.word	0x01260102
 8003094:	017d0178 	.word	0x017d0178
 8003098:	01620167 	.word	0x01620167
 800309c:	0112010d 	.word	0x0112010d
 80030a0:	00fd0108 	.word	0x00fd0108
 80030a4:	01d5028f 	.word	0x01d5028f
 80030a8:	024201d0 	.word	0x024201d0
 80030ac:	01020102 	.word	0x01020102
 80030b0:	0247022f 	.word	0x0247022f
 80030b4:	0150021b 	.word	0x0150021b
 80030b8:	012c013e 	.word	0x012c013e
 80030bc:	01020102 	.word	0x01020102
 80030c0:	01020102 	.word	0x01020102
 80030c4:	01020102 	.word	0x01020102
 80030c8:	01020102 	.word	0x01020102
 80030cc:	025b0288 	.word	0x025b0288
 80030d0:	027500fd 	.word	0x027500fd
 80030d4:	01020262 	.word	0x01020262
 80030d8:	01020102 	.word	0x01020102
 80030dc:	01020102 	.word	0x01020102
 80030e0:	01020102 	.word	0x01020102
 80030e4:	01020102 	.word	0x01020102
 80030e8:	01020102 	.word	0x01020102
 80030ec:	01020102 	.word	0x01020102
 80030f0:	01020102 	.word	0x01020102
 80030f4:	01020102 	.word	0x01020102
 80030f8:	01020102 	.word	0x01020102
 80030fc:	01020102 	.word	0x01020102
 8003100:	01020102 	.word	0x01020102
 8003104:	0102020e 	.word	0x0102020e
 8003108:	01020102 	.word	0x01020102
 800310c:	01020102 	.word	0x01020102
 8003110:	01020102 	.word	0x01020102
 8003114:	01020102 	.word	0x01020102
 8003118:	01020102 	.word	0x01020102
 800311c:	01020102 	.word	0x01020102
 8003120:	01020102 	.word	0x01020102
 8003124:	01020102 	.word	0x01020102
 8003128:	020a0102 	.word	0x020a0102
 800312c:	02590206 	.word	0x02590206
 8003130:	01050102 	.word	0x01050102
 8003134:	01020105 	.word	0x01020105
 8003138:	01020102 	.word	0x01020102
 800313c:	01020102 	.word	0x01020102
 8003140:	01020102 	.word	0x01020102
 8003144:	01020102 	.word	0x01020102
 8003148:	01020102 	.word	0x01020102
 800314c:	01020102 	.word	0x01020102
 8003150:	00fa      	.short	0x00fa
 8003152:	2973      	cmp	r1, #115	; 0x73
 8003154:	d875      	bhi.n	8003242 <UI_GetReg+0x21e>
 8003156:	e8df f011 	tbh	[pc, r1, lsl #1]
 800315a:	017d      	.short	0x017d
 800315c:	01730177 	.word	0x01730177
 8003160:	0168016f 	.word	0x0168016f
 8003164:	01600164 	.word	0x01600164
 8003168:	0082015c 	.word	0x0082015c
 800316c:	0146013e 	.word	0x0146013e
 8003170:	00770142 	.word	0x00770142
 8003174:	0158013a 	.word	0x0158013a
 8003178:	01250154 	.word	0x01250154
 800317c:	00740112 	.word	0x00740112
 8003180:	01030074 	.word	0x01030074
 8003184:	00740091 	.word	0x00740091
 8003188:	00740074 	.word	0x00740074
 800318c:	00ea00ee 	.word	0x00ea00ee
 8003190:	007400e6 	.word	0x007400e6
 8003194:	00fc0074 	.word	0x00fc0074
 8003198:	008c0087 	.word	0x008c0087
 800319c:	00a00074 	.word	0x00a00074
 80031a0:	00f700f2 	.word	0x00f700f2
 80031a4:	00dc00e1 	.word	0x00dc00e1
 80031a8:	008c0087 	.word	0x008c0087
 80031ac:	00770082 	.word	0x00770082
 80031b0:	014f0209 	.word	0x014f0209
 80031b4:	01bc014a 	.word	0x01bc014a
 80031b8:	00740074 	.word	0x00740074
 80031bc:	01c101a9 	.word	0x01c101a9
 80031c0:	00ca0195 	.word	0x00ca0195
 80031c4:	00a600b8 	.word	0x00a600b8
 80031c8:	00740074 	.word	0x00740074
 80031cc:	00740074 	.word	0x00740074
 80031d0:	00740074 	.word	0x00740074
 80031d4:	00740074 	.word	0x00740074
 80031d8:	01d50202 	.word	0x01d50202
 80031dc:	01ef0077 	.word	0x01ef0077
 80031e0:	007401dc 	.word	0x007401dc
 80031e4:	00740074 	.word	0x00740074
 80031e8:	00740074 	.word	0x00740074
 80031ec:	00740074 	.word	0x00740074
 80031f0:	00740074 	.word	0x00740074
 80031f4:	00740074 	.word	0x00740074
 80031f8:	00740074 	.word	0x00740074
 80031fc:	00740074 	.word	0x00740074
 8003200:	00740074 	.word	0x00740074
 8003204:	00740074 	.word	0x00740074
 8003208:	00740074 	.word	0x00740074
 800320c:	00740074 	.word	0x00740074
 8003210:	00740188 	.word	0x00740188
 8003214:	00740074 	.word	0x00740074
 8003218:	00740074 	.word	0x00740074
 800321c:	00740074 	.word	0x00740074
 8003220:	00740074 	.word	0x00740074
 8003224:	00740074 	.word	0x00740074
 8003228:	00740074 	.word	0x00740074
 800322c:	00740074 	.word	0x00740074
 8003230:	00740074 	.word	0x00740074
 8003234:	01840074 	.word	0x01840074
 8003238:	01d30180 	.word	0x01d30180
 800323c:	007f0074 	.word	0x007f0074
 8003240:	007f      	.short	0x007f
  int32_t bRetVal = 0;
 8003242:	2000      	movs	r0, #0
      }
	}
    break;
  }
  return bRetVal;
}
 8003244:	b011      	add	sp, #68	; 0x44
 8003246:	bd30      	pop	{r4, r5, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 8003248:	4628      	mov	r0, r5
 800324a:	f7fd fddb 	bl	8000e04 <MCI_GetIqdref>
 800324e:	1400      	asrs	r0, r0, #16
    break;
 8003250:	e7f8      	b.n	8003244 <UI_GetReg+0x220>
        *success = false;
 8003252:	2000      	movs	r0, #0
 8003254:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 8003256:	e7f5      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = CTRBDID;
 8003258:	f242 701f 	movw	r0, #10015	; 0x271f
 800325c:	e7f2      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = MCI_GetIqdref(pMCI).q;
 800325e:	4628      	mov	r0, r5
 8003260:	f7fd fdd0 	bl	8000e04 <MCI_GetIqdref>
 8003264:	b200      	sxth	r0, r0
    break;
 8003266:	e7ed      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = MCI_GetIqd(pMCI).q;
 8003268:	4628      	mov	r0, r5
 800326a:	f7fd fdbd 	bl	8000de8 <MCI_GetIqd>
 800326e:	b200      	sxth	r0, r0
    break;
 8003270:	e7e8      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = MCI_GetIqd(pMCI).d;
 8003272:	4628      	mov	r0, r5
 8003274:	f7fd fdb8 	bl	8000de8 <MCI_GetIqd>
 8003278:	1400      	asrs	r0, r0, #16
    break;
 800327a:	e7e3      	b.n	8003244 <UI_GetReg+0x220>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800327c:	6902      	ldr	r2, [r0, #16]
 800327e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003282:	0f1a      	lsrs	r2, r3, #28
 8003284:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003286:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800328a:	f000 81aa 	beq.w	80035e2 <UI_GetReg+0x5be>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800328e:	2b09      	cmp	r3, #9
 8003290:	f000 819e 	beq.w	80035d0 <UI_GetReg+0x5ac>
      bRetVal = (int32_t)hPgain;
 8003294:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
    break;
 8003298:	e7d4      	b.n	8003244 <UI_GetReg+0x220>
      if (pMCT->pRevupCtrl)
 800329a:	6960      	ldr	r0, [r4, #20]
 800329c:	2800      	cmp	r0, #0
 800329e:	d0d0      	beq.n	8003242 <UI_GetReg+0x21e>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 80032a0:	f004 feca 	bl	8008038 <RUC_GetNumberOfPhases>
 80032a4:	e7ce      	b.n	8003244 <UI_GetReg+0x220>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80032a6:	6902      	ldr	r2, [r0, #16]
 80032a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032ac:	0f1a      	lsrs	r2, r3, #28
 80032ae:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032b0:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032b4:	f000 8187 	beq.w	80035c6 <UI_GetReg+0x5a2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032b8:	2b09      	cmp	r3, #9
 80032ba:	d1c2      	bne.n	8003242 <UI_GetReg+0x21e>
        pSPD = pMCT->pSpeedSensorAux;
 80032bc:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80032be:	2800      	cmp	r0, #0
 80032c0:	d0bf      	beq.n	8003242 <UI_GetReg+0x21e>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 80032c2:	f005 faf7 	bl	80088b4 <STO_PLL_GetEstimatedBemf>
 80032c6:	1400      	asrs	r0, r0, #16
 80032c8:	e7bc      	b.n	8003244 <UI_GetReg+0x220>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80032ca:	6902      	ldr	r2, [r0, #16]
 80032cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032d0:	0f1a      	lsrs	r2, r3, #28
 80032d2:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032d4:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032d8:	f000 8197 	beq.w	800360a <UI_GetReg+0x5e6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032dc:	2b09      	cmp	r3, #9
 80032de:	d1b0      	bne.n	8003242 <UI_GetReg+0x21e>
        pSPD =  pMCT->pSpeedSensorAux;
 80032e0:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80032e2:	2800      	cmp	r0, #0
 80032e4:	d0ad      	beq.n	8003242 <UI_GetReg+0x21e>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 80032e6:	f005 fae5 	bl	80088b4 <STO_PLL_GetEstimatedBemf>
 80032ea:	b200      	sxth	r0, r0
 80032ec:	e7aa      	b.n	8003244 <UI_GetReg+0x220>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80032ee:	6902      	ldr	r2, [r0, #16]
 80032f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032f4:	0f1a      	lsrs	r2, r3, #28
 80032f6:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032f8:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80032fc:	f000 815e 	beq.w	80035bc <UI_GetReg+0x598>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003300:	2b09      	cmp	r3, #9
 8003302:	d19e      	bne.n	8003242 <UI_GetReg+0x21e>
        pSPD = pMCT->pSpeedSensorAux;
 8003304:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003306:	2800      	cmp	r0, #0
 8003308:	d09b      	beq.n	8003242 <UI_GetReg+0x21e>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 800330a:	f005 fadf 	bl	80088cc <STO_PLL_GetEstimatedCurrent>
 800330e:	1400      	asrs	r0, r0, #16
 8003310:	e798      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8003312:	4628      	mov	r0, r5
 8003314:	f7fd fd5a 	bl	8000dcc <MCI_GetIalphabeta>
 8003318:	1400      	asrs	r0, r0, #16
    break;
 800331a:	e793      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 800331c:	4628      	mov	r0, r5
 800331e:	f7fd fd55 	bl	8000dcc <MCI_GetIalphabeta>
 8003322:	b200      	sxth	r0, r0
    break;
 8003324:	e78e      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8003326:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003328:	f003 faf6 	bl	8006918 <MPM_GetAvrgElMotorPowerW>
    break;
 800332c:	e78a      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 800332e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003330:	f003 fb36 	bl	80069a0 <NTC_GetAvTemp_C>
    break;
 8003334:	e786      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8003336:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003338:	f003 fa58 	bl	80067ec <VBS_GetAvBusVoltage_V>
    break;
 800333c:	e782      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = MCI_GetIab(pMCI).a;
 800333e:	4628      	mov	r0, r5
 8003340:	f7fd fd36 	bl	8000db0 <MCI_GetIab>
 8003344:	b200      	sxth	r0, r0
    break;
 8003346:	e77d      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = MCI_GetIab(pMCI).b;
 8003348:	4628      	mov	r0, r5
 800334a:	f7fd fd31 	bl	8000db0 <MCI_GetIab>
 800334e:	1400      	asrs	r0, r0, #16
    break;
 8003350:	e778      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8003352:	4628      	mov	r0, r5
 8003354:	f7fd fd20 	bl	8000d98 <MCI_GetAvrgMecSpeedUnit>
 8003358:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800335c:	0040      	lsls	r0, r0, #1
    break;
 800335e:	e771      	b.n	8003244 <UI_GetReg+0x220>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003360:	6902      	ldr	r2, [r0, #16]
 8003362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003366:	0f1a      	lsrs	r2, r3, #28
 8003368:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800336a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800336e:	f000 8117 	beq.w	80035a0 <UI_GetReg+0x57c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003372:	2b09      	cmp	r3, #9
 8003374:	f000 810b 	beq.w	800358e <UI_GetReg+0x56a>
      bRetVal = (int32_t)hIgain;
 8003378:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
    break;
 800337c:	e762      	b.n	8003244 <UI_GetReg+0x220>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800337e:	6902      	ldr	r2, [r0, #16]
 8003380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003384:	0f1a      	lsrs	r2, r3, #28
 8003386:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003388:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800338c:	f000 810c 	beq.w	80035a8 <UI_GetReg+0x584>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003390:	2b09      	cmp	r3, #9
 8003392:	d1f1      	bne.n	8003378 <UI_GetReg+0x354>
        pSPD = pMCT->pSpeedSensorAux;
 8003394:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003396:	2800      	cmp	r0, #0
 8003398:	d0ee      	beq.n	8003378 <UI_GetReg+0x354>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 800339a:	aa0f      	add	r2, sp, #60	; 0x3c
 800339c:	a90e      	add	r1, sp, #56	; 0x38
 800339e:	f005 faa9 	bl	80088f4 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC2;
 80033a2:	e7e9      	b.n	8003378 <UI_GetReg+0x354>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80033a4:	6902      	ldr	r2, [r0, #16]
 80033a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033aa:	0f1a      	lsrs	r2, r3, #28
 80033ac:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033ae:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033b2:	f000 811f 	beq.w	80035f4 <UI_GetReg+0x5d0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033b6:	2b09      	cmp	r3, #9
 80033b8:	f47f af6c 	bne.w	8003294 <UI_GetReg+0x270>
        pSPD = pMCT->pSpeedSensorAux;
 80033bc:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80033be:	2800      	cmp	r0, #0
 80033c0:	f43f af68 	beq.w	8003294 <UI_GetReg+0x270>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80033c4:	aa0f      	add	r2, sp, #60	; 0x3c
 80033c6:	a90e      	add	r1, sp, #56	; 0x38
 80033c8:	f005 fa94 	bl	80088f4 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC1;
 80033cc:	e762      	b.n	8003294 <UI_GetReg+0x270>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 80033ce:	68a0      	ldr	r0, [r4, #8]
 80033d0:	f003 fb08 	bl	80069e4 <PID_GetKP>
    break;
 80033d4:	e736      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 80033d6:	6860      	ldr	r0, [r4, #4]
 80033d8:	f003 fb04 	bl	80069e4 <PID_GetKP>
    break;
 80033dc:	e732      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 80033de:	6860      	ldr	r0, [r4, #4]
 80033e0:	f003 fb10 	bl	8006a04 <PID_GetKD>
    break;
 80033e4:	e72e      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 80033e6:	6860      	ldr	r0, [r4, #4]
 80033e8:	f003 fb00 	bl	80069ec <PID_GetKI>
    break;
 80033ec:	e72a      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 80033ee:	4628      	mov	r0, r5
 80033f0:	f7fd fd24 	bl	8000e3c <MCI_GetValphabeta>
 80033f4:	b200      	sxth	r0, r0
    break;
 80033f6:	e725      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = MCI_GetVqd(pMCI).d;
 80033f8:	4628      	mov	r0, r5
 80033fa:	f7fd fd11 	bl	8000e20 <MCI_GetVqd>
 80033fe:	1400      	asrs	r0, r0, #16
    break;
 8003400:	e720      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8003402:	68a0      	ldr	r0, [r4, #8]
 8003404:	f003 fafe 	bl	8006a04 <PID_GetKD>
    break;
 8003408:	e71c      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 800340a:	68a0      	ldr	r0, [r4, #8]
 800340c:	f003 faee 	bl	80069ec <PID_GetKI>
    break;
 8003410:	e718      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8003412:	6820      	ldr	r0, [r4, #0]
 8003414:	f003 faf6 	bl	8006a04 <PID_GetKD>
    break;
 8003418:	e714      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 800341a:	6820      	ldr	r0, [r4, #0]
 800341c:	f003 fae6 	bl	80069ec <PID_GetKI>
    break;
 8003420:	e710      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8003422:	6820      	ldr	r0, [r4, #0]
 8003424:	f003 fade 	bl	80069e4 <PID_GetKP>
    break;
 8003428:	e70c      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 800342a:	4628      	mov	r0, r5
 800342c:	f7fd fcbc 	bl	8000da8 <MCI_GetMecSpeedRefUnit>
 8003430:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003434:	0040      	lsls	r0, r0, #1
    break;
 8003436:	e705      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8003438:	4628      	mov	r0, r5
 800343a:	f7fd fc7d 	bl	8000d38 <MCI_GetControlMode>
    break;
 800343e:	e701      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8003440:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003442:	f004 ffb3 	bl	80083ac <STM_GetState>
	break;
 8003446:	e6fd      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003448:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 800344a:	b011      	add	sp, #68	; 0x44
 800344c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003450:	f004 bfba 	b.w	80083c8 <STM_GetFaultState>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8003454:	f7ff fc74 	bl	8002d40 <UI_GetSelectedMC>
    break;
 8003458:	e6f4      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 800345a:	6820      	ldr	r0, [r4, #0]
 800345c:	f003 face 	bl	80069fc <PID_GetKIDivisor>
    break;
 8003460:	e6f0      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8003462:	6820      	ldr	r0, [r4, #0]
 8003464:	f003 fac8 	bl	80069f8 <PID_GetKPDivisor>
    break;
 8003468:	e6ec      	b.n	8003244 <UI_GetReg+0x220>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 800346a:	4628      	mov	r0, r5
 800346c:	f7fd fc64 	bl	8000d38 <MCI_GetControlMode>
 8003470:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8003472:	4628      	mov	r0, r5
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8003474:	f000 80c3 	beq.w	80035fe <UI_GetReg+0x5da>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8003478:	f7fd fc96 	bl	8000da8 <MCI_GetMecSpeedRefUnit>
 800347c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003480:	0040      	lsls	r0, r0, #1
 8003482:	e6df      	b.n	8003244 <UI_GetReg+0x220>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003484:	6902      	ldr	r2, [r0, #16]
 8003486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800348a:	0f1a      	lsrs	r2, r3, #28
 800348c:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800348e:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003492:	f000 808e 	beq.w	80035b2 <UI_GetReg+0x58e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003496:	2b09      	cmp	r3, #9
 8003498:	f47f aed3 	bne.w	8003242 <UI_GetReg+0x21e>
        pSPD = pMCT->pSpeedSensorAux;
 800349c:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 800349e:	2800      	cmp	r0, #0
 80034a0:	f43f aecf 	beq.w	8003242 <UI_GetReg+0x21e>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 80034a4:	f005 fa12 	bl	80088cc <STO_PLL_GetEstimatedCurrent>
 80034a8:	b200      	sxth	r0, r0
 80034aa:	e6cb      	b.n	8003244 <UI_GetReg+0x220>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80034ac:	6902      	ldr	r2, [r0, #16]
 80034ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034b2:	0f1a      	lsrs	r2, r3, #28
 80034b4:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034b6:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034ba:	f000 8096 	beq.w	80035ea <UI_GetReg+0x5c6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034be:	2b09      	cmp	r3, #9
 80034c0:	f47f aebf 	bne.w	8003242 <UI_GetReg+0x21e>
        pSPD = pMCT->pSpeedSensorAux;
 80034c4:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80034c6:	2800      	cmp	r0, #0
 80034c8:	f43f aebb 	beq.w	8003242 <UI_GetReg+0x21e>
        bRetVal = SPD_GetElAngle(pSPD);
 80034cc:	f004 fdb8 	bl	8008040 <SPD_GetElAngle>
 80034d0:	e6b8      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 80034d2:	4628      	mov	r0, r5
 80034d4:	f7fd fcb2 	bl	8000e3c <MCI_GetValphabeta>
 80034d8:	1400      	asrs	r0, r0, #16
    break;
 80034da:	e6b3      	b.n	8003244 <UI_GetReg+0x220>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80034dc:	6902      	ldr	r2, [r0, #16]
 80034de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034e2:	0f1a      	lsrs	r2, r3, #28
 80034e4:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034e6:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034ea:	d04c      	beq.n	8003586 <UI_GetReg+0x562>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034ec:	2b09      	cmp	r3, #9
 80034ee:	f47f aea8 	bne.w	8003242 <UI_GetReg+0x21e>
        pSPD = pMCT->pSpeedSensorAux;
 80034f2:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80034f4:	2800      	cmp	r0, #0
 80034f6:	f43f aea4 	beq.w	8003242 <UI_GetReg+0x21e>
        bRetVal = SPD_GetS16Speed(pSPD);
 80034fa:	f004 fddb 	bl	80080b4 <SPD_GetS16Speed>
 80034fe:	e6a1      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = (int32_t)(MC_UID);
 8003500:	4844      	ldr	r0, [pc, #272]	; (8003614 <UI_GetReg+0x5f0>)
 8003502:	e69f      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8003504:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003506:	f004 fe99 	bl	800823c <STC_GetMinAppNegativeMecSpeedUnit>
 800350a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800350e:	0040      	lsls	r0, r0, #1
    break;
 8003510:	e698      	b.n	8003244 <UI_GetReg+0x220>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003512:	6902      	ldr	r2, [r0, #16]
 8003514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003518:	0f1a      	lsrs	r2, r3, #28
 800351a:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800351c:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003520:	d02d      	beq.n	800357e <UI_GetReg+0x55a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003522:	2b09      	cmp	r3, #9
 8003524:	f47f ae8d 	bne.w	8003242 <UI_GetReg+0x21e>
        pSPD = pMCT->pSpeedSensorAux;
 8003528:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 800352a:	2800      	cmp	r0, #0
 800352c:	f43f ae89 	beq.w	8003242 <UI_GetReg+0x21e>
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8003530:	f005 fa16 	bl	8008960 <STO_PLL_GetObservedBemfLevel>
 8003534:	1400      	asrs	r0, r0, #16
 8003536:	e685      	b.n	8003244 <UI_GetReg+0x220>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003538:	6902      	ldr	r2, [r0, #16]
 800353a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800353e:	0f1a      	lsrs	r2, r3, #28
 8003540:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003542:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003546:	d016      	beq.n	8003576 <UI_GetReg+0x552>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003548:	2b09      	cmp	r3, #9
 800354a:	f47f ae7a 	bne.w	8003242 <UI_GetReg+0x21e>
        pSPD = pMCT->pSpeedSensorAux;
 800354e:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003550:	2800      	cmp	r0, #0
 8003552:	f43f ae76 	beq.w	8003242 <UI_GetReg+0x21e>
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8003556:	f005 f9ff 	bl	8008958 <STO_PLL_GetEstimatedBemfLevel>
 800355a:	1400      	asrs	r0, r0, #16
 800355c:	e672      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 800355e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003560:	f004 fe6a 	bl	8008238 <STC_GetMaxAppPositiveMecSpeedUnit>
 8003564:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003568:	0040      	lsls	r0, r0, #1
    break;
 800356a:	e66b      	b.n	8003244 <UI_GetReg+0x220>
      bRetVal = MCI_GetVqd(pMCI).q;
 800356c:	4628      	mov	r0, r5
 800356e:	f7fd fc57 	bl	8000e20 <MCI_GetVqd>
 8003572:	b200      	sxth	r0, r0
    break;
 8003574:	e666      	b.n	8003244 <UI_GetReg+0x220>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003576:	2b09      	cmp	r3, #9
 8003578:	d0e9      	beq.n	800354e <UI_GetReg+0x52a>
        pSPD = pMCT->pSpeedSensorMain;
 800357a:	69a0      	ldr	r0, [r4, #24]
 800357c:	e7e8      	b.n	8003550 <UI_GetReg+0x52c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800357e:	2b09      	cmp	r3, #9
 8003580:	d0d2      	beq.n	8003528 <UI_GetReg+0x504>
        pSPD = pMCT->pSpeedSensorMain;
 8003582:	69a0      	ldr	r0, [r4, #24]
 8003584:	e7d1      	b.n	800352a <UI_GetReg+0x506>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003586:	2b09      	cmp	r3, #9
 8003588:	d0b3      	beq.n	80034f2 <UI_GetReg+0x4ce>
        pSPD = pMCT->pSpeedSensorMain;
 800358a:	69a0      	ldr	r0, [r4, #24]
 800358c:	e7b2      	b.n	80034f4 <UI_GetReg+0x4d0>
        pSPD = pMCT->pSpeedSensorAux;
 800358e:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003590:	2800      	cmp	r0, #0
 8003592:	f43f aef1 	beq.w	8003378 <UI_GetReg+0x354>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8003596:	aa0f      	add	r2, sp, #60	; 0x3c
 8003598:	a90e      	add	r1, sp, #56	; 0x38
 800359a:	f005 f9b7 	bl	800890c <STO_GetPLLGains>
 800359e:	e6eb      	b.n	8003378 <UI_GetReg+0x354>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035a0:	2b09      	cmp	r3, #9
 80035a2:	d0f4      	beq.n	800358e <UI_GetReg+0x56a>
        pSPD = pMCT->pSpeedSensorMain;
 80035a4:	69a0      	ldr	r0, [r4, #24]
 80035a6:	e7f3      	b.n	8003590 <UI_GetReg+0x56c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035a8:	2b09      	cmp	r3, #9
 80035aa:	f43f aef3 	beq.w	8003394 <UI_GetReg+0x370>
        pSPD = pMCT->pSpeedSensorMain;
 80035ae:	69a0      	ldr	r0, [r4, #24]
 80035b0:	e6f1      	b.n	8003396 <UI_GetReg+0x372>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035b2:	2b09      	cmp	r3, #9
 80035b4:	f43f af72 	beq.w	800349c <UI_GetReg+0x478>
        pSPD = pMCT->pSpeedSensorMain;
 80035b8:	69a0      	ldr	r0, [r4, #24]
 80035ba:	e770      	b.n	800349e <UI_GetReg+0x47a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035bc:	2b09      	cmp	r3, #9
 80035be:	f43f aea1 	beq.w	8003304 <UI_GetReg+0x2e0>
        pSPD = pMCT->pSpeedSensorMain;
 80035c2:	69a0      	ldr	r0, [r4, #24]
 80035c4:	e69f      	b.n	8003306 <UI_GetReg+0x2e2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035c6:	2b09      	cmp	r3, #9
 80035c8:	f43f ae78 	beq.w	80032bc <UI_GetReg+0x298>
       pSPD = pMCT->pSpeedSensorMain;
 80035cc:	69a0      	ldr	r0, [r4, #24]
 80035ce:	e676      	b.n	80032be <UI_GetReg+0x29a>
        pSPD = pMCT->pSpeedSensorAux;
 80035d0:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80035d2:	2800      	cmp	r0, #0
 80035d4:	f43f ae5e 	beq.w	8003294 <UI_GetReg+0x270>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80035d8:	aa0f      	add	r2, sp, #60	; 0x3c
 80035da:	a90e      	add	r1, sp, #56	; 0x38
 80035dc:	f005 f996 	bl	800890c <STO_GetPLLGains>
 80035e0:	e658      	b.n	8003294 <UI_GetReg+0x270>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035e2:	2b09      	cmp	r3, #9
 80035e4:	d0f4      	beq.n	80035d0 <UI_GetReg+0x5ac>
        pSPD = pMCT->pSpeedSensorMain;
 80035e6:	69a0      	ldr	r0, [r4, #24]
 80035e8:	e7f3      	b.n	80035d2 <UI_GetReg+0x5ae>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035ea:	2b09      	cmp	r3, #9
 80035ec:	f43f af6a 	beq.w	80034c4 <UI_GetReg+0x4a0>
        pSPD = pMCT->pSpeedSensorMain;
 80035f0:	69a0      	ldr	r0, [r4, #24]
 80035f2:	e768      	b.n	80034c6 <UI_GetReg+0x4a2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035f4:	2b09      	cmp	r3, #9
 80035f6:	f43f aee1 	beq.w	80033bc <UI_GetReg+0x398>
        pSPD = pMCT->pSpeedSensorMain;
 80035fa:	69a0      	ldr	r0, [r4, #24]
 80035fc:	e6df      	b.n	80033be <UI_GetReg+0x39a>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80035fe:	f7fd fbbf 	bl	8000d80 <MCI_GetLastRampFinalSpeed>
 8003602:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003606:	0040      	lsls	r0, r0, #1
 8003608:	e61c      	b.n	8003244 <UI_GetReg+0x220>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800360a:	2b09      	cmp	r3, #9
 800360c:	f43f ae68 	beq.w	80032e0 <UI_GetReg+0x2bc>
        pSPD = pMCT->pSpeedSensorMain;
 8003610:	69a0      	ldr	r0, [r4, #24]
 8003612:	e666      	b.n	80032e2 <UI_GetReg+0x2be>
 8003614:	34a6847a 	.word	0x34a6847a

08003618 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8003618:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800361a:	6883      	ldr	r3, [r0, #8]
 800361c:	7d02      	ldrb	r2, [r0, #20]

  switch (bCmdID)
 800361e:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003620:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 8003624:	290d      	cmp	r1, #13
 8003626:	d808      	bhi.n	800363a <UI_ExecCmd+0x22>
 8003628:	e8df f001 	tbb	[pc, r1]
 800362c:	0e091419 	.word	0x0e091419
 8003630:	231e100e 	.word	0x231e100e
 8003634:	07070728 	.word	0x07070728
 8003638:	1407      	.short	0x1407
 800363a:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 800363c:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 800363e:	4620      	mov	r0, r4
 8003640:	f7fd fb76 	bl	8000d30 <MCI_GetSTMState>
 8003644:	2806      	cmp	r0, #6
 8003646:	d01e      	beq.n	8003686 <UI_ExecCmd+0x6e>
  bool retVal = true;
 8003648:	2001      	movs	r0, #1
}
 800364a:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 800364c:	4620      	mov	r0, r4
 800364e:	f7fd fb6f 	bl	8000d30 <MCI_GetSTMState>
 8003652:	b120      	cbz	r0, 800365e <UI_ExecCmd+0x46>
        MCI_StopMotor(pMCI);
 8003654:	4620      	mov	r0, r4
 8003656:	f7fd fb23 	bl	8000ca0 <MCI_StopMotor>
  bool retVal = true;
 800365a:	2001      	movs	r0, #1
}
 800365c:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 800365e:	4620      	mov	r0, r4
 8003660:	f7fd fb14 	bl	8000c8c <MCI_StartMotor>
  bool retVal = true;
 8003664:	2001      	movs	r0, #1
}
 8003666:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8003668:	4620      	mov	r0, r4
 800366a:	f7fd fb1d 	bl	8000ca8 <MCI_FaultAcknowledged>
  bool retVal = true;
 800366e:	2001      	movs	r0, #1
}
 8003670:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8003672:	4620      	mov	r0, r4
 8003674:	f7fd fb1c 	bl	8000cb0 <MCI_EncoderAlign>
  bool retVal = true;
 8003678:	2001      	movs	r0, #1
}
 800367a:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 800367c:	4620      	mov	r0, r4
 800367e:	f7fd fbf9 	bl	8000e74 <MCI_Clear_Iqdref>
  bool retVal = true;
 8003682:	2001      	movs	r0, #1
}
 8003684:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 8003686:	4620      	mov	r0, r4
 8003688:	f7fd fb82 	bl	8000d90 <MCI_StopRamp>
  bool retVal = true;
 800368c:	2001      	movs	r0, #1
}
 800368e:	bd10      	pop	{r4, pc}

08003690 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8003690:	b508      	push	{r3, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8003692:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003694:	f890 c014 	ldrb.w	ip, [r0, #20]
 8003698:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800369a:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 800369e:	fb83 c301 	smull	ip, r3, r3, r1
 80036a2:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 80036a6:	b209      	sxth	r1, r1
 80036a8:	f7fd fad2 	bl	8000c50 <MCI_ExecSpeedRamp>
  return true;
}
 80036ac:	2001      	movs	r0, #1
 80036ae:	bd08      	pop	{r3, pc}
 80036b0:	2aaaaaab 	.word	0x2aaaaaab

080036b4 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 80036b4:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80036b6:	6883      	ldr	r3, [r0, #8]
 80036b8:	f890 c014 	ldrb.w	ip, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 80036bc:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80036c0:	f7fd fad0 	bl	8000c64 <MCI_ExecTorqueRamp>
  return true;
}
 80036c4:	2001      	movs	r0, #1
 80036c6:	bd08      	pop	{r3, pc}

080036c8 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 80036c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ca:	4617      	mov	r7, r2
 80036cc:	461e      	mov	r6, r3
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80036ce:	7d02      	ldrb	r2, [r0, #20]
 80036d0:	68c3      	ldr	r3, [r0, #12]
 80036d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036d6:	695c      	ldr	r4, [r3, #20]
  if (pRevupCtrl)
 80036d8:	b18c      	cbz	r4, 80036fe <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80036da:	4620      	mov	r0, r4
 80036dc:	460d      	mov	r5, r1
 80036de:	f004 fc95 	bl	800800c <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80036e2:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80036e4:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80036e6:	4620      	mov	r0, r4
 80036e8:	f004 fc96 	bl	8008018 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80036ec:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80036ee:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80036f0:	4620      	mov	r0, r4
 80036f2:	f004 fc99 	bl	8008028 <RUC_GetPhaseFinalTorque>
 80036f6:	9b06      	ldr	r3, [sp, #24]
 80036f8:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 80036fa:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 80036fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 80036fe:	4620      	mov	r0, r4
}
 8003700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003702:	bf00      	nop

08003704 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	461d      	mov	r5, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003708:	7d06      	ldrb	r6, [r0, #20]
 800370a:	68c3      	ldr	r3, [r0, #12]
{
 800370c:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800370e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
{
 8003712:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003716:	6958      	ldr	r0, [r3, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8003718:	9001      	str	r0, [sp, #4]
{
 800371a:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 800371c:	f004 fc64 	bl	8007fe8 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8003720:	9801      	ldr	r0, [sp, #4]
 8003722:	462a      	mov	r2, r5
 8003724:	4621      	mov	r1, r4
 8003726:	f004 fc65 	bl	8007ff4 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 800372a:	9801      	ldr	r0, [sp, #4]
 800372c:	4632      	mov	r2, r6
 800372e:	4621      	mov	r1, r4
 8003730:	f004 fc66 	bl	8008000 <RUC_SetPhaseFinalTorque>
  return true;
}
 8003734:	2001      	movs	r0, #1
 8003736:	b002      	add	sp, #8
 8003738:	bd70      	pop	{r4, r5, r6, pc}
 800373a:	bf00      	nop

0800373c <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 800373c:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800373e:	f890 c014 	ldrb.w	ip, [r0, #20]
 8003742:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 8003744:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 8003748:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 800374c:	9901      	ldr	r1, [sp, #4]
 800374e:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
}
 8003752:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 8003754:	f7fd ba90 	b.w	8000c78 <MCI_SetCurrentReferences>

08003758 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8003758:	2000      	movs	r0, #0
 800375a:	4770      	bx	lr

0800375c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800375c:	4a03      	ldr	r2, [pc, #12]	; (800376c <SystemInit+0x10>)
 800375e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003762:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003766:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800376a:	4770      	bx	lr
 800376c:	e000ed00 	.word	0xe000ed00

08003770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003770:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8003772:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <HAL_InitTick+0x40>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	b90b      	cbnz	r3, 800377c <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003778:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800377a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800377c:	490d      	ldr	r1, [pc, #52]	; (80037b4 <HAL_InitTick+0x44>)
 800377e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003782:	4605      	mov	r5, r0
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	6808      	ldr	r0, [r1, #0]
 800378a:	fbb0 f0f3 	udiv	r0, r0, r3
 800378e:	f001 f833 	bl	80047f8 <HAL_SYSTICK_Config>
 8003792:	4604      	mov	r4, r0
 8003794:	2800      	cmp	r0, #0
 8003796:	d1ef      	bne.n	8003778 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003798:	2d0f      	cmp	r5, #15
 800379a:	d8ed      	bhi.n	8003778 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800379c:	4602      	mov	r2, r0
 800379e:	4629      	mov	r1, r5
 80037a0:	f04f 30ff 	mov.w	r0, #4294967295
 80037a4:	f000 ffdc 	bl	8004760 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037a8:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <HAL_InitTick+0x48>)
 80037aa:	4620      	mov	r0, r4
 80037ac:	601d      	str	r5, [r3, #0]
}
 80037ae:	bd38      	pop	{r3, r4, r5, pc}
 80037b0:	20000698 	.word	0x20000698
 80037b4:	20000694 	.word	0x20000694
 80037b8:	2000069c 	.word	0x2000069c

080037bc <HAL_Init>:
{
 80037bc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037be:	2003      	movs	r0, #3
 80037c0:	f000 ffbc 	bl	800473c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037c4:	2004      	movs	r0, #4
 80037c6:	f7ff ffd3 	bl	8003770 <HAL_InitTick>
 80037ca:	b110      	cbz	r0, 80037d2 <HAL_Init+0x16>
    status = HAL_ERROR;
 80037cc:	2401      	movs	r4, #1
}
 80037ce:	4620      	mov	r0, r4
 80037d0:	bd10      	pop	{r4, pc}
 80037d2:	4604      	mov	r4, r0
    HAL_MspInit();
 80037d4:	f7fe fed6 	bl	8002584 <HAL_MspInit>
}
 80037d8:	4620      	mov	r0, r4
 80037da:	bd10      	pop	{r4, pc}

080037dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80037dc:	4a03      	ldr	r2, [pc, #12]	; (80037ec <HAL_IncTick+0x10>)
 80037de:	4904      	ldr	r1, [pc, #16]	; (80037f0 <HAL_IncTick+0x14>)
 80037e0:	6813      	ldr	r3, [r2, #0]
 80037e2:	6809      	ldr	r1, [r1, #0]
 80037e4:	440b      	add	r3, r1
 80037e6:	6013      	str	r3, [r2, #0]
}
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	20000be0 	.word	0x20000be0
 80037f0:	20000698 	.word	0x20000698

080037f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80037f4:	4b01      	ldr	r3, [pc, #4]	; (80037fc <HAL_GetTick+0x8>)
 80037f6:	6818      	ldr	r0, [r3, #0]
}
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20000be0 	.word	0x20000be0

08003800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003800:	b538      	push	{r3, r4, r5, lr}
 8003802:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003804:	f7ff fff6 	bl	80037f4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003808:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800380a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800380c:	d002      	beq.n	8003814 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800380e:	4b04      	ldr	r3, [pc, #16]	; (8003820 <HAL_Delay+0x20>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003814:	f7ff ffee 	bl	80037f4 <HAL_GetTick>
 8003818:	1b43      	subs	r3, r0, r5
 800381a:	42a3      	cmp	r3, r4
 800381c:	d3fa      	bcc.n	8003814 <HAL_Delay+0x14>
  {
  }
}
 800381e:	bd38      	pop	{r3, r4, r5, pc}
 8003820:	20000698 	.word	0x20000698

08003824 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003824:	b530      	push	{r4, r5, lr}
 8003826:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003828:	2300      	movs	r3, #0
 800382a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800382c:	2800      	cmp	r0, #0
 800382e:	f000 80c9 	beq.w	80039c4 <HAL_ADC_Init+0x1a0>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003832:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8003834:	4604      	mov	r4, r0
 8003836:	2d00      	cmp	r5, #0
 8003838:	f000 8092 	beq.w	8003960 <HAL_ADC_Init+0x13c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800383c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800383e:	6893      	ldr	r3, [r2, #8]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	d505      	bpl.n	8003850 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003844:	6893      	ldr	r3, [r2, #8]
 8003846:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800384a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800384e:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003850:	6893      	ldr	r3, [r2, #8]
 8003852:	00dd      	lsls	r5, r3, #3
 8003854:	d419      	bmi.n	800388a <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003856:	4b70      	ldr	r3, [pc, #448]	; (8003a18 <HAL_ADC_Init+0x1f4>)
 8003858:	4870      	ldr	r0, [pc, #448]	; (8003a1c <HAL_ADC_Init+0x1f8>)
 800385a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800385c:	6891      	ldr	r1, [r2, #8]
 800385e:	099b      	lsrs	r3, r3, #6
 8003860:	fba0 0303 	umull	r0, r3, r0, r3
 8003864:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8003868:	099b      	lsrs	r3, r3, #6
 800386a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800386e:	3301      	adds	r3, #1
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003876:	6091      	str	r1, [r2, #8]
 8003878:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800387a:	9b01      	ldr	r3, [sp, #4]
 800387c:	b12b      	cbz	r3, 800388a <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 800387e:	9b01      	ldr	r3, [sp, #4]
 8003880:	3b01      	subs	r3, #1
 8003882:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003884:	9b01      	ldr	r3, [sp, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f9      	bne.n	800387e <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800388a:	6893      	ldr	r3, [r2, #8]
 800388c:	00d8      	lsls	r0, r3, #3
 800388e:	d459      	bmi.n	8003944 <HAL_ADC_Init+0x120>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003890:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003892:	f043 0310 	orr.w	r3, r3, #16
 8003896:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003898:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800389a:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800389c:	4303      	orrs	r3, r0
 800389e:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038a0:	6893      	ldr	r3, [r2, #8]
 80038a2:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80038a8:	d153      	bne.n	8003952 <HAL_ADC_Init+0x12e>
 80038aa:	06d9      	lsls	r1, r3, #27
 80038ac:	d451      	bmi.n	8003952 <HAL_ADC_Init+0x12e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038ae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80038b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80038b4:	f043 0302 	orr.w	r3, r3, #2
 80038b8:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038ba:	6893      	ldr	r3, [r2, #8]
 80038bc:	07db      	lsls	r3, r3, #31
 80038be:	d40e      	bmi.n	80038de <HAL_ADC_Init+0xba>
 80038c0:	4b57      	ldr	r3, [pc, #348]	; (8003a20 <HAL_ADC_Init+0x1fc>)
 80038c2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80038c6:	6889      	ldr	r1, [r1, #8]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	430b      	orrs	r3, r1
 80038cc:	07dd      	lsls	r5, r3, #31
 80038ce:	d406      	bmi.n	80038de <HAL_ADC_Init+0xba>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80038d0:	4954      	ldr	r1, [pc, #336]	; (8003a24 <HAL_ADC_Init+0x200>)
 80038d2:	6865      	ldr	r5, [r4, #4]
 80038d4:	688b      	ldr	r3, [r1, #8]
 80038d6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80038da:	432b      	orrs	r3, r5
 80038dc:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80038de:	68e5      	ldr	r5, [r4, #12]
 80038e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80038e2:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 80038e6:	432b      	orrs	r3, r5
 80038e8:	68a5      	ldr	r5, [r4, #8]
 80038ea:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038ec:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038ee:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 80038f0:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038f8:	d05f      	beq.n	80039ba <HAL_ADC_Init+0x196>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80038fc:	b121      	cbz	r1, 8003908 <HAL_ADC_Init+0xe4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80038fe:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003900:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003904:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003906:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003908:	68d5      	ldr	r5, [r2, #12]
 800390a:	4947      	ldr	r1, [pc, #284]	; (8003a28 <HAL_ADC_Init+0x204>)
 800390c:	4029      	ands	r1, r5
 800390e:	4319      	orrs	r1, r3
 8003910:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003912:	6913      	ldr	r3, [r2, #16]
 8003914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003916:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800391a:	430b      	orrs	r3, r1
 800391c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800391e:	6893      	ldr	r3, [r2, #8]
 8003920:	0759      	lsls	r1, r3, #29
 8003922:	d523      	bpl.n	800396c <HAL_ADC_Init+0x148>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003924:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003926:	6963      	ldr	r3, [r4, #20]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d04e      	beq.n	80039ca <HAL_ADC_Init+0x1a6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800392c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800392e:	f023 030f 	bic.w	r3, r3, #15
 8003932:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003934:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003936:	f023 0303 	bic.w	r3, r3, #3
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003940:	b003      	add	sp, #12
 8003942:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003944:	6893      	ldr	r3, [r2, #8]
 8003946:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800394a:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800394e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003950:	d0ab      	beq.n	80038aa <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003952:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8003954:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003956:	f043 0310 	orr.w	r3, r3, #16
 800395a:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800395c:	b003      	add	sp, #12
 800395e:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8003960:	f7fe fe2a 	bl	80025b8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003964:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8003966:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 800396a:	e767      	b.n	800383c <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800396c:	6893      	ldr	r3, [r2, #8]
 800396e:	071b      	lsls	r3, r3, #28
 8003970:	d4d9      	bmi.n	8003926 <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003972:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003974:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003978:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800397a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800397e:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003980:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003984:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003988:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 800398a:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800398c:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800398e:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8003990:	bb19      	cbnz	r1, 80039da <HAL_ADC_Init+0x1b6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003996:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003998:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800399c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80039a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039a4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 80039a8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d021      	beq.n	80039f4 <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80039b0:	6913      	ldr	r3, [r2, #16]
 80039b2:	f023 0301 	bic.w	r3, r3, #1
 80039b6:	6113      	str	r3, [r2, #16]
 80039b8:	e7b5      	b.n	8003926 <HAL_ADC_Init+0x102>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80039bc:	3901      	subs	r1, #1
 80039be:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80039c2:	e79a      	b.n	80038fa <HAL_ADC_Init+0xd6>
    return HAL_ERROR;
 80039c4:	2001      	movs	r0, #1
}
 80039c6:	b003      	add	sp, #12
 80039c8:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80039ca:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80039cc:	6a23      	ldr	r3, [r4, #32]
 80039ce:	f021 010f 	bic.w	r1, r1, #15
 80039d2:	3b01      	subs	r3, #1
 80039d4:	430b      	orrs	r3, r1
 80039d6:	6313      	str	r3, [r2, #48]	; 0x30
 80039d8:	e7ac      	b.n	8003934 <HAL_ADC_Init+0x110>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80039da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039de:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80039e0:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80039e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80039e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039ec:	430b      	orrs	r3, r1
 80039ee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80039f2:	e7d9      	b.n	80039a8 <HAL_ADC_Init+0x184>
        MODIFY_REG(hadc->Instance->CFGR2,
 80039f4:	6911      	ldr	r1, [r2, #16]
 80039f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80039f8:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80039fa:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 80039fe:	f021 0104 	bic.w	r1, r1, #4
 8003a02:	432b      	orrs	r3, r5
 8003a04:	430b      	orrs	r3, r1
 8003a06:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	6113      	str	r3, [r2, #16]
 8003a14:	e787      	b.n	8003926 <HAL_ADC_Init+0x102>
 8003a16:	bf00      	nop
 8003a18:	20000694 	.word	0x20000694
 8003a1c:	053e2d63 	.word	0x053e2d63
 8003a20:	50000100 	.word	0x50000100
 8003a24:	50000300 	.word	0x50000300
 8003a28:	fff04007 	.word	0xfff04007

08003a2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a2e:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8003a32:	b083      	sub	sp, #12
 8003a34:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003a36:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8003a38:	f04f 0000 	mov.w	r0, #0
 8003a3c:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003a3e:	f000 8141 	beq.w	8003cc4 <HAL_ADC_ConfigChannel+0x298>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a42:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8003a44:	2001      	movs	r0, #1
 8003a46:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a4a:	68a2      	ldr	r2, [r4, #8]
 8003a4c:	0756      	lsls	r6, r2, #29
 8003a4e:	d44c      	bmi.n	8003aea <HAL_ADC_ConfigChannel+0xbe>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a50:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(*preg,
 8003a52:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003a54:	ea4f 1c90 	mov.w	ip, r0, lsr #6
 8003a58:	f00c 0c0c 	and.w	ip, ip, #12
 8003a5c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  MODIFY_REG(*preg,
 8003a60:	f000 001f 	and.w	r0, r0, #31
 8003a64:	f85e 500c 	ldr.w	r5, [lr, ip]
 8003a68:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8003a6c:	261f      	movs	r6, #31
 8003a6e:	4082      	lsls	r2, r0
 8003a70:	fa06 f000 	lsl.w	r0, r6, r0
 8003a74:	ea25 0000 	bic.w	r0, r5, r0
 8003a78:	4302      	orrs	r2, r0
 8003a7a:	f84e 200c 	str.w	r2, [lr, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a7e:	68a2      	ldr	r2, [r4, #8]
 8003a80:	0755      	lsls	r5, r2, #29
 8003a82:	d543      	bpl.n	8003b0c <HAL_ADC_ConfigChannel+0xe0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a84:	68a2      	ldr	r2, [r4, #8]
 8003a86:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a88:	68a2      	ldr	r2, [r4, #8]
 8003a8a:	f012 0f01 	tst.w	r2, #1
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003a8e:	4602      	mov	r2, r0
 8003a90:	d10c      	bne.n	8003aac <HAL_ADC_ConfigChannel+0x80>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003a92:	4dbf      	ldr	r5, [pc, #764]	; (8003d90 <HAL_ADC_ConfigChannel+0x364>)
 8003a94:	68ce      	ldr	r6, [r1, #12]
 8003a96:	42ae      	cmp	r6, r5
 8003a98:	f000 80bc 	beq.w	8003c14 <HAL_ADC_ConfigChannel+0x1e8>
    CLEAR_BIT(ADCx->DIFSEL,
 8003a9c:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8003aa0:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8003aa4:	ea21 0100 	bic.w	r1, r1, r0
 8003aa8:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003aac:	49b9      	ldr	r1, [pc, #740]	; (8003d94 <HAL_ADC_ConfigChannel+0x368>)
 8003aae:	420a      	tst	r2, r1
 8003ab0:	d02a      	beq.n	8003b08 <HAL_ADC_ConfigChannel+0xdc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003ab2:	49b9      	ldr	r1, [pc, #740]	; (8003d98 <HAL_ADC_ConfigChannel+0x36c>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003ab4:	4db9      	ldr	r5, [pc, #740]	; (8003d9c <HAL_ADC_ConfigChannel+0x370>)
 8003ab6:	6888      	ldr	r0, [r1, #8]
 8003ab8:	42aa      	cmp	r2, r5
 8003aba:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8003abe:	d01d      	beq.n	8003afc <HAL_ADC_ConfigChannel+0xd0>
 8003ac0:	4db7      	ldr	r5, [pc, #732]	; (8003da0 <HAL_ADC_ConfigChannel+0x374>)
 8003ac2:	42aa      	cmp	r2, r5
 8003ac4:	d01a      	beq.n	8003afc <HAL_ADC_ConfigChannel+0xd0>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ac6:	4db7      	ldr	r5, [pc, #732]	; (8003da4 <HAL_ADC_ConfigChannel+0x378>)
 8003ac8:	42aa      	cmp	r2, r5
 8003aca:	f040 812d 	bne.w	8003d28 <HAL_ADC_ConfigChannel+0x2fc>
 8003ace:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003ad2:	d119      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0xdc>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ad4:	4ab4      	ldr	r2, [pc, #720]	; (8003da8 <HAL_ADC_ConfigChannel+0x37c>)
 8003ad6:	4294      	cmp	r4, r2
 8003ad8:	d016      	beq.n	8003b08 <HAL_ADC_ConfigChannel+0xdc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003ada:	688a      	ldr	r2, [r1, #8]
 8003adc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003ae0:	4332      	orrs	r2, r6
 8003ae2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003ae6:	608a      	str	r2, [r1, #8]
}
 8003ae8:	e003      	b.n	8003af2 <HAL_ADC_ConfigChannel+0xc6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003aec:	f042 0220 	orr.w	r2, r2, #32
 8003af0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003af8:	b003      	add	sp, #12
 8003afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003afc:	0202      	lsls	r2, r0, #8
 8003afe:	d403      	bmi.n	8003b08 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b00:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8003b04:	f000 80f1 	beq.w	8003cea <HAL_ADC_ConfigChannel+0x2be>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b08:	2000      	movs	r0, #0
 8003b0a:	e7f2      	b.n	8003af2 <HAL_ADC_ConfigChannel+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b0c:	68a2      	ldr	r2, [r4, #8]
 8003b0e:	0710      	lsls	r0, r2, #28
 8003b10:	d47e      	bmi.n	8003c10 <HAL_ADC_ConfigChannel+0x1e4>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003b12:	688a      	ldr	r2, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003b14:	680d      	ldr	r5, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003b16:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003b1a:	f000 8119 	beq.w	8003d50 <HAL_ADC_ConfigChannel+0x324>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b1e:	0dee      	lsrs	r6, r5, #23
 8003b20:	f104 0c14 	add.w	ip, r4, #20
 8003b24:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8003b28:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8003b2c:	f85c 0006 	ldr.w	r0, [ip, r6]
 8003b30:	2707      	movs	r7, #7
 8003b32:	40aa      	lsls	r2, r5
 8003b34:	fa07 f505 	lsl.w	r5, r7, r5
 8003b38:	ea20 0005 	bic.w	r0, r0, r5
 8003b3c:	4302      	orrs	r2, r0
 8003b3e:	f84c 2006 	str.w	r2, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b42:	6962      	ldr	r2, [r4, #20]
 8003b44:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b48:	6162      	str	r2, [r4, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b4a:	e9d1 5604 	ldrd	r5, r6, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b4e:	2d04      	cmp	r5, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b50:	68e2      	ldr	r2, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b52:	d02d      	beq.n	8003bb0 <HAL_ADC_ConfigChannel+0x184>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b54:	f104 0060 	add.w	r0, r4, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b58:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003b5c:	0052      	lsls	r2, r2, #1
  MODIFY_REG(*preg,
 8003b5e:	f850 c025 	ldr.w	ip, [r0, r5, lsl #2]
 8003b62:	4f92      	ldr	r7, [pc, #584]	; (8003dac <HAL_ADC_ConfigChannel+0x380>)
 8003b64:	4096      	lsls	r6, r2
 8003b66:	680a      	ldr	r2, [r1, #0]
 8003b68:	ea0c 0707 	and.w	r7, ip, r7
 8003b6c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003b70:	433a      	orrs	r2, r7
 8003b72:	4332      	orrs	r2, r6
 8003b74:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003b78:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b7c:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8003b7e:	698e      	ldr	r6, [r1, #24]
 8003b80:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
 8003b84:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003b88:	4332      	orrs	r2, r6
 8003b8a:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b8e:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b90:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8003b92:	f850 2026 	ldr.w	r2, [r0, r6, lsl #2]
 8003b96:	f1a5 0501 	sub.w	r5, r5, #1
 8003b9a:	fab5 f585 	clz	r5, r5
 8003b9e:	096d      	lsrs	r5, r5, #5
 8003ba0:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003ba4:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 8003ba8:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
 8003bac:	6808      	ldr	r0, [r1, #0]
}
 8003bae:	e76b      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x5c>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bb0:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003bb2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003bb4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003bb6:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bba:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bbe:	2d00      	cmp	r5, #0
 8003bc0:	f040 80fc 	bne.w	8003dbc <HAL_ADC_ConfigChannel+0x390>
 8003bc4:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bc8:	42aa      	cmp	r2, r5
 8003bca:	f000 8170 	beq.w	8003eae <HAL_ADC_ConfigChannel+0x482>
 8003bce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003bd0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bd2:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bd6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003bda:	f104 0764 	add.w	r7, r4, #100	; 0x64
 8003bde:	42ae      	cmp	r6, r5
 8003be0:	f000 8153 	beq.w	8003e8a <HAL_ADC_ConfigChannel+0x45e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003be4:	6896      	ldr	r6, [r2, #8]
 8003be6:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003be8:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003bec:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003bf0:	42ae      	cmp	r6, r5
 8003bf2:	f000 8138 	beq.w	8003e66 <HAL_ADC_ConfigChannel+0x43a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003bf6:	68d6      	ldr	r6, [r2, #12]
 8003bf8:	68d6      	ldr	r6, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bfa:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003bfe:	f3c6 6284 	ubfx	r2, r6, #26, #5
 8003c02:	4295      	cmp	r5, r2
 8003c04:	f47f af40 	bne.w	8003a88 <HAL_ADC_ConfigChannel+0x5c>
  MODIFY_REG(*preg,
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c0e:	603a      	str	r2, [r7, #0]
 8003c10:	6808      	ldr	r0, [r1, #0]
}
 8003c12:	e739      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x5c>
    SET_BIT(ADCx->DIFSEL,
 8003c14:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003c18:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8003c1c:	432a      	orrs	r2, r5
 8003c1e:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c22:	2d00      	cmp	r5, #0
 8003c24:	d051      	beq.n	8003cca <HAL_ADC_ConfigChannel+0x29e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	fa90 f2a0 	rbit	r2, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c2a:	2a00      	cmp	r2, #0
 8003c2c:	f000 80f7 	beq.w	8003e1e <HAL_ADC_ConfigChannel+0x3f2>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003c30:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c34:	3201      	adds	r2, #1
 8003c36:	f002 021f 	and.w	r2, r2, #31
 8003c3a:	2a09      	cmp	r2, #9
 8003c3c:	f240 80ef 	bls.w	8003e1e <HAL_ADC_ConfigChannel+0x3f2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003c44:	2d00      	cmp	r5, #0
 8003c46:	f000 814e 	beq.w	8003ee6 <HAL_ADC_ConfigChannel+0x4ba>
  return __builtin_clz(value);
 8003c4a:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c4e:	3501      	adds	r5, #1
 8003c50:	06ad      	lsls	r5, r5, #26
 8003c52:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8003c5a:	2a00      	cmp	r2, #0
 8003c5c:	f000 8148 	beq.w	8003ef0 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 8003c60:	fab2 f282 	clz	r2, r2
 8003c64:	3201      	adds	r2, #1
 8003c66:	f002 021f 	and.w	r2, r2, #31
 8003c6a:	2601      	movs	r6, #1
 8003c6c:	fa06 f202 	lsl.w	r2, r6, r2
 8003c70:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c72:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003c76:	2800      	cmp	r0, #0
 8003c78:	f000 8138 	beq.w	8003eec <HAL_ADC_ConfigChannel+0x4c0>
  return __builtin_clz(value);
 8003c7c:	fab0 f080 	clz	r0, r0
 8003c80:	3001      	adds	r0, #1
 8003c82:	f000 001f 	and.w	r0, r0, #31
 8003c86:	2203      	movs	r2, #3
 8003c88:	f06f 061d 	mvn.w	r6, #29
 8003c8c:	fb12 6200 	smlabb	r2, r2, r0, r6
 8003c90:	0512      	lsls	r2, r2, #20
 8003c92:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c96:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c98:	0dd5      	lsrs	r5, r2, #23
  MODIFY_REG(*preg,
 8003c9a:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c9c:	f005 0504 	and.w	r5, r5, #4
 8003ca0:	f104 0614 	add.w	r6, r4, #20
  MODIFY_REG(*preg,
 8003ca4:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8003cac:	f04f 0e07 	mov.w	lr, #7
 8003cb0:	5970      	ldr	r0, [r6, r5]
 8003cb2:	fa0e f202 	lsl.w	r2, lr, r2
 8003cb6:	ea20 0202 	bic.w	r2, r0, r2
 8003cba:	ea42 020c 	orr.w	r2, r2, ip
 8003cbe:	5172      	str	r2, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003cc0:	680a      	ldr	r2, [r1, #0]
}
 8003cc2:	e6f3      	b.n	8003aac <HAL_ADC_ConfigChannel+0x80>
  __HAL_LOCK(hadc);
 8003cc4:	2002      	movs	r0, #2
}
 8003cc6:	b003      	add	sp, #12
 8003cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cca:	0e82      	lsrs	r2, r0, #26
 8003ccc:	3201      	adds	r2, #1
 8003cce:	f002 001f 	and.w	r0, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cd2:	2809      	cmp	r0, #9
 8003cd4:	d84e      	bhi.n	8003d74 <HAL_ADC_ConfigChannel+0x348>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cd6:	0695      	lsls	r5, r2, #26
 8003cd8:	2201      	movs	r2, #1
 8003cda:	4082      	lsls	r2, r0
 8003cdc:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003ce0:	4315      	orrs	r5, r2
 8003ce2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8003ce6:	0512      	lsls	r2, r2, #20
 8003ce8:	e7d5      	b.n	8003c96 <HAL_ADC_ConfigChannel+0x26a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003cea:	492b      	ldr	r1, [pc, #172]	; (8003d98 <HAL_ADC_ConfigChannel+0x36c>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cec:	4830      	ldr	r0, [pc, #192]	; (8003db0 <HAL_ADC_ConfigChannel+0x384>)
 8003cee:	688a      	ldr	r2, [r1, #8]
 8003cf0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003cf4:	4332      	orrs	r2, r6
 8003cf6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003cfa:	608a      	str	r2, [r1, #8]
 8003cfc:	6802      	ldr	r2, [r0, #0]
 8003cfe:	492d      	ldr	r1, [pc, #180]	; (8003db4 <HAL_ADC_ConfigChannel+0x388>)
 8003d00:	0992      	lsrs	r2, r2, #6
 8003d02:	fba1 1202 	umull	r1, r2, r1, r2
 8003d06:	0992      	lsrs	r2, r2, #6
 8003d08:	3201      	adds	r2, #1
 8003d0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003d0e:	0092      	lsls	r2, r2, #2
 8003d10:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003d12:	9a01      	ldr	r2, [sp, #4]
 8003d14:	2a00      	cmp	r2, #0
 8003d16:	f43f aef7 	beq.w	8003b08 <HAL_ADC_ConfigChannel+0xdc>
            wait_loop_index--;
 8003d1a:	9a01      	ldr	r2, [sp, #4]
 8003d1c:	3a01      	subs	r2, #1
 8003d1e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003d20:	9a01      	ldr	r2, [sp, #4]
 8003d22:	2a00      	cmp	r2, #0
 8003d24:	d1f9      	bne.n	8003d1a <HAL_ADC_ConfigChannel+0x2ee>
 8003d26:	e6ef      	b.n	8003b08 <HAL_ADC_ConfigChannel+0xdc>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d28:	4d23      	ldr	r5, [pc, #140]	; (8003db8 <HAL_ADC_ConfigChannel+0x38c>)
 8003d2a:	42aa      	cmp	r2, r5
 8003d2c:	f47f aeec 	bne.w	8003b08 <HAL_ADC_ConfigChannel+0xdc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d30:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8003d34:	f47f aee8 	bne.w	8003b08 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d38:	4a1b      	ldr	r2, [pc, #108]	; (8003da8 <HAL_ADC_ConfigChannel+0x37c>)
 8003d3a:	4294      	cmp	r4, r2
 8003d3c:	f43f aee4 	beq.w	8003b08 <HAL_ADC_ConfigChannel+0xdc>
 8003d40:	688a      	ldr	r2, [r1, #8]
 8003d42:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003d46:	4332      	orrs	r2, r6
 8003d48:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003d4c:	608a      	str	r2, [r1, #8]
}
 8003d4e:	e6d0      	b.n	8003af2 <HAL_ADC_ConfigChannel+0xc6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003d50:	0dea      	lsrs	r2, r5, #23
 8003d52:	f002 0204 	and.w	r2, r2, #4
 8003d56:	f104 0014 	add.w	r0, r4, #20
  MODIFY_REG(*preg,
 8003d5a:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8003d5e:	2607      	movs	r6, #7
 8003d60:	40ae      	lsls	r6, r5
 8003d62:	5885      	ldr	r5, [r0, r2]
 8003d64:	ea25 0506 	bic.w	r5, r5, r6
 8003d68:	5085      	str	r5, [r0, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003d6a:	6962      	ldr	r2, [r4, #20]
 8003d6c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d70:	6162      	str	r2, [r4, #20]
}
 8003d72:	e6ea      	b.n	8003b4a <HAL_ADC_ConfigChannel+0x11e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d74:	0695      	lsls	r5, r2, #26
 8003d76:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8003d7a:	3a1e      	subs	r2, #30
 8003d7c:	2601      	movs	r6, #1
 8003d7e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003d82:	0512      	lsls	r2, r2, #20
 8003d84:	fa06 f000 	lsl.w	r0, r6, r0
 8003d88:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003d8c:	4305      	orrs	r5, r0
 8003d8e:	e782      	b.n	8003c96 <HAL_ADC_ConfigChannel+0x26a>
 8003d90:	407f0000 	.word	0x407f0000
 8003d94:	80080000 	.word	0x80080000
 8003d98:	50000300 	.word	0x50000300
 8003d9c:	c3210000 	.word	0xc3210000
 8003da0:	90c00010 	.word	0x90c00010
 8003da4:	c7520000 	.word	0xc7520000
 8003da8:	50000100 	.word	0x50000100
 8003dac:	03fff000 	.word	0x03fff000
 8003db0:	20000694 	.word	0x20000694
 8003db4:	053e2d63 	.word	0x053e2d63
 8003db8:	cb840000 	.word	0xcb840000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbc:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003dc0:	b11d      	cbz	r5, 8003dca <HAL_ADC_ConfigChannel+0x39e>
  return __builtin_clz(value);
 8003dc2:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003dc6:	42aa      	cmp	r2, r5
 8003dc8:	d071      	beq.n	8003eae <HAL_ADC_ConfigChannel+0x482>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003dca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003dcc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dce:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003dd2:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003dd6:	f104 0764 	add.w	r7, r4, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dda:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003dde:	b11d      	cbz	r5, 8003de8 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8003de0:	fab5 f585 	clz	r5, r5
 8003de4:	42ae      	cmp	r6, r5
 8003de6:	d050      	beq.n	8003e8a <HAL_ADC_ConfigChannel+0x45e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003de8:	6895      	ldr	r5, [r2, #8]
 8003dea:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dec:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003df0:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003df8:	b11d      	cbz	r5, 8003e02 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003dfa:	fab5 f585 	clz	r5, r5
 8003dfe:	42ae      	cmp	r6, r5
 8003e00:	d031      	beq.n	8003e66 <HAL_ADC_ConfigChannel+0x43a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e02:	68d5      	ldr	r5, [r2, #12]
 8003e04:	68d5      	ldr	r5, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e06:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e0a:	f3c5 6284 	ubfx	r2, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003e12:	2d00      	cmp	r5, #0
 8003e14:	f43f ae38 	beq.w	8003a88 <HAL_ADC_ConfigChannel+0x5c>
  return __builtin_clz(value);
 8003e18:	fab5 f585 	clz	r5, r5
 8003e1c:	e6f1      	b.n	8003c02 <HAL_ADC_ConfigChannel+0x1d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003e22:	2d00      	cmp	r5, #0
 8003e24:	d059      	beq.n	8003eda <HAL_ADC_ConfigChannel+0x4ae>
  return __builtin_clz(value);
 8003e26:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e2a:	3501      	adds	r5, #1
 8003e2c:	06ad      	lsls	r5, r5, #26
 8003e2e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e32:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8003e36:	2a00      	cmp	r2, #0
 8003e38:	d04d      	beq.n	8003ed6 <HAL_ADC_ConfigChannel+0x4aa>
  return __builtin_clz(value);
 8003e3a:	fab2 f282 	clz	r2, r2
 8003e3e:	3201      	adds	r2, #1
 8003e40:	f002 021f 	and.w	r2, r2, #31
 8003e44:	2601      	movs	r6, #1
 8003e46:	fa06 f202 	lsl.w	r2, r6, r2
 8003e4a:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003e50:	2800      	cmp	r0, #0
 8003e52:	d045      	beq.n	8003ee0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003e54:	fab0 f280 	clz	r2, r0
 8003e58:	3201      	adds	r2, #1
 8003e5a:	f002 021f 	and.w	r2, r2, #31
 8003e5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003e62:	0512      	lsls	r2, r2, #20
 8003e64:	e717      	b.n	8003c96 <HAL_ADC_ConfigChannel+0x26a>
  MODIFY_REG(*preg,
 8003e66:	6838      	ldr	r0, [r7, #0]
 8003e68:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003e6c:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e6e:	68d0      	ldr	r0, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e70:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e72:	f102 070c 	add.w	r7, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e76:	68d2      	ldr	r2, [r2, #12]
 8003e78:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e7c:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e80:	2d00      	cmp	r5, #0
 8003e82:	d1c4      	bne.n	8003e0e <HAL_ADC_ConfigChannel+0x3e2>
 8003e84:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8003e88:	e6bb      	b.n	8003c02 <HAL_ADC_ConfigChannel+0x1d6>
  MODIFY_REG(*preg,
 8003e8a:	6838      	ldr	r0, [r7, #0]
 8003e8c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003e90:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e92:	6890      	ldr	r0, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e94:	6808      	ldr	r0, [r1, #0]
 8003e96:	6896      	ldr	r6, [r2, #8]
 8003e98:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e9c:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ea0:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ea4:	2d00      	cmp	r5, #0
 8003ea6:	d1a5      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x3c8>
 8003ea8:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8003eac:	e6a0      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x1c4>
  MODIFY_REG(*preg,
 8003eae:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003eb0:	4622      	mov	r2, r4
 8003eb2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003eb6:	f842 0f60 	str.w	r0, [r2, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003eba:	6e60      	ldr	r0, [r4, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ebc:	6808      	ldr	r0, [r1, #0]
 8003ebe:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8003ec0:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ec4:	f104 0764 	add.w	r7, r4, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ec8:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ecc:	2d00      	cmp	r5, #0
 8003ece:	d184      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x3ae>
 8003ed0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8003ed4:	e683      	b.n	8003bde <HAL_ADC_ConfigChannel+0x1b2>
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	e7b7      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x41e>
 8003eda:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8003ede:	e7a8      	b.n	8003e32 <HAL_ADC_ConfigChannel+0x406>
 8003ee0:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8003ee4:	e6d7      	b.n	8003c96 <HAL_ADC_ConfigChannel+0x26a>
 8003ee6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8003eea:	e6b4      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x22a>
 8003eec:	4a01      	ldr	r2, [pc, #4]	; (8003ef4 <HAL_ADC_ConfigChannel+0x4c8>)
 8003eee:	e6d2      	b.n	8003c96 <HAL_ADC_ConfigChannel+0x26a>
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	e6bd      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x244>
 8003ef4:	fe500000 	.word	0xfe500000

08003ef8 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003efa:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 8003efe:	4602      	mov	r2, r0
 8003f00:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8003f02:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8003f04:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8003f06:	9001      	str	r0, [sp, #4]
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f08:	6950      	ldr	r0, [r2, #20]
  __HAL_LOCK(hadc);
 8003f0a:	f000 8162 	beq.w	80041d2 <HAL_ADCEx_InjectedConfigChannel+0x2da>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003f14:	b1e8      	cbz	r0, 8003f52 <HAL_ADCEx_InjectedConfigChannel+0x5a>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003f16:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d01a      	beq.n	8003f52 <HAL_ADCEx_InjectedConfigChannel+0x5a>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003f1c:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	f040 8115 	bne.w	800414e <HAL_ADCEx_InjectedConfigChannel+0x256>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003f24:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8003f26:	2800      	cmp	r0, #0
 8003f28:	f000 821e 	beq.w	8004368 <HAL_ADCEx_InjectedConfigChannel+0x470>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003f2c:	1e5e      	subs	r6, r3, #1
 8003f2e:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003f30:	f000 007c 	and.w	r0, r0, #124	; 0x7c
 8003f34:	4330      	orrs	r0, r6
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003f36:	ea40 0304 	orr.w	r3, r0, r4
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003f3a:	e9d1 4500 	ldrd	r4, r5, [r1]
 8003f3e:	f005 051f 	and.w	r5, r5, #31
 8003f42:	f3c4 6084 	ubfx	r0, r4, #26, #5
 8003f46:	40a8      	lsls	r0, r5
    hadc->InjectionConfig.ChannelCount--;

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003f48:	4318      	orrs	r0, r3
    hadc->InjectionConfig.ChannelCount--;
 8003f4a:	6696      	str	r6, [r2, #104]	; 0x68

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003f4c:	6813      	ldr	r3, [r2, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003f4e:	6650      	str	r0, [r2, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003f50:	e005      	b.n	8003f5e <HAL_ADCEx_InjectedConfigChannel+0x66>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003f52:	684b      	ldr	r3, [r1, #4]
 8003f54:	2b09      	cmp	r3, #9
 8003f56:	f000 80e6 	beq.w	8004126 <HAL_ADCEx_InjectedConfigChannel+0x22e>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003f5a:	680c      	ldr	r4, [r1, #0]
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003f5c:	6813      	ldr	r3, [r2, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f5e:	6898      	ldr	r0, [r3, #8]
 8003f60:	0707      	lsls	r7, r0, #28
 8003f62:	d410      	bmi.n	8003f86 <HAL_ADCEx_InjectedConfigChannel+0x8e>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003f64:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	f040 80d3 	bne.w	8004114 <HAL_ADCEx_InjectedConfigChannel+0x21c>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003f6e:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
 8003f72:	68dd      	ldr	r5, [r3, #12]
 8003f74:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8003f78:	0500      	lsls	r0, r0, #20
 8003f7a:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8003f7e:	ea40 5046 	orr.w	r0, r0, r6, lsl #21
 8003f82:	4328      	orrs	r0, r5
 8003f84:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f86:	6898      	ldr	r0, [r3, #8]
 8003f88:	f010 0004 	ands.w	r0, r0, #4
 8003f8c:	d056      	beq.n	800403c <HAL_ADCEx_InjectedConfigChannel+0x144>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f8e:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f90:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f92:	689d      	ldr	r5, [r3, #8]
 8003f94:	07ee      	lsls	r6, r5, #31
 8003f96:	d40c      	bmi.n	8003fb2 <HAL_ADCEx_InjectedConfigChannel+0xba>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003f98:	4da9      	ldr	r5, [pc, #676]	; (8004240 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8003f9a:	68ce      	ldr	r6, [r1, #12]
 8003f9c:	42ae      	cmp	r6, r5
 8003f9e:	f000 80fb 	beq.w	8004198 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    CLEAR_BIT(ADCx->DIFSEL,
 8003fa2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003fa6:	f3c4 0512 	ubfx	r5, r4, #0, #19
 8003faa:	ea21 0105 	bic.w	r1, r1, r5
 8003fae:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8003fb2:	49a4      	ldr	r1, [pc, #656]	; (8004244 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8003fb4:	420c      	tst	r4, r1
 8003fb6:	d019      	beq.n	8003fec <HAL_ADCEx_InjectedConfigChannel+0xf4>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003fb8:	4ea3      	ldr	r6, [pc, #652]	; (8004248 <HAL_ADCEx_InjectedConfigChannel+0x350>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003fba:	4da4      	ldr	r5, [pc, #656]	; (800424c <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8003fbc:	68b1      	ldr	r1, [r6, #8]
 8003fbe:	42ac      	cmp	r4, r5
 8003fc0:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 8003fc4:	d017      	beq.n	8003ff6 <HAL_ADCEx_InjectedConfigChannel+0xfe>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003fc6:	4da2      	ldr	r5, [pc, #648]	; (8004250 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8003fc8:	42ac      	cmp	r4, r5
 8003fca:	d014      	beq.n	8003ff6 <HAL_ADCEx_InjectedConfigChannel+0xfe>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003fcc:	4da1      	ldr	r5, [pc, #644]	; (8004254 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 8003fce:	42ac      	cmp	r4, r5
 8003fd0:	f040 8106 	bne.w	80041e0 <HAL_ADCEx_InjectedConfigChannel+0x2e8>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003fd4:	01cd      	lsls	r5, r1, #7
 8003fd6:	d409      	bmi.n	8003fec <HAL_ADCEx_InjectedConfigChannel+0xf4>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fd8:	499f      	ldr	r1, [pc, #636]	; (8004258 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8003fda:	428b      	cmp	r3, r1
 8003fdc:	d006      	beq.n	8003fec <HAL_ADCEx_InjectedConfigChannel+0xf4>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003fde:	68b3      	ldr	r3, [r6, #8]
 8003fe0:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8003fe4:	433b      	orrs	r3, r7
 8003fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fea:	60b3      	str	r3, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fec:	2300      	movs	r3, #0
 8003fee:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003ff2:	b003      	add	sp, #12
 8003ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ff6:	0209      	lsls	r1, r1, #8
 8003ff8:	d4f8      	bmi.n	8003fec <HAL_ADCEx_InjectedConfigChannel+0xf4>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ffe:	d1f5      	bne.n	8003fec <HAL_ADCEx_InjectedConfigChannel+0xf4>
 8004000:	4991      	ldr	r1, [pc, #580]	; (8004248 <HAL_ADCEx_InjectedConfigChannel+0x350>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004002:	4c96      	ldr	r4, [pc, #600]	; (800425c <HAL_ADCEx_InjectedConfigChannel+0x364>)
 8004004:	688b      	ldr	r3, [r1, #8]
 8004006:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800400a:	433b      	orrs	r3, r7
 800400c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004010:	608b      	str	r3, [r1, #8]
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	4992      	ldr	r1, [pc, #584]	; (8004260 <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8004016:	099b      	lsrs	r3, r3, #6
 8004018:	fba1 1303 	umull	r1, r3, r1, r3
 800401c:	099b      	lsrs	r3, r3, #6
 800401e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	3318      	adds	r3, #24
 8004026:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004028:	9b01      	ldr	r3, [sp, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0de      	beq.n	8003fec <HAL_ADCEx_InjectedConfigChannel+0xf4>
          wait_loop_index--;
 800402e:	9b01      	ldr	r3, [sp, #4]
 8004030:	3b01      	subs	r3, #1
 8004032:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004034:	9b01      	ldr	r3, [sp, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f9      	bne.n	800402e <HAL_ADCEx_InjectedConfigChannel+0x136>
 800403a:	e7d7      	b.n	8003fec <HAL_ADCEx_InjectedConfigChannel+0xf4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800403c:	689d      	ldr	r5, [r3, #8]
 800403e:	f015 0508 	ands.w	r5, r5, #8
 8004042:	d1a6      	bne.n	8003f92 <HAL_ADCEx_InjectedConfigChannel+0x9a>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004044:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8004046:	2800      	cmp	r0, #0
 8004048:	f040 8097 	bne.w	800417a <HAL_ADCEx_InjectedConfigChannel+0x282>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800404c:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8004050:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004052:	68d8      	ldr	r0, [r3, #12]
 8004054:	bf0c      	ite	eq
 8004056:	f040 7000 	orreq.w	r0, r0, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800405a:	f020 7000 	bicne.w	r0, r0, #33554432	; 0x2000000
 800405e:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004060:	2000      	movs	r0, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004062:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8004066:	2d01      	cmp	r5, #1
 8004068:	f000 80df 	beq.w	800422a <HAL_ADCEx_InjectedConfigChannel+0x332>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800406c:	691d      	ldr	r5, [r3, #16]
 800406e:	f025 0502 	bic.w	r5, r5, #2
 8004072:	611d      	str	r5, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004074:	688d      	ldr	r5, [r1, #8]
 8004076:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 800407a:	f000 80c4 	beq.w	8004206 <HAL_ADCEx_InjectedConfigChannel+0x30e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800407e:	0de6      	lsrs	r6, r4, #23
 8004080:	f006 0604 	and.w	r6, r6, #4
 8004084:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8004088:	f3c4 5404 	ubfx	r4, r4, #20, #5
 800408c:	2707      	movs	r7, #7
 800408e:	40a5      	lsls	r5, r4
 8004090:	40a7      	lsls	r7, r4
 8004092:	f85c 4006 	ldr.w	r4, [ip, r6]
 8004096:	ea24 0407 	bic.w	r4, r4, r7
 800409a:	432c      	orrs	r4, r5
 800409c:	f84c 4006 	str.w	r4, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80040a0:	695c      	ldr	r4, [r3, #20]
 80040a2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80040a6:	615c      	str	r4, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80040a8:	e9d1 6504 	ldrd	r6, r5, [r1, #16]
 80040ac:	2e04      	cmp	r6, #4
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80040ae:	68dc      	ldr	r4, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80040b0:	f000 80de 	beq.w	8004270 <HAL_ADCEx_InjectedConfigChannel+0x378>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80040b4:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 80040b8:	0064      	lsls	r4, r4, #1
 80040ba:	fa05 fc04 	lsl.w	ip, r5, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040be:	f103 0560 	add.w	r5, r3, #96	; 0x60
  MODIFY_REG(*preg,
 80040c2:	680c      	ldr	r4, [r1, #0]
 80040c4:	f855 e026 	ldr.w	lr, [r5, r6, lsl #2]
 80040c8:	4f66      	ldr	r7, [pc, #408]	; (8004264 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 80040ca:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80040ce:	ea0e 0707 	and.w	r7, lr, r7
 80040d2:	433c      	orrs	r4, r7
 80040d4:	ea44 040c 	orr.w	r4, r4, ip
 80040d8:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80040dc:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040e0:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 80040e2:	698e      	ldr	r6, [r1, #24]
 80040e4:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 80040e8:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80040ec:	4334      	orrs	r4, r6
 80040ee:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040f2:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80040f4:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 80040f6:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 80040fa:	f1a6 0601 	sub.w	r6, r6, #1
 80040fe:	fab6 f686 	clz	r6, r6
 8004102:	0976      	lsrs	r6, r6, #5
 8004104:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8004108:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 800410c:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8004110:	680c      	ldr	r4, [r1, #0]
}
 8004112:	e73e      	b.n	8003f92 <HAL_ADCEx_InjectedConfigChannel+0x9a>
      MODIFY_REG(hadc->Instance->CFGR,
 8004114:	68d8      	ldr	r0, [r3, #12]
 8004116:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 800411a:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 800411e:	ea40 5045 	orr.w	r0, r0, r5, lsl #21
 8004122:	60d8      	str	r0, [r3, #12]
 8004124:	e72f      	b.n	8003f86 <HAL_ADCEx_InjectedConfigChannel+0x8e>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004126:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004128:	680c      	ldr	r4, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800412a:	2b00      	cmp	r3, #0
 800412c:	d054      	beq.n	80041d8 <HAL_ADCEx_InjectedConfigChannel+0x2e0>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800412e:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004130:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004134:	0c65      	lsrs	r5, r4, #17
 8004136:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 800413a:	4303      	orrs	r3, r0
 800413c:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 800413e:	6813      	ldr	r3, [r2, #0]
 8004140:	4e49      	ldr	r6, [pc, #292]	; (8004268 <HAL_ADCEx_InjectedConfigChannel+0x370>)
 8004142:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004144:	4030      	ands	r0, r6
 8004146:	4328      	orrs	r0, r5
 8004148:	64d8      	str	r0, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800414a:	6655      	str	r5, [r2, #100]	; 0x64
 800414c:	e707      	b.n	8003f5e <HAL_ADCEx_InjectedConfigChannel+0x66>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 800414e:	680c      	ldr	r4, [r1, #0]
 8004150:	684b      	ldr	r3, [r1, #4]
 8004152:	f3c4 6584 	ubfx	r5, r4, #26, #5
 8004156:	f003 031f 	and.w	r3, r3, #31
 800415a:	409d      	lsls	r5, r3
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800415c:	6e53      	ldr	r3, [r2, #100]	; 0x64
    hadc->InjectionConfig.ChannelCount--;
 800415e:	3801      	subs	r0, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004160:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 8004162:	6690      	str	r0, [r2, #104]	; 0x68
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004164:	6813      	ldr	r3, [r2, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004166:	6655      	str	r5, [r2, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004168:	2800      	cmp	r0, #0
 800416a:	f47f aef8 	bne.w	8003f5e <HAL_ADCEx_InjectedConfigChannel+0x66>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 800416e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004170:	4e3d      	ldr	r6, [pc, #244]	; (8004268 <HAL_ADCEx_InjectedConfigChannel+0x370>)
 8004172:	4030      	ands	r0, r6
 8004174:	4328      	orrs	r0, r5
 8004176:	64d8      	str	r0, [r3, #76]	; 0x4c
 8004178:	e6f1      	b.n	8003f5e <HAL_ADCEx_InjectedConfigChannel+0x66>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800417a:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 800417c:	2800      	cmp	r0, #0
 800417e:	f43f af65 	beq.w	800404c <HAL_ADCEx_InjectedConfigChannel+0x154>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004182:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8004186:	2801      	cmp	r0, #1
 8004188:	f000 8156 	beq.w	8004438 <HAL_ADCEx_InjectedConfigChannel+0x540>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800418c:	4628      	mov	r0, r5
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800418e:	68dd      	ldr	r5, [r3, #12]
 8004190:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8004194:	60dd      	str	r5, [r3, #12]
 8004196:	e764      	b.n	8004062 <HAL_ADCEx_InjectedConfigChannel+0x16a>
    SET_BIT(ADCx->DIFSEL,
 8004198:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 800419c:	f3c4 0612 	ubfx	r6, r4, #0, #19
 80041a0:	4335      	orrs	r5, r6
 80041a2:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80041a6:	2e00      	cmp	r6, #0
 80041a8:	f040 80a7 	bne.w	80042fa <HAL_ADCEx_InjectedConfigChannel+0x402>
 80041ac:	0ea4      	lsrs	r4, r4, #26
 80041ae:	3401      	adds	r4, #1
 80041b0:	f004 0c1f 	and.w	ip, r4, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041b4:	f1bc 0f09 	cmp.w	ip, #9
 80041b8:	f200 80d9 	bhi.w	800436e <HAL_ADCEx_InjectedConfigChannel+0x476>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80041bc:	06a5      	lsls	r5, r4, #26
 80041be:	2401      	movs	r4, #1
 80041c0:	fa04 f40c 	lsl.w	r4, r4, ip
 80041c4:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80041c8:	4325      	orrs	r5, r4
 80041ca:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 80041ce:	0524      	lsls	r4, r4, #20
 80041d0:	e0da      	b.n	8004388 <HAL_ADCEx_InjectedConfigChannel+0x490>
  __HAL_LOCK(hadc);
 80041d2:	2002      	movs	r0, #2
}
 80041d4:	b003      	add	sp, #12
 80041d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80041d8:	0c65      	lsrs	r5, r4, #17
 80041da:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 80041de:	e7ae      	b.n	800413e <HAL_ADCEx_InjectedConfigChannel+0x246>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80041e0:	4d22      	ldr	r5, [pc, #136]	; (800426c <HAL_ADCEx_InjectedConfigChannel+0x374>)
 80041e2:	42ac      	cmp	r4, r5
 80041e4:	f47f af02 	bne.w	8003fec <HAL_ADCEx_InjectedConfigChannel+0xf4>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80041e8:	024c      	lsls	r4, r1, #9
 80041ea:	f53f aeff 	bmi.w	8003fec <HAL_ADCEx_InjectedConfigChannel+0xf4>
      if (ADC_VREFINT_INSTANCE(hadc))
 80041ee:	491a      	ldr	r1, [pc, #104]	; (8004258 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 80041f0:	428b      	cmp	r3, r1
 80041f2:	f43f aefb 	beq.w	8003fec <HAL_ADCEx_InjectedConfigChannel+0xf4>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80041f6:	68b3      	ldr	r3, [r6, #8]
 80041f8:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80041fc:	433b      	orrs	r3, r7
 80041fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004202:	60b3      	str	r3, [r6, #8]
}
 8004204:	e6f2      	b.n	8003fec <HAL_ADCEx_InjectedConfigChannel+0xf4>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004206:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8004208:	f3c4 5604 	ubfx	r6, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800420c:	f005 0504 	and.w	r5, r5, #4
 8004210:	f103 0414 	add.w	r4, r3, #20
  MODIFY_REG(*preg,
 8004214:	2707      	movs	r7, #7
 8004216:	40b7      	lsls	r7, r6
 8004218:	5966      	ldr	r6, [r4, r5]
 800421a:	ea26 0607 	bic.w	r6, r6, r7
 800421e:	5166      	str	r6, [r4, r5]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004220:	695c      	ldr	r4, [r3, #20]
 8004222:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8004226:	615c      	str	r4, [r3, #20]
}
 8004228:	e73e      	b.n	80040a8 <HAL_ADCEx_InjectedConfigChannel+0x1b0>
      MODIFY_REG(hadc->Instance->CFGR2,
 800422a:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	; 0x34
 800422e:	691e      	ldr	r6, [r3, #16]
 8004230:	433d      	orrs	r5, r7
 8004232:	f426 76ff 	bic.w	r6, r6, #510	; 0x1fe
 8004236:	4335      	orrs	r5, r6
 8004238:	f045 0502 	orr.w	r5, r5, #2
 800423c:	611d      	str	r5, [r3, #16]
 800423e:	e719      	b.n	8004074 <HAL_ADCEx_InjectedConfigChannel+0x17c>
 8004240:	407f0000 	.word	0x407f0000
 8004244:	80080000 	.word	0x80080000
 8004248:	50000300 	.word	0x50000300
 800424c:	c3210000 	.word	0xc3210000
 8004250:	90c00010 	.word	0x90c00010
 8004254:	c7520000 	.word	0xc7520000
 8004258:	50000100 	.word	0x50000100
 800425c:	20000694 	.word	0x20000694
 8004260:	053e2d63 	.word	0x053e2d63
 8004264:	03fff000 	.word	0x03fff000
 8004268:	04104000 	.word	0x04104000
 800426c:	cb840000 	.word	0xcb840000
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004270:	6e1c      	ldr	r4, [r3, #96]	; 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004272:	680c      	ldr	r4, [r1, #0]
 8004274:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8004276:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800427a:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800427e:	2e00      	cmp	r6, #0
 8004280:	f000 809a 	beq.w	80043b8 <HAL_ADCEx_InjectedConfigChannel+0x4c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004284:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004288:	b126      	cbz	r6, 8004294 <HAL_ADCEx_InjectedConfigChannel+0x39c>
  return __builtin_clz(value);
 800428a:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800428e:	42b5      	cmp	r5, r6
 8004290:	f000 80d7 	beq.w	8004442 <HAL_ADCEx_InjectedConfigChannel+0x54a>
 8004294:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004296:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004298:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800429c:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80042a0:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 80042a8:	b126      	cbz	r6, 80042b4 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
  return __builtin_clz(value);
 80042aa:	fab6 f686 	clz	r6, r6
 80042ae:	42b7      	cmp	r7, r6
 80042b0:	f000 80dc 	beq.w	800446c <HAL_ADCEx_InjectedConfigChannel+0x574>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042b4:	68ae      	ldr	r6, [r5, #8]
 80042b6:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042b8:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042bc:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c0:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 80042c4:	b126      	cbz	r6, 80042d0 <HAL_ADCEx_InjectedConfigChannel+0x3d8>
  return __builtin_clz(value);
 80042c6:	fab6 f686 	clz	r6, r6
 80042ca:	42b7      	cmp	r7, r6
 80042cc:	f000 80e3 	beq.w	8004496 <HAL_ADCEx_InjectedConfigChannel+0x59e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042d0:	68ee      	ldr	r6, [r5, #12]
 80042d2:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042d4:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80042d6:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042da:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 80042de:	2e00      	cmp	r6, #0
 80042e0:	f43f ae57 	beq.w	8003f92 <HAL_ADCEx_InjectedConfigChannel+0x9a>
  return __builtin_clz(value);
 80042e4:	fab6 f686 	clz	r6, r6
 80042e8:	42be      	cmp	r6, r7
 80042ea:	f47f ae52 	bne.w	8003f92 <HAL_ADCEx_InjectedConfigChannel+0x9a>
  MODIFY_REG(*preg,
 80042ee:	682c      	ldr	r4, [r5, #0]
 80042f0:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80042f4:	602c      	str	r4, [r5, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80042f6:	680c      	ldr	r4, [r1, #0]
}
 80042f8:	e64b      	b.n	8003f92 <HAL_ADCEx_InjectedConfigChannel+0x9a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80042fe:	2d00      	cmp	r5, #0
 8004300:	d076      	beq.n	80043f0 <HAL_ADCEx_InjectedConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004302:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004306:	3501      	adds	r5, #1
 8004308:	f005 051f 	and.w	r5, r5, #31
 800430c:	2d09      	cmp	r5, #9
 800430e:	d96f      	bls.n	80043f0 <HAL_ADCEx_InjectedConfigChannel+0x4f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004314:	2d00      	cmp	r5, #0
 8004316:	f000 80de 	beq.w	80044d6 <HAL_ADCEx_InjectedConfigChannel+0x5de>
  return __builtin_clz(value);
 800431a:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800431e:	3501      	adds	r5, #1
 8004320:	06ad      	lsls	r5, r5, #26
 8004322:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004326:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 800432a:	2e00      	cmp	r6, #0
 800432c:	f000 80d1 	beq.w	80044d2 <HAL_ADCEx_InjectedConfigChannel+0x5da>
  return __builtin_clz(value);
 8004330:	fab6 f686 	clz	r6, r6
 8004334:	3601      	adds	r6, #1
 8004336:	f006 061f 	and.w	r6, r6, #31
 800433a:	2701      	movs	r7, #1
 800433c:	fa07 f606 	lsl.w	r6, r7, r6
 8004340:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004342:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8004346:	2c00      	cmp	r4, #0
 8004348:	f000 80c1 	beq.w	80044ce <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 800434c:	fab4 f484 	clz	r4, r4
 8004350:	1c66      	adds	r6, r4, #1
 8004352:	f006 061f 	and.w	r6, r6, #31
 8004356:	2403      	movs	r4, #3
 8004358:	f06f 071d 	mvn.w	r7, #29
 800435c:	fb14 7406 	smlabb	r4, r4, r6, r7
 8004360:	0524      	lsls	r4, r4, #20
 8004362:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
 8004366:	e00f      	b.n	8004388 <HAL_ADCEx_InjectedConfigChannel+0x490>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004368:	3b01      	subs	r3, #1
 800436a:	461e      	mov	r6, r3
 800436c:	e5e5      	b.n	8003f3a <HAL_ADCEx_InjectedConfigChannel+0x42>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800436e:	06a5      	lsls	r5, r4, #26
 8004370:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8004374:	3c1e      	subs	r4, #30
 8004376:	2601      	movs	r6, #1
 8004378:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800437c:	0524      	lsls	r4, r4, #20
 800437e:	fa06 f60c 	lsl.w	r6, r6, ip
 8004382:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
 8004386:	4335      	orrs	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004388:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800438a:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 800438e:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004390:	f00c 0c04 	and.w	ip, ip, #4
 8004394:	f103 0e14 	add.w	lr, r3, #20
  MODIFY_REG(*preg,
 8004398:	f3c4 5404 	ubfx	r4, r4, #20, #5
 800439c:	fa05 f604 	lsl.w	r6, r5, r4
 80043a0:	2707      	movs	r7, #7
 80043a2:	f85e 500c 	ldr.w	r5, [lr, ip]
 80043a6:	fa07 f404 	lsl.w	r4, r7, r4
 80043aa:	ea25 0404 	bic.w	r4, r5, r4
 80043ae:	4334      	orrs	r4, r6
 80043b0:	f84e 400c 	str.w	r4, [lr, ip]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80043b4:	680c      	ldr	r4, [r1, #0]
}
 80043b6:	e5fc      	b.n	8003fb2 <HAL_ADCEx_InjectedConfigChannel+0xba>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80043b8:	f3c4 6684 	ubfx	r6, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043bc:	42b5      	cmp	r5, r6
 80043be:	d040      	beq.n	8004442 <HAL_ADCEx_InjectedConfigChannel+0x54a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043c0:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80043c2:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043c4:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043c8:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80043cc:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 80043d0:	42b7      	cmp	r7, r6
 80043d2:	d04b      	beq.n	800446c <HAL_ADCEx_InjectedConfigChannel+0x574>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043d4:	68af      	ldr	r7, [r5, #8]
 80043d6:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043d8:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043dc:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80043e0:	42b7      	cmp	r7, r6
 80043e2:	d058      	beq.n	8004496 <HAL_ADCEx_InjectedConfigChannel+0x59e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043e4:	68ef      	ldr	r7, [r5, #12]
 80043e6:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043e8:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043ea:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80043ee:	e77b      	b.n	80042e8 <HAL_ADCEx_InjectedConfigChannel+0x3f0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f0:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80043f4:	2d00      	cmp	r5, #0
 80043f6:	d064      	beq.n	80044c2 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80043f8:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80043fc:	3501      	adds	r5, #1
 80043fe:	06ad      	lsls	r5, r5, #26
 8004400:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004404:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004408:	2e00      	cmp	r6, #0
 800440a:	d058      	beq.n	80044be <HAL_ADCEx_InjectedConfigChannel+0x5c6>
  return __builtin_clz(value);
 800440c:	fab6 f686 	clz	r6, r6
 8004410:	3601      	adds	r6, #1
 8004412:	f006 061f 	and.w	r6, r6, #31
 8004416:	2701      	movs	r7, #1
 8004418:	fa07 f606 	lsl.w	r6, r7, r6
 800441c:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441e:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8004422:	2c00      	cmp	r4, #0
 8004424:	d050      	beq.n	80044c8 <HAL_ADCEx_InjectedConfigChannel+0x5d0>
  return __builtin_clz(value);
 8004426:	fab4 f484 	clz	r4, r4
 800442a:	3401      	adds	r4, #1
 800442c:	f004 041f 	and.w	r4, r4, #31
 8004430:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004434:	0524      	lsls	r4, r4, #20
 8004436:	e7a7      	b.n	8004388 <HAL_ADCEx_InjectedConfigChannel+0x490>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004438:	6dd5      	ldr	r5, [r2, #92]	; 0x5c
 800443a:	f045 0520 	orr.w	r5, r5, #32
 800443e:	65d5      	str	r5, [r2, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 8004440:	e60f      	b.n	8004062 <HAL_ADCEx_InjectedConfigChannel+0x16a>
  MODIFY_REG(*preg,
 8004442:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8004444:	461d      	mov	r5, r3
 8004446:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800444a:	f845 4f60 	str.w	r4, [r5, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800444e:	6e5c      	ldr	r4, [r3, #100]	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004450:	680c      	ldr	r4, [r1, #0]
 8004452:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8004454:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004458:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800445c:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004460:	2e00      	cmp	r6, #0
 8004462:	f47f af1f 	bne.w	80042a4 <HAL_ADCEx_InjectedConfigChannel+0x3ac>
 8004466:	f3c4 6684 	ubfx	r6, r4, #26, #5
 800446a:	e7b1      	b.n	80043d0 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
  MODIFY_REG(*preg,
 800446c:	f8dc 4000 	ldr.w	r4, [ip]
 8004470:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004474:	f8cc 4000 	str.w	r4, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004478:	68ac      	ldr	r4, [r5, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800447a:	680c      	ldr	r4, [r1, #0]
 800447c:	68af      	ldr	r7, [r5, #8]
 800447e:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004482:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004486:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800448a:	2e00      	cmp	r6, #0
 800448c:	f47f af18 	bne.w	80042c0 <HAL_ADCEx_InjectedConfigChannel+0x3c8>
 8004490:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8004494:	e7a4      	b.n	80043e0 <HAL_ADCEx_InjectedConfigChannel+0x4e8>
  MODIFY_REG(*preg,
 8004496:	f8dc 4000 	ldr.w	r4, [ip]
 800449a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800449e:	f8cc 4000 	str.w	r4, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044a2:	68ec      	ldr	r4, [r5, #12]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80044a4:	680c      	ldr	r4, [r1, #0]
 80044a6:	68ef      	ldr	r7, [r5, #12]
 80044a8:	f3c4 0612 	ubfx	r6, r4, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044ac:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044ae:	f3c7 6784 	ubfx	r7, r7, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80044b2:	2e00      	cmp	r6, #0
 80044b4:	f47f af11 	bne.w	80042da <HAL_ADCEx_InjectedConfigChannel+0x3e2>
 80044b8:	f3c4 6684 	ubfx	r6, r4, #26, #5
 80044bc:	e714      	b.n	80042e8 <HAL_ADCEx_InjectedConfigChannel+0x3f0>
 80044be:	2602      	movs	r6, #2
 80044c0:	e7ac      	b.n	800441c <HAL_ADCEx_InjectedConfigChannel+0x524>
 80044c2:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80044c6:	e79d      	b.n	8004404 <HAL_ADCEx_InjectedConfigChannel+0x50c>
 80044c8:	f44f 1440 	mov.w	r4, #3145728	; 0x300000
 80044cc:	e75c      	b.n	8004388 <HAL_ADCEx_InjectedConfigChannel+0x490>
 80044ce:	4c03      	ldr	r4, [pc, #12]	; (80044dc <HAL_ADCEx_InjectedConfigChannel+0x5e4>)
 80044d0:	e75a      	b.n	8004388 <HAL_ADCEx_InjectedConfigChannel+0x490>
 80044d2:	2602      	movs	r6, #2
 80044d4:	e734      	b.n	8004340 <HAL_ADCEx_InjectedConfigChannel+0x448>
 80044d6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80044da:	e724      	b.n	8004326 <HAL_ADCEx_InjectedConfigChannel+0x42e>
 80044dc:	fe500000 	.word	0xfe500000

080044e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80044e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044e2:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044e6:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80044e8:	2a01      	cmp	r2, #1
{
 80044ea:	b09d      	sub	sp, #116	; 0x74
  __HAL_LOCK(hadc);
 80044ec:	d047      	beq.n	800457e <HAL_ADCEx_MultiModeConfigChannel+0x9e>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044ee:	6804      	ldr	r4, [r0, #0]
 80044f0:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80044f2:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80044f4:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044f6:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80044fa:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 80044fc:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004500:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004502:	d007      	beq.n	8004514 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004504:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004506:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800450a:	f041 0120 	orr.w	r1, r1, #32
 800450e:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004510:	b01d      	add	sp, #116	; 0x74
 8004512:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004514:	4d26      	ldr	r5, [pc, #152]	; (80045b0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 8004516:	68aa      	ldr	r2, [r5, #8]
 8004518:	0752      	lsls	r2, r2, #29
 800451a:	d50a      	bpl.n	8004532 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800451c:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800451e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004520:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8004524:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004526:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 800452e:	b01d      	add	sp, #116	; 0x74
 8004530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004532:	68a0      	ldr	r0, [r4, #8]
 8004534:	f010 0004 	ands.w	r0, r0, #4
 8004538:	d1f1      	bne.n	800451e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800453a:	b31e      	cbz	r6, 8004584 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800453c:	f8df e074 	ldr.w	lr, [pc, #116]	; 80045b4 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8004540:	684f      	ldr	r7, [r1, #4]
 8004542:	f8de 2008 	ldr.w	r2, [lr, #8]
 8004546:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 800454a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800454e:	433a      	orrs	r2, r7
 8004550:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8004554:	f8ce 2008 	str.w	r2, [lr, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004558:	68a2      	ldr	r2, [r4, #8]
 800455a:	07d4      	lsls	r4, r2, #31
 800455c:	d426      	bmi.n	80045ac <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800455e:	68a8      	ldr	r0, [r5, #8]
 8004560:	f010 0001 	ands.w	r0, r0, #1
 8004564:	d119      	bne.n	800459a <HAL_ADCEx_MultiModeConfigChannel+0xba>
        MODIFY_REG(tmpADC_Common->CCR,
 8004566:	688a      	ldr	r2, [r1, #8]
 8004568:	f8de 1008 	ldr.w	r1, [lr, #8]
 800456c:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8004570:	4332      	orrs	r2, r6
 8004572:	f021 010f 	bic.w	r1, r1, #15
 8004576:	430a      	orrs	r2, r1
 8004578:	f8ce 2008 	str.w	r2, [lr, #8]
 800457c:	e7d4      	b.n	8004528 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 800457e:	2002      	movs	r0, #2
}
 8004580:	b01d      	add	sp, #116	; 0x74
 8004582:	bdf0      	pop	{r4, r5, r6, r7, pc}
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004584:	490b      	ldr	r1, [pc, #44]	; (80045b4 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8004586:	688a      	ldr	r2, [r1, #8]
 8004588:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800458c:	608a      	str	r2, [r1, #8]
 800458e:	68a2      	ldr	r2, [r4, #8]
 8004590:	68a8      	ldr	r0, [r5, #8]
 8004592:	4310      	orrs	r0, r2
 8004594:	f010 0001 	ands.w	r0, r0, #1
 8004598:	d001      	beq.n	800459e <HAL_ADCEx_MultiModeConfigChannel+0xbe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800459a:	2000      	movs	r0, #0
 800459c:	e7c4      	b.n	8004528 <HAL_ADCEx_MultiModeConfigChannel+0x48>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800459e:	688a      	ldr	r2, [r1, #8]
 80045a0:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80045a4:	f022 020f 	bic.w	r2, r2, #15
 80045a8:	608a      	str	r2, [r1, #8]
 80045aa:	e7bd      	b.n	8004528 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 80045ac:	68aa      	ldr	r2, [r5, #8]
 80045ae:	e7bb      	b.n	8004528 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 80045b0:	50000100 	.word	0x50000100
 80045b4:	50000300 	.word	0x50000300

080045b8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80045b8:	b530      	push	{r4, r5, lr}
 80045ba:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80045bc:	2300      	movs	r3, #0
 80045be:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80045c0:	2800      	cmp	r0, #0
 80045c2:	d057      	beq.n	8004674 <HAL_COMP_Init+0xbc>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80045c4:	6802      	ldr	r2, [r0, #0]
 80045c6:	6813      	ldr	r3, [r2, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	4604      	mov	r4, r0
 80045cc:	db52      	blt.n	8004674 <HAL_COMP_Init+0xbc>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80045ce:	7f43      	ldrb	r3, [r0, #29]
 80045d0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d07b      	beq.n	80046d0 <HAL_COMP_Init+0x118>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 80045d8:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
               | hcomp->Init.BlankingSrce
 80045dc:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80045de:	6815      	ldr	r5, [r2, #0]
               | hcomp->Init.InputPlus
 80045e0:	4303      	orrs	r3, r0
               | hcomp->Init.BlankingSrce
 80045e2:	430b      	orrs	r3, r1
               | hcomp->Init.Hysteresis
 80045e4:	68e1      	ldr	r1, [r4, #12]
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80045e6:	6810      	ldr	r0, [r2, #0]
               | hcomp->Init.Hysteresis
 80045e8:	430b      	orrs	r3, r1
    tmp_csr = (  hcomp->Init.InputMinus
 80045ea:	6921      	ldr	r1, [r4, #16]
 80045ec:	430b      	orrs	r3, r1
    MODIFY_REG(hcomp->Instance->CSR,
 80045ee:	4940      	ldr	r1, [pc, #256]	; (80046f0 <HAL_COMP_Init+0x138>)
 80045f0:	4001      	ands	r1, r0
 80045f2:	430b      	orrs	r3, r1
 80045f4:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80045f6:	6813      	ldr	r3, [r2, #0]
 80045f8:	021b      	lsls	r3, r3, #8
 80045fa:	d501      	bpl.n	8004600 <HAL_COMP_Init+0x48>
 80045fc:	022d      	lsls	r5, r5, #8
 80045fe:	d551      	bpl.n	80046a4 <HAL_COMP_Init+0xec>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004600:	4b3c      	ldr	r3, [pc, #240]	; (80046f4 <HAL_COMP_Init+0x13c>)
 8004602:	429a      	cmp	r2, r3
 8004604:	d06a      	beq.n	80046dc <HAL_COMP_Init+0x124>
 8004606:	4b3c      	ldr	r3, [pc, #240]	; (80046f8 <HAL_COMP_Init+0x140>)
 8004608:	429a      	cmp	r2, r3
 800460a:	d06c      	beq.n	80046e6 <HAL_COMP_Init+0x12e>
 800460c:	3304      	adds	r3, #4
 800460e:	429a      	cmp	r2, r3
 8004610:	bf0b      	itete	eq
 8004612:	f06f 5200 	mvneq.w	r2, #536870912	; 0x20000000
 8004616:	f06f 4280 	mvnne.w	r2, #1073741824	; 0x40000000
 800461a:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 800461e:	f04f 4180 	movne.w	r1, #1073741824	; 0x40000000

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004622:	69a3      	ldr	r3, [r4, #24]
 8004624:	0798      	lsls	r0, r3, #30
 8004626:	d028      	beq.n	800467a <HAL_COMP_Init+0xc2>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004628:	4d34      	ldr	r5, [pc, #208]	; (80046fc <HAL_COMP_Init+0x144>)
 800462a:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800462c:	f013 0f10 	tst.w	r3, #16
 8004630:	bf14      	ite	ne
 8004632:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004634:	4010      	andeq	r0, r2
 8004636:	60a8      	str	r0, [r5, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004638:	4d30      	ldr	r5, [pc, #192]	; (80046fc <HAL_COMP_Init+0x144>)
 800463a:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800463c:	f013 0f20 	tst.w	r3, #32
 8004640:	bf14      	ite	ne
 8004642:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004644:	4010      	andeq	r0, r2
 8004646:	60e8      	str	r0, [r5, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004648:	482c      	ldr	r0, [pc, #176]	; (80046fc <HAL_COMP_Init+0x144>)
 800464a:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800464c:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800464e:	f013 0f02 	tst.w	r3, #2
 8004652:	bf14      	ite	ne
 8004654:	430d      	orrne	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004656:	4015      	andeq	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004658:	07db      	lsls	r3, r3, #31
 800465a:	6045      	str	r5, [r0, #4]
 800465c:	d51d      	bpl.n	800469a <HAL_COMP_Init+0xe2>
  SET_BIT(EXTI->IMR1, ExtiLine);
 800465e:	4b27      	ldr	r3, [pc, #156]	; (80046fc <HAL_COMP_Init+0x144>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	4311      	orrs	r1, r2
 8004664:	6019      	str	r1, [r3, #0]
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004666:	7f63      	ldrb	r3, [r4, #29]
 8004668:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800466c:	b18b      	cbz	r3, 8004692 <HAL_COMP_Init+0xda>
  HAL_StatusTypeDef status = HAL_OK;
 800466e:	2000      	movs	r0, #0
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 8004670:	b003      	add	sp, #12
 8004672:	bd30      	pop	{r4, r5, pc}
    status = HAL_ERROR;
 8004674:	2001      	movs	r0, #1
}
 8004676:	b003      	add	sp, #12
 8004678:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800467a:	4b20      	ldr	r3, [pc, #128]	; (80046fc <HAL_COMP_Init+0x144>)
 800467c:	6859      	ldr	r1, [r3, #4]
 800467e:	4011      	ands	r1, r2
 8004680:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004682:	6819      	ldr	r1, [r3, #0]
 8004684:	400a      	ands	r2, r1
 8004686:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004688:	7f63      	ldrb	r3, [r4, #29]
 800468a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1ed      	bne.n	800466e <HAL_COMP_Init+0xb6>
      hcomp->State = HAL_COMP_STATE_READY;
 8004692:	2301      	movs	r3, #1
 8004694:	7763      	strb	r3, [r4, #29]
}
 8004696:	b003      	add	sp, #12
 8004698:	bd30      	pop	{r4, r5, pc}
 800469a:	4918      	ldr	r1, [pc, #96]	; (80046fc <HAL_COMP_Init+0x144>)
 800469c:	680b      	ldr	r3, [r1, #0]
 800469e:	4013      	ands	r3, r2
 80046a0:	600b      	str	r3, [r1, #0]
}
 80046a2:	e7f1      	b.n	8004688 <HAL_COMP_Init+0xd0>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046a4:	4b16      	ldr	r3, [pc, #88]	; (8004700 <HAL_COMP_Init+0x148>)
 80046a6:	4917      	ldr	r1, [pc, #92]	; (8004704 <HAL_COMP_Init+0x14c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	099b      	lsrs	r3, r3, #6
 80046ac:	fba1 1303 	umull	r1, r3, r1, r3
 80046b0:	099b      	lsrs	r3, r3, #6
 80046b2:	3301      	adds	r3, #1
 80046b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80046bc:	9b01      	ldr	r3, [sp, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d09e      	beq.n	8004600 <HAL_COMP_Init+0x48>
        wait_loop_index--;
 80046c2:	9b01      	ldr	r3, [sp, #4]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80046c8:	9b01      	ldr	r3, [sp, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f9      	bne.n	80046c2 <HAL_COMP_Init+0x10a>
 80046ce:	e797      	b.n	8004600 <HAL_COMP_Init+0x48>
      hcomp->Lock = HAL_UNLOCKED;
 80046d0:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 80046d2:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 80046d4:	f7fe f810 	bl	80026f8 <HAL_COMP_MspInit>
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80046d8:	6822      	ldr	r2, [r4, #0]
 80046da:	e77d      	b.n	80045d8 <HAL_COMP_Init+0x20>
 80046dc:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80046e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046e4:	e79d      	b.n	8004622 <HAL_COMP_Init+0x6a>
 80046e6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80046ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046ee:	e798      	b.n	8004622 <HAL_COMP_Init+0x6a>
 80046f0:	ff007e0f 	.word	0xff007e0f
 80046f4:	40010200 	.word	0x40010200
 80046f8:	40010204 	.word	0x40010204
 80046fc:	40010400 	.word	0x40010400
 8004700:	20000694 	.word	0x20000694
 8004704:	053e2d63 	.word	0x053e2d63

08004708 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004708:	b1b0      	cbz	r0, 8004738 <HAL_CORDIC_Init+0x30>
{
 800470a:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800470c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004710:	4604      	mov	r4, r0
 8004712:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004716:	b153      	cbz	r3, 800472e <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004718:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800471a:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800471c:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 800471e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 8004722:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8004726:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800472a:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 800472c:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 800472e:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8004732:	f7fe f855 	bl	80027e0 <HAL_CORDIC_MspInit>
 8004736:	e7ef      	b.n	8004718 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8004738:	2001      	movs	r0, #1
}
 800473a:	4770      	bx	lr

0800473c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800473c:	4907      	ldr	r1, [pc, #28]	; (800475c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800473e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004740:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004742:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004746:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800474a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800474c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800474e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004756:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	e000ed00 	.word	0xe000ed00

08004760 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004760:	4b1c      	ldr	r3, [pc, #112]	; (80047d4 <HAL_NVIC_SetPriority+0x74>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004768:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800476a:	f1c3 0e07 	rsb	lr, r3, #7
 800476e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004772:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004776:	bf28      	it	cs
 8004778:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800477c:	f1bc 0f06 	cmp.w	ip, #6
 8004780:	d91b      	bls.n	80047ba <HAL_NVIC_SetPriority+0x5a>
 8004782:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004784:	f04f 3cff 	mov.w	ip, #4294967295
 8004788:	fa0c fc03 	lsl.w	ip, ip, r3
 800478c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004790:	f04f 3cff 	mov.w	ip, #4294967295
 8004794:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004798:	ea21 010c 	bic.w	r1, r1, ip
 800479c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800479e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a0:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80047a4:	db0c      	blt.n	80047c0 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047a6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80047aa:	0109      	lsls	r1, r1, #4
 80047ac:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80047b0:	b2c9      	uxtb	r1, r1
 80047b2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80047b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80047ba:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047bc:	4613      	mov	r3, r2
 80047be:	e7e7      	b.n	8004790 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <HAL_NVIC_SetPriority+0x78>)
 80047c2:	f000 000f 	and.w	r0, r0, #15
 80047c6:	0109      	lsls	r1, r1, #4
 80047c8:	4403      	add	r3, r0
 80047ca:	b2c9      	uxtb	r1, r1
 80047cc:	7619      	strb	r1, [r3, #24]
 80047ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80047d2:	bf00      	nop
 80047d4:	e000ed00 	.word	0xe000ed00
 80047d8:	e000ecfc 	.word	0xe000ecfc

080047dc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80047dc:	2800      	cmp	r0, #0
 80047de:	db07      	blt.n	80047f0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047e0:	4a04      	ldr	r2, [pc, #16]	; (80047f4 <HAL_NVIC_EnableIRQ+0x18>)
 80047e2:	0941      	lsrs	r1, r0, #5
 80047e4:	2301      	movs	r3, #1
 80047e6:	f000 001f 	and.w	r0, r0, #31
 80047ea:	4083      	lsls	r3, r0
 80047ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	e000e100 	.word	0xe000e100

080047f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047f8:	3801      	subs	r0, #1
 80047fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80047fe:	d210      	bcs.n	8004822 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004800:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004802:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004806:	4c08      	ldr	r4, [pc, #32]	; (8004828 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004808:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800480a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800480e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004812:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004814:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004816:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004818:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800481a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800481e:	6119      	str	r1, [r3, #16]
 8004820:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004822:	2001      	movs	r0, #1
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	e000ed00 	.word	0xe000ed00

0800482c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop

08004830 <HAL_SYSTICK_IRQHandler>:
{
 8004830:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004832:	f7ff fffb 	bl	800482c <HAL_SYSTICK_Callback>
}
 8004836:	bd08      	pop	{r3, pc}

08004838 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8004838:	b188      	cbz	r0, 800485e <HAL_DAC_Init+0x26>
{
 800483a:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800483c:	7903      	ldrb	r3, [r0, #4]
 800483e:	4604      	mov	r4, r0
 8004840:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004844:	b13b      	cbz	r3, 8004856 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004846:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8004848:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800484a:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800484c:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800484e:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8004850:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8004852:	4618      	mov	r0, r3
}
 8004854:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8004856:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8004858:	f7fd ffda 	bl	8002810 <HAL_DAC_MspInit>
 800485c:	e7f3      	b.n	8004846 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 800485e:	2001      	movs	r0, #1
}
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop

08004864 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004864:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004866:	f8d1 c008 	ldr.w	ip, [r1, #8]
  __HAL_LOCK(hdac);
 800486a:	2b01      	cmp	r3, #1
 800486c:	f000 80d0 	beq.w	8004a10 <HAL_DAC_ConfigChannel+0x1ac>
 8004870:	2301      	movs	r3, #1
{
 8004872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004876:	f1bc 0f04 	cmp.w	ip, #4
  __HAL_LOCK(hdac);
 800487a:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800487c:	f04f 0302 	mov.w	r3, #2
 8004880:	4605      	mov	r5, r0
 8004882:	460f      	mov	r7, r1
 8004884:	4616      	mov	r6, r2
 8004886:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004888:	d07d      	beq.n	8004986 <HAL_DAC_ConfigChannel+0x122>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800488a:	6800      	ldr	r0, [r0, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800488c:	f002 0610 	and.w	r6, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d108      	bne.n	80048a8 <HAL_DAC_ConfigChannel+0x44>
    tmpreg1 = hdac->Instance->CCR;
 8004896:	6b82      	ldr	r2, [r0, #56]	; 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004898:	6a3b      	ldr	r3, [r7, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800489a:	211f      	movs	r1, #31
 800489c:	40b1      	lsls	r1, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800489e:	40b3      	lsls	r3, r6
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80048a0:	ea22 0201 	bic.w	r2, r2, r1
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80048a4:	4313      	orrs	r3, r2
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80048a6:	6383      	str	r3, [r0, #56]	; 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80048a8:	69ba      	ldr	r2, [r7, #24]
  tmpreg1 = hdac->Instance->MCR;
 80048aa:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80048ac:	2107      	movs	r1, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80048ae:	2a01      	cmp	r2, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80048b0:	fa01 f106 	lsl.w	r1, r1, r6
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80048b4:	d063      	beq.n	800497e <HAL_DAC_ConfigChannel+0x11a>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80048b6:	2a02      	cmp	r2, #2
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	bf16      	itet	ne
 80048bc:	fab2 fe82 	clzne	lr, r2
    connectOnChip = DAC_MCR_MODE1_0;
 80048c0:	f04f 0e01 	moveq.w	lr, #1
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80048c4:	ea4f 1e5e 	movne.w	lr, lr, lsr #5
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80048c8:	797c      	ldrb	r4, [r7, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80048ca:	f897 8004 	ldrb.w	r8, [r7, #4]
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80048ce:	f1a4 0401 	sub.w	r4, r4, #1
 80048d2:	fab4 f484 	clz	r4, r4
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80048d6:	f1a8 0801 	sub.w	r8, r8, #1
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80048da:	0964      	lsrs	r4, r4, #5
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80048dc:	fab8 f888 	clz	r8, r8
 80048e0:	ea4f 1858 	mov.w	r8, r8, lsr #5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80048e4:	0264      	lsls	r4, r4, #9
 80048e6:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
 80048ea:	ea44 040c 	orr.w	r4, r4, ip
 80048ee:	ea44 040e 	orr.w	r4, r4, lr
 80048f2:	4314      	orrs	r4, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80048f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048f8:	40b2      	lsls	r2, r6
 80048fa:	430a      	orrs	r2, r1
 80048fc:	ea23 0802 	bic.w	r8, r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004900:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004904:	40b3      	lsls	r3, r6
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004906:	ea28 0803 	bic.w	r8, r8, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b02      	cmp	r3, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800490e:	f428 4840 	bic.w	r8, r8, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004912:	d074      	beq.n	80049fe <HAL_DAC_ConfigChannel+0x19a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004914:	ea48 0803 	orr.w	r8, r8, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004918:	40b4      	lsls	r4, r6
 800491a:	ea44 0408 	orr.w	r4, r4, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800491e:	63c4      	str	r4, [r0, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004920:	6803      	ldr	r3, [r0, #0]
 8004922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004926:	40b2      	lsls	r2, r6
 8004928:	ea23 0302 	bic.w	r3, r3, r2
 800492c:	6003      	str	r3, [r0, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800492e:	e9d7 2303 	ldrd	r2, r3, [r7, #12]
  tmpreg1 = hdac->Instance->CR;
 8004932:	6804      	ldr	r4, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004934:	f640 71fe 	movw	r1, #4094	; 0xffe
 8004938:	40b1      	lsls	r1, r6
 800493a:	ea24 0401 	bic.w	r4, r4, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800493e:	fa02 f106 	lsl.w	r1, r2, r6
 8004942:	4321      	orrs	r1, r4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004944:	019b      	lsls	r3, r3, #6
  hdac->Instance->CR = tmpreg1;
 8004946:	6001      	str	r1, [r0, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004948:	f3c2 0283 	ubfx	r2, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800494c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004950:	4313      	orrs	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004952:	24c0      	movs	r4, #192	; 0xc0
 8004954:	6802      	ldr	r2, [r0, #0]
 8004956:	40b4      	lsls	r4, r6
 8004958:	ea22 0204 	bic.w	r2, r2, r4
 800495c:	6002      	str	r2, [r0, #0]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800495e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8004960:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004964:	40b1      	lsls	r1, r6
 8004966:	ea22 0201 	bic.w	r2, r2, r1
 800496a:	40b3      	lsls	r3, r6
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800496c:	2100      	movs	r1, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800496e:	4313      	orrs	r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 8004970:	2201      	movs	r2, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004972:	6603      	str	r3, [r0, #96]	; 0x60

  /* Return function status */
  return HAL_OK;
 8004974:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 8004976:	712a      	strb	r2, [r5, #4]
  __HAL_UNLOCK(hdac);
 8004978:	7169      	strb	r1, [r5, #5]
}
 800497a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800497e:	697a      	ldr	r2, [r7, #20]
    connectOnChip = 0x00000000UL;
 8004980:	f04f 0e00 	mov.w	lr, #0
 8004984:	e7a0      	b.n	80048c8 <HAL_DAC_ConfigChannel+0x64>
    tickstart = HAL_GetTick();
 8004986:	f7fe ff35 	bl	80037f4 <HAL_GetTick>
 800498a:	4604      	mov	r4, r0
    if (Channel == DAC_CHANNEL_1)
 800498c:	b12e      	cbz	r6, 800499a <HAL_DAC_ConfigChannel+0x136>
 800498e:	e014      	b.n	80049ba <HAL_DAC_ConfigChannel+0x156>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004990:	f7fe ff30 	bl	80037f4 <HAL_GetTick>
 8004994:	1b03      	subs	r3, r0, r4
 8004996:	2b01      	cmp	r3, #1
 8004998:	d83c      	bhi.n	8004a14 <HAL_DAC_ConfigChannel+0x1b0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800499a:	682b      	ldr	r3, [r5, #0]
 800499c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499e:	041b      	lsls	r3, r3, #16
 80049a0:	d4f6      	bmi.n	8004990 <HAL_DAC_ConfigChannel+0x12c>
      HAL_Delay(1);
 80049a2:	2001      	movs	r0, #1
 80049a4:	f7fe ff2c 	bl	8003800 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80049a8:	6828      	ldr	r0, [r5, #0]
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	6403      	str	r3, [r0, #64]	; 0x40
 80049ae:	e00e      	b.n	80049ce <HAL_DAC_ConfigChannel+0x16a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80049b0:	f7fe ff20 	bl	80037f4 <HAL_GetTick>
 80049b4:	1b03      	subs	r3, r0, r4
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d82c      	bhi.n	8004a14 <HAL_DAC_ConfigChannel+0x1b0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80049ba:	682b      	ldr	r3, [r5, #0]
 80049bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049be:	2b00      	cmp	r3, #0
 80049c0:	dbf6      	blt.n	80049b0 <HAL_DAC_ConfigChannel+0x14c>
      HAL_Delay(1U);
 80049c2:	2001      	movs	r0, #1
 80049c4:	f7fe ff1c 	bl	8003800 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80049c8:	6828      	ldr	r0, [r5, #0]
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80049ce:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80049d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80049d2:	f8d7 c008 	ldr.w	ip, [r7, #8]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80049d6:	f006 0610 	and.w	r6, r6, #16
 80049da:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80049de:	40b1      	lsls	r1, r6
 80049e0:	40b2      	lsls	r2, r6
 80049e2:	ea23 0301 	bic.w	r3, r3, r1
 80049e6:	4313      	orrs	r3, r2
 80049e8:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80049ea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80049ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ee:	21ff      	movs	r1, #255	; 0xff
 80049f0:	40b1      	lsls	r1, r6
 80049f2:	40b2      	lsls	r2, r6
 80049f4:	ea23 0301 	bic.w	r3, r3, r1
 80049f8:	4313      	orrs	r3, r2
 80049fa:	64c3      	str	r3, [r0, #76]	; 0x4c
 80049fc:	e748      	b.n	8004890 <HAL_DAC_ConfigChannel+0x2c>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80049fe:	f000 fd91 	bl	8005524 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004a02:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <HAL_DAC_ConfigChannel+0x1d0>)
 8004a04:	4298      	cmp	r0, r3
 8004a06:	d90d      	bls.n	8004a24 <HAL_DAC_ConfigChannel+0x1c0>
  hdac->Instance->MCR = tmpreg1;
 8004a08:	6828      	ldr	r0, [r5, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004a0a:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 8004a0e:	e783      	b.n	8004918 <HAL_DAC_ConfigChannel+0xb4>
  __HAL_LOCK(hdac);
 8004a10:	2002      	movs	r0, #2
}
 8004a12:	4770      	bx	lr
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004a14:	692b      	ldr	r3, [r5, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004a16:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004a18:	f043 0308 	orr.w	r3, r3, #8
 8004a1c:	612b      	str	r3, [r5, #16]
          return HAL_TIMEOUT;
 8004a1e:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004a20:	712a      	strb	r2, [r5, #4]
          return HAL_TIMEOUT;
 8004a22:	e7aa      	b.n	800497a <HAL_DAC_ConfigChannel+0x116>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004a24:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <HAL_DAC_ConfigChannel+0x1d4>)
 8004a26:	4298      	cmp	r0, r3
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004a28:	bf88      	it	hi
 8004a2a:	f448 4880 	orrhi.w	r8, r8, #16384	; 0x4000
  hdac->Instance->MCR = tmpreg1;
 8004a2e:	6828      	ldr	r0, [r5, #0]
 8004a30:	e772      	b.n	8004918 <HAL_DAC_ConfigChannel+0xb4>
 8004a32:	bf00      	nop
 8004a34:	09896800 	.word	0x09896800
 8004a38:	04c4b400 	.word	0x04c4b400

08004a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a40:	680c      	ldr	r4, [r1, #0]
{
 8004a42:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a44:	2c00      	cmp	r4, #0
 8004a46:	d07d      	beq.n	8004b44 <HAL_GPIO_Init+0x108>
 8004a48:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a4c:	4e71      	ldr	r6, [pc, #452]	; (8004c14 <HAL_GPIO_Init+0x1d8>)
  uint32_t position = 0x00U;
 8004a4e:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a50:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a54:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a56:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 8004a5a:	ea17 0a04 	ands.w	sl, r7, r4
 8004a5e:	d06b      	beq.n	8004b38 <HAL_GPIO_Init+0xfc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a60:	f8de 1004 	ldr.w	r1, [lr, #4]
 8004a64:	f001 0203 	and.w	r2, r1, #3
 8004a68:	1e55      	subs	r5, r2, #1
 8004a6a:	2d01      	cmp	r5, #1
 8004a6c:	d96d      	bls.n	8004b4a <HAL_GPIO_Init+0x10e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a6e:	2a03      	cmp	r2, #3
 8004a70:	f040 80b1 	bne.w	8004bd6 <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a74:	fa02 f20c 	lsl.w	r2, r2, ip
 8004a78:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8004a7a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a7c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a7e:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a80:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8004a84:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a86:	d057      	beq.n	8004b38 <HAL_GPIO_Init+0xfc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a88:	4d63      	ldr	r5, [pc, #396]	; (8004c18 <HAL_GPIO_Init+0x1dc>)
 8004a8a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8004a8c:	f042 0201 	orr.w	r2, r2, #1
 8004a90:	662a      	str	r2, [r5, #96]	; 0x60
 8004a92:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8004a94:	f002 0201 	and.w	r2, r2, #1
 8004a98:	9203      	str	r2, [sp, #12]
 8004a9a:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004a9c:	f023 0203 	bic.w	r2, r3, #3
 8004aa0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004aa4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004aa8:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8004aac:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004aae:	00bf      	lsls	r7, r7, #2
 8004ab0:	f04f 080f 	mov.w	r8, #15
 8004ab4:	fa08 f807 	lsl.w	r8, r8, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ab8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004abc:	ea25 0908 	bic.w	r9, r5, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ac0:	d01a      	beq.n	8004af8 <HAL_GPIO_Init+0xbc>
 8004ac2:	4d56      	ldr	r5, [pc, #344]	; (8004c1c <HAL_GPIO_Init+0x1e0>)
 8004ac4:	42a8      	cmp	r0, r5
 8004ac6:	f000 8092 	beq.w	8004bee <HAL_GPIO_Init+0x1b2>
 8004aca:	4d55      	ldr	r5, [pc, #340]	; (8004c20 <HAL_GPIO_Init+0x1e4>)
 8004acc:	42a8      	cmp	r0, r5
 8004ace:	f000 8093 	beq.w	8004bf8 <HAL_GPIO_Init+0x1bc>
 8004ad2:	4d54      	ldr	r5, [pc, #336]	; (8004c24 <HAL_GPIO_Init+0x1e8>)
 8004ad4:	42a8      	cmp	r0, r5
 8004ad6:	f000 8083 	beq.w	8004be0 <HAL_GPIO_Init+0x1a4>
 8004ada:	4d53      	ldr	r5, [pc, #332]	; (8004c28 <HAL_GPIO_Init+0x1ec>)
 8004adc:	42a8      	cmp	r0, r5
 8004ade:	f000 8092 	beq.w	8004c06 <HAL_GPIO_Init+0x1ca>
 8004ae2:	4d52      	ldr	r5, [pc, #328]	; (8004c2c <HAL_GPIO_Init+0x1f0>)
 8004ae4:	42a8      	cmp	r0, r5
 8004ae6:	bf0c      	ite	eq
 8004ae8:	f04f 0805 	moveq.w	r8, #5
 8004aec:	f04f 0806 	movne.w	r8, #6
 8004af0:	fa08 f707 	lsl.w	r7, r8, r7
 8004af4:	ea49 0907 	orr.w	r9, r9, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004af8:	f8c2 9008 	str.w	r9, [r2, #8]
        temp = EXTI->RTSR1;
 8004afc:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 8004afe:	ea6f 050a 	mvn.w	r5, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b02:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 8004b04:	bf54      	ite	pl
 8004b06:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8004b08:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 8004b0c:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8004b0e:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b10:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 8004b12:	bf54      	ite	pl
 8004b14:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8004b16:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 8004b1a:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8004b1c:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b1e:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 8004b20:	bf54      	ite	pl
 8004b22:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8004b24:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 8004b28:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b2a:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b2c:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8004b2e:	bf54      	ite	pl
 8004b30:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8004b32:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 8004b36:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8004b38:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b3a:	fa34 f203 	lsrs.w	r2, r4, r3
 8004b3e:	f10c 0c02 	add.w	ip, ip, #2
 8004b42:	d188      	bne.n	8004a56 <HAL_GPIO_Init+0x1a>
  }
}
 8004b44:	b005      	add	sp, #20
 8004b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8004b4a:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b4e:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b52:	f04f 0803 	mov.w	r8, #3
 8004b56:	fa08 f80c 	lsl.w	r8, r8, ip
 8004b5a:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b5e:	fa05 f50c 	lsl.w	r5, r5, ip
 8004b62:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 8004b66:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b68:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8004b6c:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b70:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b74:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8004b78:	409f      	lsls	r7, r3
 8004b7a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8004b7e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004b80:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b82:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b86:	f8de 7008 	ldr.w	r7, [lr, #8]
 8004b8a:	fa07 f70c 	lsl.w	r7, r7, ip
 8004b8e:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b92:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8004b94:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b96:	fa02 f20c 	lsl.w	r2, r2, ip
 8004b9a:	f47f af6e 	bne.w	8004a7a <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3U];
 8004b9e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8004ba2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ba6:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004baa:	f8d9 7020 	ldr.w	r7, [r9, #32]
 8004bae:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bb0:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bb4:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bb8:	fa07 f708 	lsl.w	r7, r7, r8
 8004bbc:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bbe:	270f      	movs	r7, #15
 8004bc0:	fa07 f808 	lsl.w	r8, r7, r8
 8004bc4:	9f00      	ldr	r7, [sp, #0]
 8004bc6:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bca:	9f01      	ldr	r7, [sp, #4]
 8004bcc:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8004bd0:	f8c9 7020 	str.w	r7, [r9, #32]
 8004bd4:	e751      	b.n	8004a7a <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004bd6:	2503      	movs	r5, #3
 8004bd8:	fa05 f50c 	lsl.w	r5, r5, ip
 8004bdc:	43ed      	mvns	r5, r5
 8004bde:	e7cf      	b.n	8004b80 <HAL_GPIO_Init+0x144>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004be0:	f04f 0803 	mov.w	r8, #3
 8004be4:	fa08 f707 	lsl.w	r7, r8, r7
 8004be8:	ea49 0907 	orr.w	r9, r9, r7
 8004bec:	e784      	b.n	8004af8 <HAL_GPIO_Init+0xbc>
 8004bee:	fa0b f707 	lsl.w	r7, fp, r7
 8004bf2:	ea49 0907 	orr.w	r9, r9, r7
 8004bf6:	e77f      	b.n	8004af8 <HAL_GPIO_Init+0xbc>
 8004bf8:	f04f 0802 	mov.w	r8, #2
 8004bfc:	fa08 f707 	lsl.w	r7, r8, r7
 8004c00:	ea49 0907 	orr.w	r9, r9, r7
 8004c04:	e778      	b.n	8004af8 <HAL_GPIO_Init+0xbc>
 8004c06:	f04f 0804 	mov.w	r8, #4
 8004c0a:	fa08 f707 	lsl.w	r7, r8, r7
 8004c0e:	ea49 0907 	orr.w	r9, r9, r7
 8004c12:	e771      	b.n	8004af8 <HAL_GPIO_Init+0xbc>
 8004c14:	40010400 	.word	0x40010400
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	48000400 	.word	0x48000400
 8004c20:	48000800 	.word	0x48000800
 8004c24:	48000c00 	.word	0x48000c00
 8004c28:	48001000 	.word	0x48001000
 8004c2c:	48001400 	.word	0x48001400

08004c30 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004c30:	2800      	cmp	r0, #0
 8004c32:	d073      	beq.n	8004d1c <HAL_OPAMP_Init+0xec>
{
 8004c34:	b530      	push	{r4, r5, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004c36:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004c3a:	2b05      	cmp	r3, #5
{
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004c40:	d057      	beq.n	8004cf2 <HAL_OPAMP_Init+0xc2>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004c42:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d053      	beq.n	8004cf2 <HAL_OPAMP_Init+0xc2>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c4a:	4b35      	ldr	r3, [pc, #212]	; (8004d20 <HAL_OPAMP_Init+0xf0>)
 8004c4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	661a      	str	r2, [r3, #96]	; 0x60
 8004c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	9301      	str	r3, [sp, #4]
 8004c5c:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004c5e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004c62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004c66:	b90b      	cbnz	r3, 8004c6c <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004c68:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f7fd fde7 	bl	8002840 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004c72:	68a3      	ldr	r3, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004c74:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004c76:	f023 0220 	bic.w	r2, r3, #32
 8004c7a:	2a40      	cmp	r2, #64	; 0x40
      MODIFY_REG(hopamp->Instance->CSR,
 8004c7c:	6822      	ldr	r2, [r4, #0]
 8004c7e:	6811      	ldr	r1, [r2, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004c80:	d03a      	beq.n	8004cf8 <HAL_OPAMP_Init+0xc8>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004c82:	6865      	ldr	r5, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8004c84:	f021 0110 	bic.w	r1, r1, #16
 8004c88:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8004c8a:	68e0      	ldr	r0, [r4, #12]
      MODIFY_REG(hopamp->Instance->CSR,
 8004c8c:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8004c8e:	432b      	orrs	r3, r5
 8004c90:	4303      	orrs	r3, r0
 8004c92:	6920      	ldr	r0, [r4, #16]
 8004c94:	6811      	ldr	r1, [r2, #0]
 8004c96:	4303      	orrs	r3, r0
 8004c98:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004c9a:	4303      	orrs	r3, r0
 8004c9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004c9e:	4303      	orrs	r3, r0
 8004ca0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004ca2:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 8004ca6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004ca8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004cac:	481d      	ldr	r0, [pc, #116]	; (8004d24 <HAL_OPAMP_Init+0xf4>)
 8004cae:	4008      	ands	r0, r1
 8004cb0:	7d21      	ldrb	r1, [r4, #20]
 8004cb2:	f1a1 0101 	sub.w	r1, r1, #1
 8004cb6:	fab1 f181 	clz	r1, r1
 8004cba:	4303      	orrs	r3, r0
 8004cbc:	0949      	lsrs	r1, r1, #5
 8004cbe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004cc2:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004cc4:	6993      	ldr	r3, [r2, #24]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	db09      	blt.n	8004cde <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004cca:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8004cce:	6991      	ldr	r1, [r2, #24]
 8004cd0:	4303      	orrs	r3, r0
 8004cd2:	6a20      	ldr	r0, [r4, #32]
 8004cd4:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004cd8:	4303      	orrs	r3, r0
 8004cda:	430b      	orrs	r3, r1
 8004cdc:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004cde:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8004ce2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004ce6:	b9b3      	cbnz	r3, 8004d16 <HAL_OPAMP_Init+0xe6>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
  }
}
 8004cee:	b003      	add	sp, #12
 8004cf0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8004cf2:	2001      	movs	r0, #1
}
 8004cf4:	b003      	add	sp, #12
 8004cf6:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8004cf8:	f021 0110 	bic.w	r1, r1, #16
 8004cfc:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8004cfe:	6860      	ldr	r0, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8004d00:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8004d02:	4303      	orrs	r3, r0
 8004d04:	6920      	ldr	r0, [r4, #16]
 8004d06:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004d08:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004d0a:	4303      	orrs	r3, r0
 8004d0c:	430b      	orrs	r3, r1
 8004d0e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004d10:	6811      	ldr	r1, [r2, #0]
 8004d12:	432b      	orrs	r3, r5
 8004d14:	e7c5      	b.n	8004ca2 <HAL_OPAMP_Init+0x72>
    return status;
 8004d16:	2000      	movs	r0, #0
}
 8004d18:	b003      	add	sp, #12
 8004d1a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8004d1c:	2001      	movs	r0, #1
}
 8004d1e:	4770      	bx	lr
 8004d20:	40021000 	.word	0x40021000
 8004d24:	e0003e11 	.word	0xe0003e11

08004d28 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d28:	4a37      	ldr	r2, [pc, #220]	; (8004e08 <HAL_PWREx_ControlVoltageScaling+0xe0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d2a:	b960      	cbnz	r0, 8004d46 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d2c:	6813      	ldr	r3, [r2, #0]
 8004d2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d36:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d3a:	d01d      	beq.n	8004d78 <HAL_PWREx_ControlVoltageScaling+0x50>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d44:	4770      	bx	lr
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d46:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004d4a:	d007      	beq.n	8004d5c <HAL_PWREx_ControlVoltageScaling+0x34>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d4c:	6813      	ldr	r3, [r2, #0]
 8004d4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004d56:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d58:	6013      	str	r3, [r2, #0]
}
 8004d5a:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d5c:	6813      	ldr	r3, [r2, #0]
 8004d5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d66:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d6a:	d02b      	beq.n	8004dc4 <HAL_PWREx_ControlVoltageScaling+0x9c>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8004d70:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d72:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d76:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d80:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d82:	4822      	ldr	r0, [pc, #136]	; (8004e0c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004d84:	4922      	ldr	r1, [pc, #136]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d8e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d90:	6803      	ldr	r3, [r0, #0]
 8004d92:	2032      	movs	r0, #50	; 0x32
 8004d94:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d98:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d9a:	fba1 1303 	umull	r1, r3, r1, r3
 8004d9e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004da0:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004da2:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004da6:	d506      	bpl.n	8004db6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8004da8:	e000      	b.n	8004dac <HAL_PWREx_ControlVoltageScaling+0x84>
 8004daa:	b123      	cbz	r3, 8004db6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8004dac:	6951      	ldr	r1, [r2, #20]
 8004dae:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004db0:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004db4:	d4f9      	bmi.n	8004daa <HAL_PWREx_ControlVoltageScaling+0x82>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004db6:	4b14      	ldr	r3, [pc, #80]	; (8004e08 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	055b      	lsls	r3, r3, #21
  return HAL_OK;
 8004dbc:	bf54      	ite	pl
 8004dbe:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 8004dc0:	2003      	movmi	r0, #3
 8004dc2:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dcc:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004dce:	480f      	ldr	r0, [pc, #60]	; (8004e0c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004dd0:	490f      	ldr	r1, [pc, #60]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dda:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ddc:	6803      	ldr	r3, [r0, #0]
 8004dde:	2032      	movs	r0, #50	; 0x32
 8004de0:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004de4:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004de6:	fba1 1303 	umull	r1, r3, r1, r3
 8004dea:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dec:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004dee:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004df2:	d5e0      	bpl.n	8004db6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8004df4:	e001      	b.n	8004dfa <HAL_PWREx_ControlVoltageScaling+0xd2>
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0dd      	beq.n	8004db6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8004dfa:	6951      	ldr	r1, [r2, #20]
 8004dfc:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004dfe:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e02:	d5d8      	bpl.n	8004db6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8004e04:	e7f7      	b.n	8004df6 <HAL_PWREx_ControlVoltageScaling+0xce>
 8004e06:	bf00      	nop
 8004e08:	40007000 	.word	0x40007000
 8004e0c:	20000694 	.word	0x20000694
 8004e10:	431bde83 	.word	0x431bde83

08004e14 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e14:	2800      	cmp	r0, #0
 8004e16:	f000 81c3 	beq.w	80051a0 <HAL_RCC_OscConfig+0x38c>
{
 8004e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e1e:	6803      	ldr	r3, [r0, #0]
 8004e20:	07d9      	lsls	r1, r3, #31
{
 8004e22:	b082      	sub	sp, #8
 8004e24:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e26:	d52d      	bpl.n	8004e84 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e28:	49a6      	ldr	r1, [pc, #664]	; (80050c4 <HAL_RCC_OscConfig+0x2b0>)
 8004e2a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e2c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e2e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e32:	2a0c      	cmp	r2, #12
 8004e34:	f000 810a 	beq.w	800504c <HAL_RCC_OscConfig+0x238>
 8004e38:	2a08      	cmp	r2, #8
 8004e3a:	f000 810c 	beq.w	8005056 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e3e:	6863      	ldr	r3, [r4, #4]
 8004e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e44:	f000 8133 	beq.w	80050ae <HAL_RCC_OscConfig+0x29a>
 8004e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e4c:	f000 819b 	beq.w	8005186 <HAL_RCC_OscConfig+0x372>
 8004e50:	4d9c      	ldr	r5, [pc, #624]	; (80050c4 <HAL_RCC_OscConfig+0x2b0>)
 8004e52:	682a      	ldr	r2, [r5, #0]
 8004e54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004e58:	602a      	str	r2, [r5, #0]
 8004e5a:	682a      	ldr	r2, [r5, #0]
 8004e5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e60:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f040 8128 	bne.w	80050b8 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e68:	f7fe fcc4 	bl	80037f4 <HAL_GetTick>
 8004e6c:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e6e:	e005      	b.n	8004e7c <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e70:	f7fe fcc0 	bl	80037f4 <HAL_GetTick>
 8004e74:	1b80      	subs	r0, r0, r6
 8004e76:	2864      	cmp	r0, #100	; 0x64
 8004e78:	f200 8142 	bhi.w	8005100 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e7c:	682b      	ldr	r3, [r5, #0]
 8004e7e:	039f      	lsls	r7, r3, #14
 8004e80:	d4f6      	bmi.n	8004e70 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	079e      	lsls	r6, r3, #30
 8004e86:	d528      	bpl.n	8004eda <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e88:	4a8e      	ldr	r2, [pc, #568]	; (80050c4 <HAL_RCC_OscConfig+0x2b0>)
 8004e8a:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e8c:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e8e:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e92:	2b0c      	cmp	r3, #12
 8004e94:	f000 80ec 	beq.w	8005070 <HAL_RCC_OscConfig+0x25c>
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	f000 80ee 	beq.w	800507a <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e9e:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ea0:	4d88      	ldr	r5, [pc, #544]	; (80050c4 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 811d 	beq.w	80050e2 <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 8004ea8:	682b      	ldr	r3, [r5, #0]
 8004eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eae:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fe fca0 	bl	80037f4 <HAL_GetTick>
 8004eb4:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eb6:	e005      	b.n	8004ec4 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eb8:	f7fe fc9c 	bl	80037f4 <HAL_GetTick>
 8004ebc:	1b80      	subs	r0, r0, r6
 8004ebe:	2802      	cmp	r0, #2
 8004ec0:	f200 811e 	bhi.w	8005100 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	0558      	lsls	r0, r3, #21
 8004ec8:	d5f6      	bpl.n	8004eb8 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eca:	686b      	ldr	r3, [r5, #4]
 8004ecc:	6922      	ldr	r2, [r4, #16]
 8004ece:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004ed2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004ed6:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	071a      	lsls	r2, r3, #28
 8004edc:	d519      	bpl.n	8004f12 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ede:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ee0:	4d78      	ldr	r5, [pc, #480]	; (80050c4 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 809e 	beq.w	8005024 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8004ee8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004eec:	f043 0301 	orr.w	r3, r3, #1
 8004ef0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef4:	f7fe fc7e 	bl	80037f4 <HAL_GetTick>
 8004ef8:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004efa:	e005      	b.n	8004f08 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004efc:	f7fe fc7a 	bl	80037f4 <HAL_GetTick>
 8004f00:	1b80      	subs	r0, r0, r6
 8004f02:	2802      	cmp	r0, #2
 8004f04:	f200 80fc 	bhi.w	8005100 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f08:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004f0c:	079f      	lsls	r7, r3, #30
 8004f0e:	d5f5      	bpl.n	8004efc <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	0759      	lsls	r1, r3, #29
 8004f14:	d541      	bpl.n	8004f9a <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f16:	4b6b      	ldr	r3, [pc, #428]	; (80050c4 <HAL_RCC_OscConfig+0x2b0>)
 8004f18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f1a:	00d2      	lsls	r2, r2, #3
 8004f1c:	f100 80f4 	bmi.w	8005108 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004f26:	659a      	str	r2, [r3, #88]	; 0x58
 8004f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	9301      	str	r3, [sp, #4]
 8004f30:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004f32:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f34:	4e64      	ldr	r6, [pc, #400]	; (80050c8 <HAL_RCC_OscConfig+0x2b4>)
 8004f36:	6833      	ldr	r3, [r6, #0]
 8004f38:	05df      	lsls	r7, r3, #23
 8004f3a:	f140 8113 	bpl.w	8005164 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f3e:	68a3      	ldr	r3, [r4, #8]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	f000 80e3 	beq.w	800510c <HAL_RCC_OscConfig+0x2f8>
 8004f46:	2b05      	cmp	r3, #5
 8004f48:	f000 8169 	beq.w	800521e <HAL_RCC_OscConfig+0x40a>
 8004f4c:	4e5d      	ldr	r6, [pc, #372]	; (80050c4 <HAL_RCC_OscConfig+0x2b0>)
 8004f4e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8004f52:	f022 0201 	bic.w	r2, r2, #1
 8004f56:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8004f5a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8004f5e:	f022 0204 	bic.w	r2, r2, #4
 8004f62:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f040 80d7 	bne.w	800511a <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6c:	f7fe fc42 	bl	80037f4 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f70:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004f74:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f76:	e005      	b.n	8004f84 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f78:	f7fe fc3c 	bl	80037f4 <HAL_GetTick>
 8004f7c:	1bc0      	subs	r0, r0, r7
 8004f7e:	4540      	cmp	r0, r8
 8004f80:	f200 80be 	bhi.w	8005100 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f84:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8004f88:	079a      	lsls	r2, r3, #30
 8004f8a:	d4f5      	bmi.n	8004f78 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f8c:	b125      	cbz	r5, 8004f98 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f8e:	4a4d      	ldr	r2, [pc, #308]	; (80050c4 <HAL_RCC_OscConfig+0x2b0>)
 8004f90:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	069b      	lsls	r3, r3, #26
 8004f9c:	d518      	bpl.n	8004fd0 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f9e:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fa0:	4d48      	ldr	r5, [pc, #288]	; (80050c4 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 80ca 	beq.w	800513c <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8004fa8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004fac:	f043 0301 	orr.w	r3, r3, #1
 8004fb0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb4:	f7fe fc1e 	bl	80037f4 <HAL_GetTick>
 8004fb8:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fba:	e005      	b.n	8004fc8 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fbc:	f7fe fc1a 	bl	80037f4 <HAL_GetTick>
 8004fc0:	1b80      	subs	r0, r0, r6
 8004fc2:	2802      	cmp	r0, #2
 8004fc4:	f200 809c 	bhi.w	8005100 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fc8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004fcc:	079f      	lsls	r7, r3, #30
 8004fce:	d5f5      	bpl.n	8004fbc <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fd0:	69e0      	ldr	r0, [r4, #28]
 8004fd2:	b318      	cbz	r0, 800501c <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fd4:	4d3b      	ldr	r5, [pc, #236]	; (80050c4 <HAL_RCC_OscConfig+0x2b0>)
 8004fd6:	68ab      	ldr	r3, [r5, #8]
 8004fd8:	f003 030c 	and.w	r3, r3, #12
 8004fdc:	2b0c      	cmp	r3, #12
 8004fde:	f000 812c 	beq.w	800523a <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe2:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fe4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004fe6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fea:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fec:	f000 80da 	beq.w	80051a4 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004ff0:	68eb      	ldr	r3, [r5, #12]
 8004ff2:	f023 0303 	bic.w	r3, r3, #3
 8004ff6:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004ff8:	68eb      	ldr	r3, [r5, #12]
 8004ffa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005002:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005004:	f7fe fbf6 	bl	80037f4 <HAL_GetTick>
 8005008:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800500a:	e004      	b.n	8005016 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800500c:	f7fe fbf2 	bl	80037f4 <HAL_GetTick>
 8005010:	1b00      	subs	r0, r0, r4
 8005012:	2802      	cmp	r0, #2
 8005014:	d874      	bhi.n	8005100 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005016:	682b      	ldr	r3, [r5, #0]
 8005018:	019b      	lsls	r3, r3, #6
 800501a:	d4f7      	bmi.n	800500c <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 800501c:	2000      	movs	r0, #0
}
 800501e:	b002      	add	sp, #8
 8005020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8005024:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005028:	f023 0301 	bic.w	r3, r3, #1
 800502c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005030:	f7fe fbe0 	bl	80037f4 <HAL_GetTick>
 8005034:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005036:	e004      	b.n	8005042 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005038:	f7fe fbdc 	bl	80037f4 <HAL_GetTick>
 800503c:	1b80      	subs	r0, r0, r6
 800503e:	2802      	cmp	r0, #2
 8005040:	d85e      	bhi.n	8005100 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005042:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005046:	0798      	lsls	r0, r3, #30
 8005048:	d4f6      	bmi.n	8005038 <HAL_RCC_OscConfig+0x224>
 800504a:	e761      	b.n	8004f10 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800504c:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005050:	2903      	cmp	r1, #3
 8005052:	f47f aef4 	bne.w	8004e3e <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005056:	4a1b      	ldr	r2, [pc, #108]	; (80050c4 <HAL_RCC_OscConfig+0x2b0>)
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	0392      	lsls	r2, r2, #14
 800505c:	f57f af12 	bpl.w	8004e84 <HAL_RCC_OscConfig+0x70>
 8005060:	6862      	ldr	r2, [r4, #4]
 8005062:	2a00      	cmp	r2, #0
 8005064:	f47f af0e 	bne.w	8004e84 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8005068:	2001      	movs	r0, #1
}
 800506a:	b002      	add	sp, #8
 800506c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005070:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005074:	2a02      	cmp	r2, #2
 8005076:	f47f af12 	bne.w	8004e9e <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800507a:	4b12      	ldr	r3, [pc, #72]	; (80050c4 <HAL_RCC_OscConfig+0x2b0>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	055d      	lsls	r5, r3, #21
 8005080:	d502      	bpl.n	8005088 <HAL_RCC_OscConfig+0x274>
 8005082:	68e3      	ldr	r3, [r4, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0ef      	beq.n	8005068 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005088:	4a0e      	ldr	r2, [pc, #56]	; (80050c4 <HAL_RCC_OscConfig+0x2b0>)
 800508a:	6920      	ldr	r0, [r4, #16]
 800508c:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800508e:	490f      	ldr	r1, [pc, #60]	; (80050cc <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005090:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005094:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005098:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800509a:	6808      	ldr	r0, [r1, #0]
 800509c:	f7fe fb68 	bl	8003770 <HAL_InitTick>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d1e1      	bne.n	8005068 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	071a      	lsls	r2, r3, #28
 80050a8:	f57f af33 	bpl.w	8004f12 <HAL_RCC_OscConfig+0xfe>
 80050ac:	e717      	b.n	8004ede <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ae:	4a05      	ldr	r2, [pc, #20]	; (80050c4 <HAL_RCC_OscConfig+0x2b0>)
 80050b0:	6813      	ldr	r3, [r2, #0]
 80050b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80050b8:	f7fe fb9c 	bl	80037f4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050bc:	4e01      	ldr	r6, [pc, #4]	; (80050c4 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80050be:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050c0:	e00b      	b.n	80050da <HAL_RCC_OscConfig+0x2c6>
 80050c2:	bf00      	nop
 80050c4:	40021000 	.word	0x40021000
 80050c8:	40007000 	.word	0x40007000
 80050cc:	2000069c 	.word	0x2000069c
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d0:	f7fe fb90 	bl	80037f4 <HAL_GetTick>
 80050d4:	1b40      	subs	r0, r0, r5
 80050d6:	2864      	cmp	r0, #100	; 0x64
 80050d8:	d812      	bhi.n	8005100 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050da:	6833      	ldr	r3, [r6, #0]
 80050dc:	039b      	lsls	r3, r3, #14
 80050de:	d5f7      	bpl.n	80050d0 <HAL_RCC_OscConfig+0x2bc>
 80050e0:	e6cf      	b.n	8004e82 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 80050e2:	682b      	ldr	r3, [r5, #0]
 80050e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80050ea:	f7fe fb83 	bl	80037f4 <HAL_GetTick>
 80050ee:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050f0:	682b      	ldr	r3, [r5, #0]
 80050f2:	0559      	lsls	r1, r3, #21
 80050f4:	d5d6      	bpl.n	80050a4 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050f6:	f7fe fb7d 	bl	80037f4 <HAL_GetTick>
 80050fa:	1b80      	subs	r0, r0, r6
 80050fc:	2802      	cmp	r0, #2
 80050fe:	d9f7      	bls.n	80050f0 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8005100:	2003      	movs	r0, #3
}
 8005102:	b002      	add	sp, #8
 8005104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8005108:	2500      	movs	r5, #0
 800510a:	e713      	b.n	8004f34 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800510c:	4a65      	ldr	r2, [pc, #404]	; (80052a4 <HAL_RCC_OscConfig+0x490>)
 800510e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005112:	f043 0301 	orr.w	r3, r3, #1
 8005116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800511a:	f7fe fb6b 	bl	80037f4 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800511e:	4f61      	ldr	r7, [pc, #388]	; (80052a4 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8005120:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005122:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005126:	e004      	b.n	8005132 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005128:	f7fe fb64 	bl	80037f4 <HAL_GetTick>
 800512c:	1b80      	subs	r0, r0, r6
 800512e:	4540      	cmp	r0, r8
 8005130:	d8e6      	bhi.n	8005100 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005132:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005136:	0799      	lsls	r1, r3, #30
 8005138:	d5f6      	bpl.n	8005128 <HAL_RCC_OscConfig+0x314>
 800513a:	e727      	b.n	8004f8c <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 800513c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8005148:	f7fe fb54 	bl	80037f4 <HAL_GetTick>
 800514c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800514e:	e004      	b.n	800515a <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005150:	f7fe fb50 	bl	80037f4 <HAL_GetTick>
 8005154:	1b80      	subs	r0, r0, r6
 8005156:	2802      	cmp	r0, #2
 8005158:	d8d2      	bhi.n	8005100 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800515a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800515e:	0798      	lsls	r0, r3, #30
 8005160:	d4f6      	bmi.n	8005150 <HAL_RCC_OscConfig+0x33c>
 8005162:	e735      	b.n	8004fd0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005164:	6833      	ldr	r3, [r6, #0]
 8005166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800516c:	f7fe fb42 	bl	80037f4 <HAL_GetTick>
 8005170:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005172:	6833      	ldr	r3, [r6, #0]
 8005174:	05d8      	lsls	r0, r3, #23
 8005176:	f53f aee2 	bmi.w	8004f3e <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800517a:	f7fe fb3b 	bl	80037f4 <HAL_GetTick>
 800517e:	1bc0      	subs	r0, r0, r7
 8005180:	2802      	cmp	r0, #2
 8005182:	d9f6      	bls.n	8005172 <HAL_RCC_OscConfig+0x35e>
 8005184:	e7bc      	b.n	8005100 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005186:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800518a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800519c:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800519e:	e78b      	b.n	80050b8 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 80051a0:	2001      	movs	r0, #1
}
 80051a2:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80051a4:	f7fe fb26 	bl	80037f4 <HAL_GetTick>
 80051a8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051aa:	e004      	b.n	80051b6 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ac:	f7fe fb22 	bl	80037f4 <HAL_GetTick>
 80051b0:	1b80      	subs	r0, r0, r6
 80051b2:	2802      	cmp	r0, #2
 80051b4:	d8a4      	bhi.n	8005100 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051b6:	682b      	ldr	r3, [r5, #0]
 80051b8:	0199      	lsls	r1, r3, #6
 80051ba:	d4f7      	bmi.n	80051ac <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051bc:	68e9      	ldr	r1, [r5, #12]
 80051be:	4b3a      	ldr	r3, [pc, #232]	; (80052a8 <HAL_RCC_OscConfig+0x494>)
 80051c0:	6a22      	ldr	r2, [r4, #32]
 80051c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c4:	4e37      	ldr	r6, [pc, #220]	; (80052a4 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051c6:	400b      	ands	r3, r1
 80051c8:	4313      	orrs	r3, r2
 80051ca:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 80051ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80051d2:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80051d6:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 80051da:	3801      	subs	r0, #1
 80051dc:	0849      	lsrs	r1, r1, #1
 80051de:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80051e2:	3901      	subs	r1, #1
 80051e4:	0852      	lsrs	r2, r2, #1
 80051e6:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80051ea:	3a01      	subs	r2, #1
 80051ec:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80051f0:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80051f2:	682b      	ldr	r3, [r5, #0]
 80051f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051f8:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051fa:	68eb      	ldr	r3, [r5, #12]
 80051fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005200:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005202:	f7fe faf7 	bl	80037f4 <HAL_GetTick>
 8005206:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005208:	e005      	b.n	8005216 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800520a:	f7fe faf3 	bl	80037f4 <HAL_GetTick>
 800520e:	1b00      	subs	r0, r0, r4
 8005210:	2802      	cmp	r0, #2
 8005212:	f63f af75 	bhi.w	8005100 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005216:	6833      	ldr	r3, [r6, #0]
 8005218:	019a      	lsls	r2, r3, #6
 800521a:	d5f6      	bpl.n	800520a <HAL_RCC_OscConfig+0x3f6>
 800521c:	e6fe      	b.n	800501c <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800521e:	4b21      	ldr	r3, [pc, #132]	; (80052a4 <HAL_RCC_OscConfig+0x490>)
 8005220:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005224:	f042 0204 	orr.w	r2, r2, #4
 8005228:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800522c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005230:	f042 0201 	orr.w	r2, r2, #1
 8005234:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005238:	e76f      	b.n	800511a <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800523a:	2801      	cmp	r0, #1
 800523c:	f43f aeef 	beq.w	800501e <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8005240:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005242:	6a22      	ldr	r2, [r4, #32]
 8005244:	f003 0103 	and.w	r1, r3, #3
 8005248:	4291      	cmp	r1, r2
 800524a:	f47f af0d 	bne.w	8005068 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800524e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005250:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005254:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005256:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800525a:	f47f af05 	bne.w	8005068 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800525e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005260:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005264:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005268:	f47f aefe 	bne.w	8005068 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800526c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800526e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005272:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8005276:	f47f aef7 	bne.w	8005068 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800527a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800527c:	0852      	lsrs	r2, r2, #1
 800527e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8005282:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005284:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005288:	f47f aeee 	bne.w	8005068 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800528c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800528e:	0852      	lsrs	r2, r2, #1
 8005290:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005294:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005296:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 800529a:	bf14      	ite	ne
 800529c:	2001      	movne	r0, #1
 800529e:	2000      	moveq	r0, #0
 80052a0:	e6bd      	b.n	800501e <HAL_RCC_OscConfig+0x20a>
 80052a2:	bf00      	nop
 80052a4:	40021000 	.word	0x40021000
 80052a8:	019f800c 	.word	0x019f800c

080052ac <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80052ac:	4b18      	ldr	r3, [pc, #96]	; (8005310 <HAL_RCC_GetSysClockFreq+0x64>)
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	f002 020c 	and.w	r2, r2, #12
 80052b4:	2a04      	cmp	r2, #4
 80052b6:	d026      	beq.n	8005306 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	f002 020c 	and.w	r2, r2, #12
 80052be:	2a08      	cmp	r2, #8
 80052c0:	d023      	beq.n	800530a <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	f002 020c 	and.w	r2, r2, #12
 80052c8:	2a0c      	cmp	r2, #12
 80052ca:	d001      	beq.n	80052d0 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80052cc:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 80052ce:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052d0:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052d2:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052d4:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052d6:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 80052da:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052dc:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052e0:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052e4:	bf0c      	ite	eq
 80052e6:	4b0b      	ldreq	r3, [pc, #44]	; (8005314 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052e8:	4b0b      	ldrne	r3, [pc, #44]	; (8005318 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052ea:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80052f0:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052f4:	4b06      	ldr	r3, [pc, #24]	; (8005310 <HAL_RCC_GetSysClockFreq+0x64>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80052fc:	3301      	adds	r3, #1
 80052fe:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8005300:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8005304:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8005306:	4804      	ldr	r0, [pc, #16]	; (8005318 <HAL_RCC_GetSysClockFreq+0x6c>)
 8005308:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800530a:	4802      	ldr	r0, [pc, #8]	; (8005314 <HAL_RCC_GetSysClockFreq+0x68>)
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40021000 	.word	0x40021000
 8005314:	007a1200 	.word	0x007a1200
 8005318:	00f42400 	.word	0x00f42400

0800531c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800531c:	2800      	cmp	r0, #0
 800531e:	f000 80ee 	beq.w	80054fe <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005322:	4a78      	ldr	r2, [pc, #480]	; (8005504 <HAL_RCC_ClockConfig+0x1e8>)
{
 8005324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005328:	6813      	ldr	r3, [r2, #0]
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	428b      	cmp	r3, r1
 8005330:	460d      	mov	r5, r1
 8005332:	4604      	mov	r4, r0
 8005334:	d20c      	bcs.n	8005350 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005336:	6813      	ldr	r3, [r2, #0]
 8005338:	f023 030f 	bic.w	r3, r3, #15
 800533c:	430b      	orrs	r3, r1
 800533e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005340:	6813      	ldr	r3, [r2, #0]
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	428b      	cmp	r3, r1
 8005348:	d002      	beq.n	8005350 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800534a:	2001      	movs	r0, #1
}
 800534c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	07df      	lsls	r7, r3, #31
 8005354:	d569      	bpl.n	800542a <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005356:	6867      	ldr	r7, [r4, #4]
 8005358:	2f03      	cmp	r7, #3
 800535a:	f000 80a0 	beq.w	800549e <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800535e:	4b6a      	ldr	r3, [pc, #424]	; (8005508 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005360:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005362:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005364:	f000 8097 	beq.w	8005496 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005368:	055b      	lsls	r3, r3, #21
 800536a:	d5ee      	bpl.n	800534a <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 800536c:	f7ff ff9e 	bl	80052ac <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8005370:	4b66      	ldr	r3, [pc, #408]	; (800550c <HAL_RCC_ClockConfig+0x1f0>)
 8005372:	4298      	cmp	r0, r3
 8005374:	f240 80c0 	bls.w	80054f8 <HAL_RCC_ClockConfig+0x1dc>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005378:	4a63      	ldr	r2, [pc, #396]	; (8005508 <HAL_RCC_ClockConfig+0x1ec>)
 800537a:	6893      	ldr	r3, [r2, #8]
 800537c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005384:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005386:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800538a:	4e5f      	ldr	r6, [pc, #380]	; (8005508 <HAL_RCC_ClockConfig+0x1ec>)
 800538c:	68b3      	ldr	r3, [r6, #8]
 800538e:	f023 0303 	bic.w	r3, r3, #3
 8005392:	433b      	orrs	r3, r7
 8005394:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005396:	f7fe fa2d 	bl	80037f4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800539a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800539e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053a0:	e004      	b.n	80053ac <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053a2:	f7fe fa27 	bl	80037f4 <HAL_GetTick>
 80053a6:	1bc0      	subs	r0, r0, r7
 80053a8:	4540      	cmp	r0, r8
 80053aa:	d871      	bhi.n	8005490 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ac:	68b3      	ldr	r3, [r6, #8]
 80053ae:	6862      	ldr	r2, [r4, #4]
 80053b0:	f003 030c 	and.w	r3, r3, #12
 80053b4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80053b8:	d1f3      	bne.n	80053a2 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	079f      	lsls	r7, r3, #30
 80053be:	d436      	bmi.n	800542e <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 80053c0:	f1b9 0f00 	cmp.w	r9, #0
 80053c4:	d003      	beq.n	80053ce <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80053c6:	68b3      	ldr	r3, [r6, #8]
 80053c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053cc:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053ce:	4e4d      	ldr	r6, [pc, #308]	; (8005504 <HAL_RCC_ClockConfig+0x1e8>)
 80053d0:	6833      	ldr	r3, [r6, #0]
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	42ab      	cmp	r3, r5
 80053d8:	d846      	bhi.n	8005468 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	075a      	lsls	r2, r3, #29
 80053de:	d506      	bpl.n	80053ee <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053e0:	4949      	ldr	r1, [pc, #292]	; (8005508 <HAL_RCC_ClockConfig+0x1ec>)
 80053e2:	68e0      	ldr	r0, [r4, #12]
 80053e4:	688a      	ldr	r2, [r1, #8]
 80053e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053ea:	4302      	orrs	r2, r0
 80053ec:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ee:	071b      	lsls	r3, r3, #28
 80053f0:	d507      	bpl.n	8005402 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053f2:	4a45      	ldr	r2, [pc, #276]	; (8005508 <HAL_RCC_ClockConfig+0x1ec>)
 80053f4:	6921      	ldr	r1, [r4, #16]
 80053f6:	6893      	ldr	r3, [r2, #8]
 80053f8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80053fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005400:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005402:	f7ff ff53 	bl	80052ac <HAL_RCC_GetSysClockFreq>
 8005406:	4a40      	ldr	r2, [pc, #256]	; (8005508 <HAL_RCC_ClockConfig+0x1ec>)
 8005408:	4c41      	ldr	r4, [pc, #260]	; (8005510 <HAL_RCC_ClockConfig+0x1f4>)
 800540a:	6892      	ldr	r2, [r2, #8]
 800540c:	4941      	ldr	r1, [pc, #260]	; (8005514 <HAL_RCC_ClockConfig+0x1f8>)
 800540e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005412:	4603      	mov	r3, r0
 8005414:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8005416:	4840      	ldr	r0, [pc, #256]	; (8005518 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005418:	f002 021f 	and.w	r2, r2, #31
 800541c:	40d3      	lsrs	r3, r2
 800541e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8005420:	6800      	ldr	r0, [r0, #0]
}
 8005422:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8005426:	f7fe b9a3 	b.w	8003770 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800542a:	079e      	lsls	r6, r3, #30
 800542c:	d5cf      	bpl.n	80053ce <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800542e:	0758      	lsls	r0, r3, #29
 8005430:	d504      	bpl.n	800543c <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005432:	4935      	ldr	r1, [pc, #212]	; (8005508 <HAL_RCC_ClockConfig+0x1ec>)
 8005434:	688a      	ldr	r2, [r1, #8]
 8005436:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800543a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800543c:	0719      	lsls	r1, r3, #28
 800543e:	d506      	bpl.n	800544e <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005440:	4a31      	ldr	r2, [pc, #196]	; (8005508 <HAL_RCC_ClockConfig+0x1ec>)
 8005442:	6893      	ldr	r3, [r2, #8]
 8005444:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005448:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800544c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800544e:	4a2e      	ldr	r2, [pc, #184]	; (8005508 <HAL_RCC_ClockConfig+0x1ec>)
 8005450:	68a1      	ldr	r1, [r4, #8]
 8005452:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005454:	4e2b      	ldr	r6, [pc, #172]	; (8005504 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800545a:	430b      	orrs	r3, r1
 800545c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800545e:	6833      	ldr	r3, [r6, #0]
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	42ab      	cmp	r3, r5
 8005466:	d9b8      	bls.n	80053da <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005468:	6833      	ldr	r3, [r6, #0]
 800546a:	f023 030f 	bic.w	r3, r3, #15
 800546e:	432b      	orrs	r3, r5
 8005470:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005472:	f7fe f9bf 	bl	80037f4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005476:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800547a:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800547c:	6833      	ldr	r3, [r6, #0]
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	42ab      	cmp	r3, r5
 8005484:	d0a9      	beq.n	80053da <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005486:	f7fe f9b5 	bl	80037f4 <HAL_GetTick>
 800548a:	1bc0      	subs	r0, r0, r7
 800548c:	4540      	cmp	r0, r8
 800548e:	d9f5      	bls.n	800547c <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8005490:	2003      	movs	r0, #3
}
 8005492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005496:	039a      	lsls	r2, r3, #14
 8005498:	f53f af68 	bmi.w	800536c <HAL_RCC_ClockConfig+0x50>
 800549c:	e755      	b.n	800534a <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800549e:	4a1a      	ldr	r2, [pc, #104]	; (8005508 <HAL_RCC_ClockConfig+0x1ec>)
 80054a0:	6811      	ldr	r1, [r2, #0]
 80054a2:	0188      	lsls	r0, r1, #6
 80054a4:	f57f af51 	bpl.w	800534a <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054a8:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054aa:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054ac:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 80054ae:	4e17      	ldr	r6, [pc, #92]	; (800550c <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054b0:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 80054b4:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054b6:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054ba:	bf0c      	ite	eq
 80054bc:	4817      	ldreq	r0, [pc, #92]	; (800551c <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054be:	4818      	ldrne	r0, [pc, #96]	; (8005520 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054c0:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054c2:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054c6:	4810      	ldr	r0, [pc, #64]	; (8005508 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054c8:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80054cc:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054d0:	68c1      	ldr	r1, [r0, #12]
 80054d2:	f3c1 6141 	ubfx	r1, r1, #25, #2
 80054d6:	3101      	adds	r1, #1
 80054d8:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 80054da:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 80054de:	42b2      	cmp	r2, r6
 80054e0:	d90a      	bls.n	80054f8 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80054e2:	6882      	ldr	r2, [r0, #8]
 80054e4:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80054e8:	f43f af46 	beq.w	8005378 <HAL_RCC_ClockConfig+0x5c>
 80054ec:	0799      	lsls	r1, r3, #30
 80054ee:	d503      	bpl.n	80054f8 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80054f0:	68a3      	ldr	r3, [r4, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f43f af40 	beq.w	8005378 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80054f8:	f04f 0900 	mov.w	r9, #0
 80054fc:	e745      	b.n	800538a <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 80054fe:	2001      	movs	r0, #1
}
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40022000 	.word	0x40022000
 8005508:	40021000 	.word	0x40021000
 800550c:	04c4b400 	.word	0x04c4b400
 8005510:	08008fa8 	.word	0x08008fa8
 8005514:	20000694 	.word	0x20000694
 8005518:	2000069c 	.word	0x2000069c
 800551c:	007a1200 	.word	0x007a1200
 8005520:	00f42400 	.word	0x00f42400

08005524 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8005524:	4b01      	ldr	r3, [pc, #4]	; (800552c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8005526:	6818      	ldr	r0, [r3, #0]
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	20000694 	.word	0x20000694

08005530 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005532:	4a06      	ldr	r2, [pc, #24]	; (800554c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005534:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005536:	4906      	ldr	r1, [pc, #24]	; (8005550 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005538:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800553c:	6808      	ldr	r0, [r1, #0]
 800553e:	5cd3      	ldrb	r3, [r2, r3]
 8005540:	f003 031f 	and.w	r3, r3, #31
}
 8005544:	40d8      	lsrs	r0, r3
 8005546:	4770      	bx	lr
 8005548:	40021000 	.word	0x40021000
 800554c:	08008fb8 	.word	0x08008fb8
 8005550:	20000694 	.word	0x20000694

08005554 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005554:	4b05      	ldr	r3, [pc, #20]	; (800556c <HAL_RCC_GetPCLK2Freq+0x18>)
 8005556:	4a06      	ldr	r2, [pc, #24]	; (8005570 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005558:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800555a:	4906      	ldr	r1, [pc, #24]	; (8005574 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800555c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005560:	6808      	ldr	r0, [r1, #0]
 8005562:	5cd3      	ldrb	r3, [r2, r3]
 8005564:	f003 031f 	and.w	r3, r3, #31
}
 8005568:	40d8      	lsrs	r0, r3
 800556a:	4770      	bx	lr
 800556c:	40021000 	.word	0x40021000
 8005570:	08008fb8 	.word	0x08008fb8
 8005574:	20000694 	.word	0x20000694

08005578 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800557c:	6803      	ldr	r3, [r0, #0]
{
 800557e:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005580:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8005584:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005586:	d056      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005588:	4b9f      	ldr	r3, [pc, #636]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800558a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800558c:	00d5      	lsls	r5, r2, #3
 800558e:	f140 810c 	bpl.w	80057aa <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 8005592:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005594:	4d9d      	ldr	r5, [pc, #628]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005596:	682b      	ldr	r3, [r5, #0]
 8005598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800559c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800559e:	f7fe f929 	bl	80037f4 <HAL_GetTick>
 80055a2:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055a4:	e005      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a6:	f7fe f925 	bl	80037f4 <HAL_GetTick>
 80055aa:	1b83      	subs	r3, r0, r6
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	f200 8107 	bhi.w	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055b2:	682b      	ldr	r3, [r5, #0]
 80055b4:	05d8      	lsls	r0, r3, #23
 80055b6:	d5f6      	bpl.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055b8:	4d93      	ldr	r5, [pc, #588]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80055ba:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055be:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80055c2:	d027      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80055c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d025      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055ca:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055ce:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80055d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d6:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055da:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80055de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e2:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055e6:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055ea:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 80055ec:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055f0:	f140 8108 	bpl.w	8005804 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fe f8fe 	bl	80037f4 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f8:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80055fc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055fe:	e005      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005600:	f7fe f8f8 	bl	80037f4 <HAL_GetTick>
 8005604:	1b80      	subs	r0, r0, r6
 8005606:	4540      	cmp	r0, r8
 8005608:	f200 80da 	bhi.w	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800560c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005610:	079b      	lsls	r3, r3, #30
 8005612:	d5f5      	bpl.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x88>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005614:	6c23      	ldr	r3, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005616:	497c      	ldr	r1, [pc, #496]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005618:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800561c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005626:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005628:	b127      	cbz	r7, 8005634 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800562a:	4a77      	ldr	r2, [pc, #476]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800562c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800562e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005632:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	07de      	lsls	r6, r3, #31
 8005638:	d508      	bpl.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800563a:	4973      	ldr	r1, [pc, #460]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800563c:	6865      	ldr	r5, [r4, #4]
 800563e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005642:	f022 0203 	bic.w	r2, r2, #3
 8005646:	432a      	orrs	r2, r5
 8005648:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800564c:	079d      	lsls	r5, r3, #30
 800564e:	d508      	bpl.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005650:	496d      	ldr	r1, [pc, #436]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005652:	68a5      	ldr	r5, [r4, #8]
 8005654:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005658:	f022 020c 	bic.w	r2, r2, #12
 800565c:	432a      	orrs	r2, r5
 800565e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005662:	0759      	lsls	r1, r3, #29
 8005664:	d508      	bpl.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005666:	4968      	ldr	r1, [pc, #416]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005668:	68e5      	ldr	r5, [r4, #12]
 800566a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800566e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005672:	432a      	orrs	r2, r5
 8005674:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005678:	071a      	lsls	r2, r3, #28
 800567a:	d508      	bpl.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800567c:	4962      	ldr	r1, [pc, #392]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800567e:	6925      	ldr	r5, [r4, #16]
 8005680:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005684:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005688:	432a      	orrs	r2, r5
 800568a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800568e:	069f      	lsls	r7, r3, #26
 8005690:	d508      	bpl.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005692:	495d      	ldr	r1, [pc, #372]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005694:	6965      	ldr	r5, [r4, #20]
 8005696:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800569a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800569e:	432a      	orrs	r2, r5
 80056a0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056a4:	065e      	lsls	r6, r3, #25
 80056a6:	d508      	bpl.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056a8:	4957      	ldr	r1, [pc, #348]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80056aa:	69a5      	ldr	r5, [r4, #24]
 80056ac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80056b0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80056b4:	432a      	orrs	r2, r5
 80056b6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056ba:	061d      	lsls	r5, r3, #24
 80056bc:	d508      	bpl.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056be:	4952      	ldr	r1, [pc, #328]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80056c0:	69e5      	ldr	r5, [r4, #28]
 80056c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80056c6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80056ca:	432a      	orrs	r2, r5
 80056cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056d0:	05d9      	lsls	r1, r3, #23
 80056d2:	d508      	bpl.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056d4:	494c      	ldr	r1, [pc, #304]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80056d6:	6a25      	ldr	r5, [r4, #32]
 80056d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80056dc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80056e0:	432a      	orrs	r2, r5
 80056e2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056e6:	059a      	lsls	r2, r3, #22
 80056e8:	d508      	bpl.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056ea:	4947      	ldr	r1, [pc, #284]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80056ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80056ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80056f2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80056f6:	432a      	orrs	r2, r5
 80056f8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056fc:	055f      	lsls	r7, r3, #21
 80056fe:	d50b      	bpl.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005700:	4941      	ldr	r1, [pc, #260]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005702:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005704:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005708:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800570c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800570e:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005712:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005716:	d055      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005718:	051e      	lsls	r6, r3, #20
 800571a:	d50b      	bpl.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800571c:	493a      	ldr	r1, [pc, #232]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800571e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005720:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005724:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005728:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800572a:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800572e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005732:	d04c      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005734:	04dd      	lsls	r5, r3, #19
 8005736:	d50b      	bpl.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005738:	4933      	ldr	r1, [pc, #204]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800573a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800573c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005740:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005744:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005746:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800574a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800574e:	d043      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005750:	0499      	lsls	r1, r3, #18
 8005752:	d50b      	bpl.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005754:	492c      	ldr	r1, [pc, #176]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005756:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005758:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800575c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005760:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005762:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005766:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800576a:	d03a      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800576c:	045a      	lsls	r2, r3, #17
 800576e:	d50b      	bpl.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005770:	4925      	ldr	r1, [pc, #148]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005772:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005774:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005778:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800577c:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800577e:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005782:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005786:	d031      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005788:	041b      	lsls	r3, r3, #16
 800578a:	d50b      	bpl.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800578c:	4a1e      	ldr	r2, [pc, #120]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800578e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005790:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005794:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005798:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800579a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800579e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80057a2:	d028      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 80057a4:	b002      	add	sp, #8
 80057a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80057aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80057ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80057b0:	659a      	str	r2, [r3, #88]	; 0x58
 80057b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b8:	9301      	str	r3, [sp, #4]
 80057ba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80057bc:	2701      	movs	r7, #1
 80057be:	e6e9      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      status = ret;
 80057c0:	2003      	movs	r0, #3
 80057c2:	e731      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057c4:	68ca      	ldr	r2, [r1, #12]
 80057c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80057ca:	60ca      	str	r2, [r1, #12]
 80057cc:	e7a4      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057ce:	68ca      	ldr	r2, [r1, #12]
 80057d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80057d4:	60ca      	str	r2, [r1, #12]
 80057d6:	e7ad      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057d8:	68ca      	ldr	r2, [r1, #12]
 80057da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80057de:	60ca      	str	r2, [r1, #12]
 80057e0:	e7b6      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057e2:	68ca      	ldr	r2, [r1, #12]
 80057e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80057e8:	60ca      	str	r2, [r1, #12]
 80057ea:	e7bf      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057ec:	68ca      	ldr	r2, [r1, #12]
 80057ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80057f2:	60ca      	str	r2, [r1, #12]
 80057f4:	e7c8      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057f6:	68d3      	ldr	r3, [r2, #12]
 80057f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057fc:	60d3      	str	r3, [r2, #12]
}
 80057fe:	b002      	add	sp, #8
 8005800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005804:	4613      	mov	r3, r2
 8005806:	e706      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8005808:	40021000 	.word	0x40021000
 800580c:	40007000 	.word	0x40007000

08005810 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005810:	6a03      	ldr	r3, [r0, #32]
 8005812:	f023 0301 	bic.w	r3, r3, #1
 8005816:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005818:	6a03      	ldr	r3, [r0, #32]
{
 800581a:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800581c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800581e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005820:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005822:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005826:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800582a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800582c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800582e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8005832:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005834:	4d13      	ldr	r5, [pc, #76]	; (8005884 <TIM_OC1_SetConfig+0x74>)
 8005836:	42a8      	cmp	r0, r5
 8005838:	d00f      	beq.n	800585a <TIM_OC1_SetConfig+0x4a>
 800583a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800583e:	42a8      	cmp	r0, r5
 8005840:	d00b      	beq.n	800585a <TIM_OC1_SetConfig+0x4a>
 8005842:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005846:	42a8      	cmp	r0, r5
 8005848:	d007      	beq.n	800585a <TIM_OC1_SetConfig+0x4a>
 800584a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800584e:	42a8      	cmp	r0, r5
 8005850:	d003      	beq.n	800585a <TIM_OC1_SetConfig+0x4a>
 8005852:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005856:	42a8      	cmp	r0, r5
 8005858:	d10d      	bne.n	8005876 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800585a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800585c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005860:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005862:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005866:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800586a:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800586e:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005872:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005876:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005878:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800587a:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800587c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 800587e:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8005880:	6203      	str	r3, [r0, #32]
}
 8005882:	4770      	bx	lr
 8005884:	40012c00 	.word	0x40012c00

08005888 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005888:	6a03      	ldr	r3, [r0, #32]
 800588a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800588e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005890:	6a03      	ldr	r3, [r0, #32]
{
 8005892:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005894:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005896:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005898:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800589a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800589e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80058a2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058a4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80058a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058aa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058ae:	4d15      	ldr	r5, [pc, #84]	; (8005904 <TIM_OC3_SetConfig+0x7c>)
 80058b0:	42a8      	cmp	r0, r5
 80058b2:	d010      	beq.n	80058d6 <TIM_OC3_SetConfig+0x4e>
 80058b4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80058b8:	42a8      	cmp	r0, r5
 80058ba:	d00c      	beq.n	80058d6 <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058bc:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80058c0:	42a8      	cmp	r0, r5
 80058c2:	d00f      	beq.n	80058e4 <TIM_OC3_SetConfig+0x5c>
 80058c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80058c8:	42a8      	cmp	r0, r5
 80058ca:	d00b      	beq.n	80058e4 <TIM_OC3_SetConfig+0x5c>
 80058cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80058d0:	42a8      	cmp	r0, r5
 80058d2:	d10f      	bne.n	80058f4 <TIM_OC3_SetConfig+0x6c>
 80058d4:	e006      	b.n	80058e4 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058d6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80058d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058dc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80058e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058e4:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058e8:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058ec:	ea46 0c05 	orr.w	ip, r6, r5
 80058f0:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058f4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80058f6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80058f8:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80058fa:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 80058fc:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80058fe:	6203      	str	r3, [r0, #32]
}
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	40012c00 	.word	0x40012c00

08005908 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005908:	6a03      	ldr	r3, [r0, #32]
 800590a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800590e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005910:	6a03      	ldr	r3, [r0, #32]
{
 8005912:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005914:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005916:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005918:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800591a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800591e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005922:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005926:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005928:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800592c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005930:	4d14      	ldr	r5, [pc, #80]	; (8005984 <TIM_OC4_SetConfig+0x7c>)
 8005932:	42a8      	cmp	r0, r5
 8005934:	d010      	beq.n	8005958 <TIM_OC4_SetConfig+0x50>
 8005936:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800593a:	42a8      	cmp	r0, r5
 800593c:	d00c      	beq.n	8005958 <TIM_OC4_SetConfig+0x50>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800593e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005942:	42a8      	cmp	r0, r5
 8005944:	d00f      	beq.n	8005966 <TIM_OC4_SetConfig+0x5e>
 8005946:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800594a:	42a8      	cmp	r0, r5
 800594c:	d00b      	beq.n	8005966 <TIM_OC4_SetConfig+0x5e>
 800594e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005952:	42a8      	cmp	r0, r5
 8005954:	d10f      	bne.n	8005976 <TIM_OC4_SetConfig+0x6e>
 8005956:	e006      	b.n	8005966 <TIM_OC4_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005958:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 800595a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800595e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8005962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005966:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800596a:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800596e:	ea46 0c05 	orr.w	ip, r6, r5
 8005972:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005976:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005978:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800597a:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800597c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 800597e:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8005980:	6203      	str	r3, [r0, #32]
}
 8005982:	4770      	bx	lr
 8005984:	40012c00 	.word	0x40012c00

08005988 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005988:	2800      	cmp	r0, #0
 800598a:	f000 8081 	beq.w	8005a90 <HAL_TIM_Base_Init+0x108>
{
 800598e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005990:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005994:	4604      	mov	r4, r0
 8005996:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800599a:	2b00      	cmp	r3, #0
 800599c:	d06d      	beq.n	8005a7a <HAL_TIM_Base_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800599e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059a0:	493c      	ldr	r1, [pc, #240]	; (8005a94 <HAL_TIM_Base_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80059a2:	2302      	movs	r3, #2
 80059a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059a8:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80059aa:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059ac:	d051      	beq.n	8005a52 <HAL_TIM_Base_Init+0xca>
 80059ae:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80059b2:	d021      	beq.n	80059f8 <HAL_TIM_Base_Init+0x70>
 80059b4:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80059b8:	428a      	cmp	r2, r1
 80059ba:	d01d      	beq.n	80059f8 <HAL_TIM_Base_Init+0x70>
 80059bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059c0:	428a      	cmp	r2, r1
 80059c2:	d019      	beq.n	80059f8 <HAL_TIM_Base_Init+0x70>
 80059c4:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 80059c8:	428a      	cmp	r2, r1
 80059ca:	d042      	beq.n	8005a52 <HAL_TIM_Base_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059cc:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 80059d0:	428a      	cmp	r2, r1
 80059d2:	d057      	beq.n	8005a84 <HAL_TIM_Base_Init+0xfc>
 80059d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059d8:	428a      	cmp	r2, r1
 80059da:	d053      	beq.n	8005a84 <HAL_TIM_Base_Init+0xfc>
 80059dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059e0:	428a      	cmp	r2, r1
 80059e2:	d04f      	beq.n	8005a84 <HAL_TIM_Base_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e4:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059e6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ec:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80059ee:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80059f0:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059f2:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80059f4:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059f6:	e010      	b.n	8005a1a <HAL_TIM_Base_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 80059f8:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059fa:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005a00:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a06:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a08:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a0e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a10:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005a12:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005a14:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a16:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a18:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a1e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a22:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005a26:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005a2a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005a2e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005a32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a3a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005a3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a42:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005a46:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005a4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005a4e:	2000      	movs	r0, #0
}
 8005a50:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8005a52:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a54:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005a5a:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a60:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a62:	69a1      	ldr	r1, [r4, #24]
 8005a64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a68:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005a6a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a6c:	68e3      	ldr	r3, [r4, #12]
 8005a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a70:	6863      	ldr	r3, [r4, #4]
 8005a72:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005a74:	6963      	ldr	r3, [r4, #20]
 8005a76:	6313      	str	r3, [r2, #48]	; 0x30
 8005a78:	e7cf      	b.n	8005a1a <HAL_TIM_Base_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8005a7a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005a7e:	f7fc ff53 	bl	8002928 <HAL_TIM_Base_MspInit>
 8005a82:	e78c      	b.n	800599e <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a84:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a86:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a8c:	4303      	orrs	r3, r0
 8005a8e:	e7e9      	b.n	8005a64 <HAL_TIM_Base_Init+0xdc>
    return HAL_ERROR;
 8005a90:	2001      	movs	r0, #1
}
 8005a92:	4770      	bx	lr
 8005a94:	40012c00 	.word	0x40012c00

08005a98 <HAL_TIM_PWM_MspInit>:
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop

08005a9c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	f000 8081 	beq.w	8005ba4 <HAL_TIM_PWM_Init+0x108>
{
 8005aa2:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005aa4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d06d      	beq.n	8005b8e <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab2:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ab4:	493c      	ldr	r1, [pc, #240]	; (8005ba8 <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005abc:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005abe:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ac0:	d051      	beq.n	8005b66 <HAL_TIM_PWM_Init+0xca>
 8005ac2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005ac6:	d021      	beq.n	8005b0c <HAL_TIM_PWM_Init+0x70>
 8005ac8:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8005acc:	428a      	cmp	r2, r1
 8005ace:	d01d      	beq.n	8005b0c <HAL_TIM_PWM_Init+0x70>
 8005ad0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ad4:	428a      	cmp	r2, r1
 8005ad6:	d019      	beq.n	8005b0c <HAL_TIM_PWM_Init+0x70>
 8005ad8:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8005adc:	428a      	cmp	r2, r1
 8005ade:	d042      	beq.n	8005b66 <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ae0:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8005ae4:	428a      	cmp	r2, r1
 8005ae6:	d057      	beq.n	8005b98 <HAL_TIM_PWM_Init+0xfc>
 8005ae8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005aec:	428a      	cmp	r2, r1
 8005aee:	d053      	beq.n	8005b98 <HAL_TIM_PWM_Init+0xfc>
 8005af0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005af4:	428a      	cmp	r2, r1
 8005af6:	d04f      	beq.n	8005b98 <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005af8:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005afa:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005afc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b00:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8005b02:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8005b04:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b06:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005b08:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b0a:	e010      	b.n	8005b2e <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8005b0c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b0e:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005b14:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b1a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b1c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b22:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b24:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005b26:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005b28:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b2a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005b2c:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b32:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b36:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005b3a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005b3e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005b42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005b46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005b52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b56:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005b5a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005b5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005b62:	2000      	movs	r0, #0
}
 8005b64:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8005b66:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b68:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005b6e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b74:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b76:	69a1      	ldr	r1, [r4, #24]
 8005b78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b7c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005b7e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b80:	68e3      	ldr	r3, [r4, #12]
 8005b82:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005b84:	6863      	ldr	r3, [r4, #4]
 8005b86:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005b88:	6963      	ldr	r3, [r4, #20]
 8005b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8005b8c:	e7cf      	b.n	8005b2e <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8005b8e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005b92:	f7ff ff81 	bl	8005a98 <HAL_TIM_PWM_MspInit>
 8005b96:	e78c      	b.n	8005ab2 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b98:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b9a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ba0:	4303      	orrs	r3, r0
 8005ba2:	e7e9      	b.n	8005b78 <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 8005ba4:	2001      	movs	r0, #1
}
 8005ba6:	4770      	bx	lr
 8005ba8:	40012c00 	.word	0x40012c00

08005bac <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8005bac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d069      	beq.n	8005c88 <HAL_TIM_SlaveConfigSynchro+0xdc>
 8005bb4:	4684      	mov	ip, r0
 8005bb6:	2201      	movs	r2, #1
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bb8:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005bba:	2302      	movs	r3, #2
{
 8005bbc:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8005bbe:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc2:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005bc6:	6882      	ldr	r2, [r0, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005bc8:	684b      	ldr	r3, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005bca:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bcc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005bd0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005bd4:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005bd6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005bda:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005bde:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005be0:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8005be2:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8005be4:	d05e      	beq.n	8005ca4 <HAL_TIM_SlaveConfigSynchro+0xf8>
 8005be6:	d816      	bhi.n	8005c16 <HAL_TIM_SlaveConfigSynchro+0x6a>
 8005be8:	2b40      	cmp	r3, #64	; 0x40
 8005bea:	d06e      	beq.n	8005cca <HAL_TIM_SlaveConfigSynchro+0x11e>
 8005bec:	d933      	bls.n	8005c56 <HAL_TIM_SlaveConfigSynchro+0xaa>
 8005bee:	2b50      	cmp	r3, #80	; 0x50
 8005bf0:	d141      	bne.n	8005c76 <HAL_TIM_SlaveConfigSynchro+0xca>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bf2:	6a03      	ldr	r3, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf4:	688a      	ldr	r2, [r1, #8]
 8005bf6:	6909      	ldr	r1, [r1, #16]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bf8:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8005bfc:	431a      	orrs	r2, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bfe:	6a03      	ldr	r3, [r0, #32]
 8005c00:	f023 0301 	bic.w	r3, r3, #1
 8005c04:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c06:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c0c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c10:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005c12:	6202      	str	r2, [r0, #32]
 8005c14:	e00d      	b.n	8005c32 <HAL_TIM_SlaveConfigSynchro+0x86>
  switch (sSlaveConfig->InputTrigger)
 8005c16:	2b70      	cmp	r3, #112	; 0x70
 8005c18:	d038      	beq.n	8005c8c <HAL_TIM_SlaveConfigSynchro+0xe0>
 8005c1a:	2b6f      	cmp	r3, #111	; 0x6f
 8005c1c:	d92b      	bls.n	8005c76 <HAL_TIM_SlaveConfigSynchro+0xca>
 8005c1e:	4a2f      	ldr	r2, [pc, #188]	; (8005cdc <HAL_TIM_SlaveConfigSynchro+0x130>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d006      	beq.n	8005c32 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005c24:	d91d      	bls.n	8005c62 <HAL_TIM_SlaveConfigSynchro+0xb6>
 8005c26:	4a2e      	ldr	r2, [pc, #184]	; (8005ce0 <HAL_TIM_SlaveConfigSynchro+0x134>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d002      	beq.n	8005c32 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005c2c:	3230      	adds	r2, #48	; 0x30
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d121      	bne.n	8005c76 <HAL_TIM_SlaveConfigSynchro+0xca>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005c32:	68c3      	ldr	r3, [r0, #12]
 8005c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c38:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005c3a:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 8005c3c:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8005c3e:	2101      	movs	r1, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005c40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c44:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8005c46:	f88c 103d 	strb.w	r1, [ip, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005c4a:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  return HAL_OK;
 8005c4e:	4610      	mov	r0, r2
}
 8005c50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c54:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8005c56:	2b20      	cmp	r3, #32
 8005c58:	d0eb      	beq.n	8005c32 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005c5a:	d909      	bls.n	8005c70 <HAL_TIM_SlaveConfigSynchro+0xc4>
 8005c5c:	2b30      	cmp	r3, #48	; 0x30
 8005c5e:	d10a      	bne.n	8005c76 <HAL_TIM_SlaveConfigSynchro+0xca>
 8005c60:	e7e7      	b.n	8005c32 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005c62:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c66:	d0e4      	beq.n	8005c32 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005c68:	3a10      	subs	r2, #16
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d0e1      	beq.n	8005c32 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005c6e:	e002      	b.n	8005c76 <HAL_TIM_SlaveConfigSynchro+0xca>
 8005c70:	f033 0310 	bics.w	r3, r3, #16
 8005c74:	d0dd      	beq.n	8005c32 <HAL_TIM_SlaveConfigSynchro+0x86>
    htim->State = HAL_TIM_STATE_READY;
 8005c76:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005c78:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8005c7a:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005c7e:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 8005c82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c86:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005c88:	2002      	movs	r0, #2
}
 8005c8a:	4770      	bx	lr

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c8c:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8005c90:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c92:	6909      	ldr	r1, [r1, #16]
 8005c94:	4323      	orrs	r3, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c96:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c9a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005c9e:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ca0:	6083      	str	r3, [r0, #8]
 8005ca2:	e7c6      	b.n	8005c32 <HAL_TIM_SlaveConfigSynchro+0x86>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ca4:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ca6:	688c      	ldr	r4, [r1, #8]
 8005ca8:	6909      	ldr	r1, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005caa:	f023 0310 	bic.w	r3, r3, #16
 8005cae:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb0:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005cb2:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cb4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cbc:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cc0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8005cc4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005cc6:	6203      	str	r3, [r0, #32]
 8005cc8:	e7b3      	b.n	8005c32 <HAL_TIM_SlaveConfigSynchro+0x86>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005cca:	2c05      	cmp	r4, #5
 8005ccc:	d0d3      	beq.n	8005c76 <HAL_TIM_SlaveConfigSynchro+0xca>
 8005cce:	f1b4 1f01 	cmp.w	r4, #65537	; 0x10001
 8005cd2:	d0d0      	beq.n	8005c76 <HAL_TIM_SlaveConfigSynchro+0xca>
      tmpccer = htim->Instance->CCER;
 8005cd4:	6a02      	ldr	r2, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005cd6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005cd8:	6a03      	ldr	r3, [r0, #32]
 8005cda:	e791      	b.n	8005c00 <HAL_TIM_SlaveConfigSynchro+0x54>
 8005cdc:	00100030 	.word	0x00100030
 8005ce0:	00100040 	.word	0x00100040

08005ce4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ce4:	6a03      	ldr	r3, [r0, #32]
 8005ce6:	f023 0310 	bic.w	r3, r3, #16
 8005cea:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005cec:	6a03      	ldr	r3, [r0, #32]
{
 8005cee:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8005cf0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005cf2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cf6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005cfa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cfe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d02:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005d04:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d08:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d0c:	4d14      	ldr	r5, [pc, #80]	; (8005d60 <TIM_OC2_SetConfig+0x7c>)
 8005d0e:	42a8      	cmp	r0, r5
 8005d10:	d010      	beq.n	8005d34 <TIM_OC2_SetConfig+0x50>
 8005d12:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005d16:	42a8      	cmp	r0, r5
 8005d18:	d00c      	beq.n	8005d34 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d1a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005d1e:	42a8      	cmp	r0, r5
 8005d20:	d00f      	beq.n	8005d42 <TIM_OC2_SetConfig+0x5e>
 8005d22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d26:	42a8      	cmp	r0, r5
 8005d28:	d00b      	beq.n	8005d42 <TIM_OC2_SetConfig+0x5e>
 8005d2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d2e:	42a8      	cmp	r0, r5
 8005d30:	d10f      	bne.n	8005d52 <TIM_OC2_SetConfig+0x6e>
 8005d32:	e006      	b.n	8005d42 <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d34:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d3a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d42:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d46:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d4a:	ea46 0c05 	orr.w	ip, r6, r5
 8005d4e:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8005d52:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005d54:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005d56:	6182      	str	r2, [r0, #24]
}
 8005d58:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8005d5a:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005d5c:	6203      	str	r3, [r0, #32]
}
 8005d5e:	4770      	bx	lr
 8005d60:	40012c00 	.word	0x40012c00

08005d64 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8005d64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	f000 80f7 	beq.w	8005f5c <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8005d6e:	2301      	movs	r3, #1
{
 8005d70:	b570      	push	{r4, r5, r6, lr}
 8005d72:	4604      	mov	r4, r0
 8005d74:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8005d76:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005d7a:	2a14      	cmp	r2, #20
 8005d7c:	d80c      	bhi.n	8005d98 <HAL_TIM_PWM_ConfigChannel+0x34>
 8005d7e:	e8df f002 	tbb	[pc, r2]
 8005d82:	0b55      	.short	0x0b55
 8005d84:	0b6a0b0b 	.word	0x0b6a0b0b
 8005d88:	0b800b0b 	.word	0x0b800b0b
 8005d8c:	0b950b0b 	.word	0x0b950b0b
 8005d90:	0bab0b0b 	.word	0x0bab0b0b
 8005d94:	0b0b      	.short	0x0b0b
 8005d96:	11          	.byte	0x11
 8005d97:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8005d98:	2200      	movs	r2, #0
  switch (Channel)
 8005d9a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005d9c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005da4:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005da6:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005da8:	6a13      	ldr	r3, [r2, #32]
 8005daa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005dae:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 8005db0:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005db2:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8005db4:	6d11      	ldr	r1, [r2, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005db6:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8005dba:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dbe:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005dc2:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005dc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005dc8:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dcc:	4e65      	ldr	r6, [pc, #404]	; (8005f64 <HAL_TIM_PWM_ConfigChannel+0x200>)
 8005dce:	42b2      	cmp	r2, r6
 8005dd0:	d00f      	beq.n	8005df2 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8005dd2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005dd6:	42b2      	cmp	r2, r6
 8005dd8:	d00b      	beq.n	8005df2 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8005dda:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005dde:	42b2      	cmp	r2, r6
 8005de0:	d007      	beq.n	8005df2 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8005de2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005de6:	42b2      	cmp	r2, r6
 8005de8:	d003      	beq.n	8005df2 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8005dea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005dee:	42b2      	cmp	r2, r6
 8005df0:	d104      	bne.n	8005dfc <HAL_TIM_PWM_ConfigChannel+0x98>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005df2:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005df4:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005df8:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 8005dfc:	6050      	str	r0, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005dfe:	6511      	str	r1, [r2, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8005e00:	6869      	ldr	r1, [r5, #4]
 8005e02:	64d1      	str	r1, [r2, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8005e04:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e06:	6d13      	ldr	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e08:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e0e:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e10:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8005e12:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005e16:	6511      	str	r1, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e18:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8005e1a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8005e1e:	6511      	str	r1, [r2, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8005e20:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005e22:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005e24:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e2c:	6800      	ldr	r0, [r0, #0]
 8005e2e:	f7ff fcef 	bl	8005810 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e32:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e34:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e36:	f043 0308 	orr.w	r3, r3, #8
 8005e3a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e3c:	6982      	ldr	r2, [r0, #24]
 8005e3e:	f022 0204 	bic.w	r2, r2, #4
 8005e42:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e44:	6982      	ldr	r2, [r0, #24]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 8005e4a:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005e4c:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005e4e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e56:	6800      	ldr	r0, [r0, #0]
 8005e58:	f7ff ff44 	bl	8005ce4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e5c:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e5e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e64:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e66:	6982      	ldr	r2, [r0, #24]
 8005e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e6c:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e6e:	6982      	ldr	r2, [r0, #24]
 8005e70:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005e74:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 8005e76:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005e78:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005e7a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e82:	6800      	ldr	r0, [r0, #0]
 8005e84:	f7ff fd00 	bl	8005888 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e88:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e8a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e8c:	f043 0308 	orr.w	r3, r3, #8
 8005e90:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e92:	69c2      	ldr	r2, [r0, #28]
 8005e94:	f022 0204 	bic.w	r2, r2, #4
 8005e98:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e9a:	69c2      	ldr	r2, [r0, #28]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	61c2      	str	r2, [r0, #28]
  __HAL_UNLOCK(htim);
 8005ea0:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005ea2:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005ea4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eac:	6800      	ldr	r0, [r0, #0]
 8005eae:	f7ff fd2b 	bl	8005908 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eb2:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005eb4:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eb6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005eba:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ebc:	69c2      	ldr	r2, [r0, #28]
 8005ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec2:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ec4:	69c2      	ldr	r2, [r0, #28]
 8005ec6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005eca:	61c2      	str	r2, [r0, #28]
  __HAL_UNLOCK(htim);
 8005ecc:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005ece:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005ed0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ed8:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005eda:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005edc:	6a13      	ldr	r3, [r2, #32]
 8005ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ee2:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 8005ee4:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005ee6:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8005ee8:	6d11      	ldr	r1, [r2, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005eea:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005eee:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005ef2:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ef4:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8005ef6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005efa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efe:	4e19      	ldr	r6, [pc, #100]	; (8005f64 <HAL_TIM_PWM_ConfigChannel+0x200>)
 8005f00:	42b2      	cmp	r2, r6
 8005f02:	d00f      	beq.n	8005f24 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8005f04:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005f08:	42b2      	cmp	r2, r6
 8005f0a:	d00b      	beq.n	8005f24 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8005f0c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005f10:	42b2      	cmp	r2, r6
 8005f12:	d007      	beq.n	8005f24 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8005f14:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005f18:	42b2      	cmp	r2, r6
 8005f1a:	d003      	beq.n	8005f24 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8005f1c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005f20:	42b2      	cmp	r2, r6
 8005f22:	d104      	bne.n	8005f2e <HAL_TIM_PWM_ConfigChannel+0x1ca>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f24:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f26:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f2a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8005f2e:	6050      	str	r0, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005f30:	6511      	str	r1, [r2, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8005f32:	6869      	ldr	r1, [r5, #4]
 8005f34:	6491      	str	r1, [r2, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8005f36:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f38:	6d13      	ldr	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f3a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f3c:	f043 0308 	orr.w	r3, r3, #8
 8005f40:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f42:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8005f44:	f021 0104 	bic.w	r1, r1, #4
 8005f48:	6511      	str	r1, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f4a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8005f4c:	4301      	orrs	r1, r0
 8005f4e:	6511      	str	r1, [r2, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8005f50:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005f52:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005f54:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8005f5c:	2302      	movs	r3, #2
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40012c00 	.word	0x40012c00

08005f68 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f68:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d03e      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8005f70:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f72:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f74:	4d1f      	ldr	r5, [pc, #124]	; (8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005f76:	2302      	movs	r3, #2
 8005f78:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f7c:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8005f7e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005f80:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f82:	d028      	beq.n	8005fd6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005f84:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005f88:	42aa      	cmp	r2, r5
 8005f8a:	d024      	beq.n	8005fd6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f8c:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f8e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f96:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f98:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8005f9c:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9e:	d00c      	beq.n	8005fba <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8005fa0:	4b15      	ldr	r3, [pc, #84]	; (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d009      	beq.n	8005fba <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8005fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d005      	beq.n	8005fba <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8005fae:	42aa      	cmp	r2, r5
 8005fb0:	d003      	beq.n	8005fba <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8005fb2:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d104      	bne.n	8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fba:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fbc:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fc0:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fc2:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005fc4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005fcc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005fd0:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8005fd2:	4618      	mov	r0, r3
}
 8005fd4:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fd6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fd8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fdc:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fde:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fe2:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fe8:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8005fea:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fec:	e7e5      	b.n	8005fba <HAL_TIMEx_MasterConfigSynchronization+0x52>
  __HAL_LOCK(htim);
 8005fee:	2002      	movs	r0, #2
}
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	40012c00 	.word	0x40012c00
 8005ff8:	40000400 	.word	0x40000400

08005ffc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ffc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006000:	2b01      	cmp	r3, #1
 8006002:	d045      	beq.n	8006090 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 8006004:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006006:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 800600a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800600e:	4602      	mov	r2, r0
 8006010:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006012:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006014:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006016:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800601a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800601c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006020:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006022:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006028:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800602a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800602c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006030:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006032:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006034:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006038:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800603a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800603c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006040:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006042:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006046:	4c13      	ldr	r4, [pc, #76]	; (8006094 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8006048:	42a0      	cmp	r0, r4
 800604a:	d00b      	beq.n	8006064 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 800604c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006050:	42a0      	cmp	r0, r4
 8006052:	d007      	beq.n	8006064 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8006054:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8006056:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8006058:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 800605c:	4608      	mov	r0, r1
}
 800605e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006062:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006064:	69cc      	ldr	r4, [r1, #28]
 8006066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800606a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800606c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800606e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006072:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006076:	6a0c      	ldr	r4, [r1, #32]
 8006078:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800607c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800607e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006080:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006082:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006086:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006088:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800608c:	430b      	orrs	r3, r1
 800608e:	e7e1      	b.n	8006054 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8006090:	2002      	movs	r0, #2
}
 8006092:	4770      	bx	lr
 8006094:	40012c00 	.word	0x40012c00

08006098 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8006098:	4603      	mov	r3, r0
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800609a:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 800609e:	2801      	cmp	r0, #1
 80060a0:	d04c      	beq.n	800613c <HAL_TIMEx_ConfigBreakInput+0xa4>

  switch (sBreakInputConfig->Source)
 80060a2:	6810      	ldr	r0, [r2, #0]
 80060a4:	3801      	subs	r0, #1
 80060a6:	280f      	cmp	r0, #15
{
 80060a8:	b4f0      	push	{r4, r5, r6, r7}
 80060aa:	d825      	bhi.n	80060f8 <HAL_TIMEx_ConfigBreakInput+0x60>
 80060ac:	4c24      	ldr	r4, [pc, #144]	; (8006140 <HAL_TIMEx_ConfigBreakInput+0xa8>)
 80060ae:	4e25      	ldr	r6, [pc, #148]	; (8006144 <HAL_TIMEx_ConfigBreakInput+0xac>)
 80060b0:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 80060b4:	f856 c020 	ldr.w	ip, [r6, r0, lsl #2]
 80060b8:	4c23      	ldr	r4, [pc, #140]	; (8006148 <HAL_TIMEx_ConfigBreakInput+0xb0>)
 80060ba:	4e24      	ldr	r6, [pc, #144]	; (800614c <HAL_TIMEx_ConfigBreakInput+0xb4>)
 80060bc:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 80060c0:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 80060c4:	2901      	cmp	r1, #1
 80060c6:	d01d      	beq.n	8006104 <HAL_TIMEx_ConfigBreakInput+0x6c>
 80060c8:	2902      	cmp	r1, #2
 80060ca:	d131      	bne.n	8006130 <HAL_TIMEx_ConfigBreakInput+0x98>
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80060cc:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF2;
 80060ce:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80060d0:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80060d2:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF2;
 80060d4:	6e77      	ldr	r7, [r6, #100]	; 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80060d6:	fa01 f10c 	lsl.w	r1, r1, ip
 80060da:	ea81 0207 	eor.w	r2, r1, r7
 80060de:	402a      	ands	r2, r5
 80060e0:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80060e2:	ea80 0102 	eor.w	r1, r0, r2
 80060e6:	4021      	ands	r1, r4
 80060e8:	404a      	eors	r2, r1

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 80060ea:	6672      	str	r2, [r6, #100]	; 0x64
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80060f2:	2000      	movs	r0, #0

  return status;
}
 80060f4:	bcf0      	pop	{r4, r5, r6, r7}
 80060f6:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 80060f8:	2700      	movs	r7, #0
  switch (BreakInput)
 80060fa:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 80060fc:	46bc      	mov	ip, r7
 80060fe:	463c      	mov	r4, r7
 8006100:	463d      	mov	r5, r7
  switch (BreakInput)
 8006102:	d1e1      	bne.n	80060c8 <HAL_TIMEx_ConfigBreakInput+0x30>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006104:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF1;
 8006106:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006108:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800610a:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF1;
 800610c:	6e37      	ldr	r7, [r6, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800610e:	fa01 f10c 	lsl.w	r1, r1, ip
 8006112:	ea81 0207 	eor.w	r2, r1, r7
 8006116:	402a      	ands	r2, r5
 8006118:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800611a:	ea80 0102 	eor.w	r1, r0, r2
 800611e:	4021      	ands	r1, r4
 8006120:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 8006122:	6632      	str	r2, [r6, #96]	; 0x60
  __HAL_UNLOCK(htim);
 8006124:	2200      	movs	r2, #0
 8006126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800612a:	2000      	movs	r0, #0
}
 800612c:	bcf0      	pop	{r4, r5, r6, r7}
 800612e:	4770      	bx	lr
  __HAL_UNLOCK(htim);
 8006130:	2200      	movs	r2, #0
 8006132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  switch (BreakInput)
 8006136:	2001      	movs	r0, #1
}
 8006138:	bcf0      	pop	{r4, r5, r6, r7}
 800613a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800613c:	2002      	movs	r0, #2
}
 800613e:	4770      	bx	lr
 8006140:	08008fc0 	.word	0x08008fc0
 8006144:	08009040 	.word	0x08009040
 8006148:	08009000 	.word	0x08009000
 800614c:	08009080 	.word	0x08009080

08006150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006154:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006156:	6882      	ldr	r2, [r0, #8]
 8006158:	6900      	ldr	r0, [r0, #16]
 800615a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800615c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800615e:	4302      	orrs	r2, r0
 8006160:	430a      	orrs	r2, r1
 8006162:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006164:	49a5      	ldr	r1, [pc, #660]	; (80063fc <UART_SetConfig+0x2ac>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006166:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006168:	4029      	ands	r1, r5
 800616a:	430a      	orrs	r2, r1
 800616c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	68e1      	ldr	r1, [r4, #12]
 8006172:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006176:	430a      	orrs	r2, r1
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006178:	49a1      	ldr	r1, [pc, #644]	; (8006400 <UART_SetConfig+0x2b0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800617a:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800617c:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800617e:	69a2      	ldr	r2, [r4, #24]
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006180:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006182:	d06b      	beq.n	800625c <UART_SetConfig+0x10c>
    tmpreg |= huart->Init.OneBitSampling;
 8006184:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006186:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800618a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800618e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006190:	430a      	orrs	r2, r1
 8006192:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006196:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006198:	f022 020f 	bic.w	r2, r2, #15
 800619c:	430a      	orrs	r2, r1
 800619e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061a0:	4a98      	ldr	r2, [pc, #608]	; (8006404 <UART_SetConfig+0x2b4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d012      	beq.n	80061cc <UART_SetConfig+0x7c>
 80061a6:	4a98      	ldr	r2, [pc, #608]	; (8006408 <UART_SetConfig+0x2b8>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d036      	beq.n	800621a <UART_SetConfig+0xca>
 80061ac:	4a97      	ldr	r2, [pc, #604]	; (800640c <UART_SetConfig+0x2bc>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	f000 80f8 	beq.w	80063a4 <UART_SetConfig+0x254>
 80061b4:	4a96      	ldr	r2, [pc, #600]	; (8006410 <UART_SetConfig+0x2c0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	f000 80a4 	beq.w	8006304 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 80061bc:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061be:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80061c0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 80061c4:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80061c8:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 80061ca:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061cc:	4b91      	ldr	r3, [pc, #580]	; (8006414 <UART_SetConfig+0x2c4>)
 80061ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d2:	f003 0303 	and.w	r3, r3, #3
 80061d6:	3b01      	subs	r3, #1
 80061d8:	2b02      	cmp	r3, #2
 80061da:	f240 808d 	bls.w	80062f8 <UART_SetConfig+0x1a8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061de:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80061e2:	f000 80fc 	beq.w	80063de <UART_SetConfig+0x28e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80061e6:	f7ff f9b5 	bl	8005554 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80061ea:	2800      	cmp	r0, #0
 80061ec:	f000 80d8 	beq.w	80063a0 <UART_SetConfig+0x250>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80061f2:	6862      	ldr	r2, [r4, #4]
 80061f4:	4b88      	ldr	r3, [pc, #544]	; (8006418 <UART_SetConfig+0x2c8>)
 80061f6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80061fa:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061fe:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006202:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006206:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800620a:	f1a3 0210 	sub.w	r2, r3, #16
 800620e:	428a      	cmp	r2, r1
 8006210:	d8d4      	bhi.n	80061bc <UART_SetConfig+0x6c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006212:	6822      	ldr	r2, [r4, #0]
 8006214:	2000      	movs	r0, #0
 8006216:	60d3      	str	r3, [r2, #12]
 8006218:	e7d1      	b.n	80061be <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800621a:	4b7e      	ldr	r3, [pc, #504]	; (8006414 <UART_SetConfig+0x2c4>)
 800621c:	4a7f      	ldr	r2, [pc, #508]	; (800641c <UART_SetConfig+0x2cc>)
 800621e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006222:	f003 030c 	and.w	r3, r3, #12
 8006226:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006228:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800622c:	d07c      	beq.n	8006328 <UART_SetConfig+0x1d8>
    switch (clocksource)
 800622e:	2b08      	cmp	r3, #8
 8006230:	d8c4      	bhi.n	80061bc <UART_SetConfig+0x6c>
 8006232:	a201      	add	r2, pc, #4	; (adr r2, 8006238 <UART_SetConfig+0xe8>)
 8006234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006238:	0800635f 	.word	0x0800635f
 800623c:	080061e7 	.word	0x080061e7
 8006240:	080063db 	.word	0x080063db
 8006244:	080061bd 	.word	0x080061bd
 8006248:	08006323 	.word	0x08006323
 800624c:	080061bd 	.word	0x080061bd
 8006250:	080061bd 	.word	0x080061bd
 8006254:	080061bd 	.word	0x080061bd
 8006258:	080063cb 	.word	0x080063cb
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800625c:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8006260:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8006264:	4311      	orrs	r1, r2
 8006266:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800626a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 800626c:	4869      	ldr	r0, [pc, #420]	; (8006414 <UART_SetConfig+0x2c4>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800626e:	f022 020f 	bic.w	r2, r2, #15
 8006272:	430a      	orrs	r2, r1
 8006274:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006276:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800627a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800627e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006282:	f000 80a8 	beq.w	80063d6 <UART_SetConfig+0x286>
 8006286:	d80b      	bhi.n	80062a0 <UART_SetConfig+0x150>
 8006288:	2b00      	cmp	r3, #0
 800628a:	d038      	beq.n	80062fe <UART_SetConfig+0x1ae>
 800628c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006290:	d194      	bne.n	80061bc <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8006292:	f7ff f80b 	bl	80052ac <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006296:	2800      	cmp	r0, #0
 8006298:	f000 8082 	beq.w	80063a0 <UART_SetConfig+0x250>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800629c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800629e:	e004      	b.n	80062aa <UART_SetConfig+0x15a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062a4:	d18a      	bne.n	80061bc <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 80062a6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062aa:	4b5b      	ldr	r3, [pc, #364]	; (8006418 <UART_SetConfig+0x2c8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062ac:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062ae:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80062b2:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062b6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80062ba:	4299      	cmp	r1, r3
 80062bc:	f63f af7e 	bhi.w	80061bc <UART_SetConfig+0x6c>
 80062c0:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80062c4:	f63f af7a 	bhi.w	80061bc <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062c8:	2300      	movs	r3, #0
 80062ca:	4619      	mov	r1, r3
 80062cc:	f7f9 ffa4 	bl	8000218 <__aeabi_uldivmod>
 80062d0:	086a      	lsrs	r2, r5, #1
 80062d2:	0203      	lsls	r3, r0, #8
 80062d4:	0209      	lsls	r1, r1, #8
 80062d6:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80062da:	1898      	adds	r0, r3, r2
 80062dc:	f141 0100 	adc.w	r1, r1, #0
 80062e0:	462a      	mov	r2, r5
 80062e2:	2300      	movs	r3, #0
 80062e4:	f7f9 ff98 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062e8:	4a4d      	ldr	r2, [pc, #308]	; (8006420 <UART_SetConfig+0x2d0>)
 80062ea:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80062ee:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062f0:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062f2:	f63f af63 	bhi.w	80061bc <UART_SetConfig+0x6c>
 80062f6:	e78c      	b.n	8006212 <UART_SetConfig+0xc2>
 80062f8:	4a4a      	ldr	r2, [pc, #296]	; (8006424 <UART_SetConfig+0x2d4>)
 80062fa:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80062fc:	e794      	b.n	8006228 <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80062fe:	f7ff f917 	bl	8005530 <HAL_RCC_GetPCLK1Freq>
        break;
 8006302:	e7c8      	b.n	8006296 <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006304:	4b43      	ldr	r3, [pc, #268]	; (8006414 <UART_SetConfig+0x2c4>)
 8006306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800630e:	2b80      	cmp	r3, #128	; 0x80
 8006310:	d06d      	beq.n	80063ee <UART_SetConfig+0x29e>
 8006312:	d85d      	bhi.n	80063d0 <UART_SetConfig+0x280>
 8006314:	b303      	cbz	r3, 8006358 <UART_SetConfig+0x208>
 8006316:	2b40      	cmp	r3, #64	; 0x40
 8006318:	f47f af50 	bne.w	80061bc <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800631c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006320:	d020      	beq.n	8006364 <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetSysClockFreq();
 8006322:	f7fe ffc3 	bl	80052ac <HAL_RCC_GetSysClockFreq>
        break;
 8006326:	e760      	b.n	80061ea <UART_SetConfig+0x9a>
    switch (clocksource)
 8006328:	2b08      	cmp	r3, #8
 800632a:	f63f af47 	bhi.w	80061bc <UART_SetConfig+0x6c>
 800632e:	a201      	add	r2, pc, #4	; (adr r2, 8006334 <UART_SetConfig+0x1e4>)
 8006330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006334:	080063e5 	.word	0x080063e5
 8006338:	080063df 	.word	0x080063df
 800633c:	080063eb 	.word	0x080063eb
 8006340:	080061bd 	.word	0x080061bd
 8006344:	08006365 	.word	0x08006365
 8006348:	080061bd 	.word	0x080061bd
 800634c:	080061bd 	.word	0x080061bd
 8006350:	080061bd 	.word	0x080061bd
 8006354:	0800636d 	.word	0x0800636d
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006358:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800635c:	d042      	beq.n	80063e4 <UART_SetConfig+0x294>
        pclk = HAL_RCC_GetPCLK1Freq();
 800635e:	f7ff f8e7 	bl	8005530 <HAL_RCC_GetPCLK1Freq>
        break;
 8006362:	e742      	b.n	80061ea <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetSysClockFreq();
 8006364:	f7fe ffa2 	bl	80052ac <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006368:	b1d0      	cbz	r0, 80063a0 <UART_SetConfig+0x250>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800636a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800636c:	6862      	ldr	r2, [r4, #4]
 800636e:	4b2a      	ldr	r3, [pc, #168]	; (8006418 <UART_SetConfig+0x2c8>)
 8006370:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8006374:	fbb0 f0f1 	udiv	r0, r0, r1
 8006378:	0853      	lsrs	r3, r2, #1
 800637a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800637e:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006382:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006386:	f1a3 0210 	sub.w	r2, r3, #16
 800638a:	428a      	cmp	r2, r1
 800638c:	f63f af16 	bhi.w	80061bc <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006390:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8006394:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006396:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006398:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800639c:	4313      	orrs	r3, r2
 800639e:	60cb      	str	r3, [r1, #12]
 80063a0:	2000      	movs	r0, #0
 80063a2:	e70c      	b.n	80061be <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063a4:	4b1b      	ldr	r3, [pc, #108]	; (8006414 <UART_SetConfig+0x2c4>)
 80063a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	d01d      	beq.n	80063ee <UART_SetConfig+0x29e>
 80063b2:	d804      	bhi.n	80063be <UART_SetConfig+0x26e>
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0cf      	beq.n	8006358 <UART_SetConfig+0x208>
 80063b8:	2b10      	cmp	r3, #16
 80063ba:	d0af      	beq.n	800631c <UART_SetConfig+0x1cc>
 80063bc:	e6fe      	b.n	80061bc <UART_SetConfig+0x6c>
 80063be:	2b30      	cmp	r3, #48	; 0x30
 80063c0:	f47f aefc 	bne.w	80061bc <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80063c8:	d0d0      	beq.n	800636c <UART_SetConfig+0x21c>
    switch (clocksource)
 80063ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80063ce:	e710      	b.n	80061f2 <UART_SetConfig+0xa2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063d0:	2bc0      	cmp	r3, #192	; 0xc0
 80063d2:	d0f7      	beq.n	80063c4 <UART_SetConfig+0x274>
 80063d4:	e6f2      	b.n	80061bc <UART_SetConfig+0x6c>
 80063d6:	4814      	ldr	r0, [pc, #80]	; (8006428 <UART_SetConfig+0x2d8>)
 80063d8:	e767      	b.n	80062aa <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 80063da:	4813      	ldr	r0, [pc, #76]	; (8006428 <UART_SetConfig+0x2d8>)
 80063dc:	e709      	b.n	80061f2 <UART_SetConfig+0xa2>
        pclk = HAL_RCC_GetPCLK2Freq();
 80063de:	f7ff f8b9 	bl	8005554 <HAL_RCC_GetPCLK2Freq>
        break;
 80063e2:	e7c1      	b.n	8006368 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetPCLK1Freq();
 80063e4:	f7ff f8a4 	bl	8005530 <HAL_RCC_GetPCLK1Freq>
        break;
 80063e8:	e7be      	b.n	8006368 <UART_SetConfig+0x218>
        pclk = (uint32_t) HSI_VALUE;
 80063ea:	480f      	ldr	r0, [pc, #60]	; (8006428 <UART_SetConfig+0x2d8>)
 80063ec:	e7be      	b.n	800636c <UART_SetConfig+0x21c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063ee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80063f2:	480d      	ldr	r0, [pc, #52]	; (8006428 <UART_SetConfig+0x2d8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063f4:	f47f aefd 	bne.w	80061f2 <UART_SetConfig+0xa2>
 80063f8:	e7b8      	b.n	800636c <UART_SetConfig+0x21c>
 80063fa:	bf00      	nop
 80063fc:	cfff69f3 	.word	0xcfff69f3
 8006400:	40008000 	.word	0x40008000
 8006404:	40013800 	.word	0x40013800
 8006408:	40004400 	.word	0x40004400
 800640c:	40004800 	.word	0x40004800
 8006410:	40004c00 	.word	0x40004c00
 8006414:	40021000 	.word	0x40021000
 8006418:	080090d4 	.word	0x080090d4
 800641c:	080090c4 	.word	0x080090c4
 8006420:	000ffcff 	.word	0x000ffcff
 8006424:	080090c0 	.word	0x080090c0
 8006428:	00f42400 	.word	0x00f42400

0800642c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800642c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800642e:	07da      	lsls	r2, r3, #31
{
 8006430:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006432:	d506      	bpl.n	8006442 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006434:	6801      	ldr	r1, [r0, #0]
 8006436:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006438:	684a      	ldr	r2, [r1, #4]
 800643a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800643e:	4322      	orrs	r2, r4
 8006440:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006442:	079c      	lsls	r4, r3, #30
 8006444:	d506      	bpl.n	8006454 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006446:	6801      	ldr	r1, [r0, #0]
 8006448:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800644a:	684a      	ldr	r2, [r1, #4]
 800644c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006450:	4322      	orrs	r2, r4
 8006452:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006454:	0759      	lsls	r1, r3, #29
 8006456:	d506      	bpl.n	8006466 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006458:	6801      	ldr	r1, [r0, #0]
 800645a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800645c:	684a      	ldr	r2, [r1, #4]
 800645e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006462:	4322      	orrs	r2, r4
 8006464:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006466:	071a      	lsls	r2, r3, #28
 8006468:	d506      	bpl.n	8006478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800646a:	6801      	ldr	r1, [r0, #0]
 800646c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800646e:	684a      	ldr	r2, [r1, #4]
 8006470:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006474:	4322      	orrs	r2, r4
 8006476:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006478:	06dc      	lsls	r4, r3, #27
 800647a:	d506      	bpl.n	800648a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800647c:	6801      	ldr	r1, [r0, #0]
 800647e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006480:	688a      	ldr	r2, [r1, #8]
 8006482:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006486:	4322      	orrs	r2, r4
 8006488:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800648a:	0699      	lsls	r1, r3, #26
 800648c:	d506      	bpl.n	800649c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800648e:	6801      	ldr	r1, [r0, #0]
 8006490:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006492:	688a      	ldr	r2, [r1, #8]
 8006494:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006498:	4322      	orrs	r2, r4
 800649a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800649c:	065a      	lsls	r2, r3, #25
 800649e:	d509      	bpl.n	80064b4 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064a0:	6801      	ldr	r1, [r0, #0]
 80064a2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80064a4:	684a      	ldr	r2, [r1, #4]
 80064a6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80064aa:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064b0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064b2:	d00b      	beq.n	80064cc <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064b4:	061b      	lsls	r3, r3, #24
 80064b6:	d506      	bpl.n	80064c6 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064b8:	6802      	ldr	r2, [r0, #0]
 80064ba:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80064bc:	6853      	ldr	r3, [r2, #4]
 80064be:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80064c2:	430b      	orrs	r3, r1
 80064c4:	6053      	str	r3, [r2, #4]
  }
}
 80064c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064ca:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064cc:	684a      	ldr	r2, [r1, #4]
 80064ce:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80064d0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80064d4:	4322      	orrs	r2, r4
 80064d6:	604a      	str	r2, [r1, #4]
 80064d8:	e7ec      	b.n	80064b4 <UART_AdvFeatureConfig+0x88>
 80064da:	bf00      	nop

080064dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e4:	6804      	ldr	r4, [r0, #0]
{
 80064e6:	4607      	mov	r7, r0
 80064e8:	460e      	mov	r6, r1
 80064ea:	4615      	mov	r5, r2
 80064ec:	4699      	mov	r9, r3
 80064ee:	f1b8 3fff 	cmp.w	r8, #4294967295
 80064f2:	d10a      	bne.n	800650a <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064f4:	69e3      	ldr	r3, [r4, #28]
 80064f6:	ea36 0303 	bics.w	r3, r6, r3
 80064fa:	bf0c      	ite	eq
 80064fc:	2301      	moveq	r3, #1
 80064fe:	2300      	movne	r3, #0
 8006500:	429d      	cmp	r5, r3
 8006502:	d0f7      	beq.n	80064f4 <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8006504:	2000      	movs	r0, #0
}
 8006506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800650a:	69e2      	ldr	r2, [r4, #28]
 800650c:	ea36 0202 	bics.w	r2, r6, r2
 8006510:	bf0c      	ite	eq
 8006512:	2301      	moveq	r3, #1
 8006514:	2300      	movne	r3, #0
 8006516:	42ab      	cmp	r3, r5
 8006518:	d1f4      	bne.n	8006504 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800651a:	f7fd f96b 	bl	80037f4 <HAL_GetTick>
 800651e:	eba0 0009 	sub.w	r0, r0, r9
 8006522:	4540      	cmp	r0, r8
 8006524:	d833      	bhi.n	800658e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006526:	f1b8 0f00 	cmp.w	r8, #0
 800652a:	d030      	beq.n	800658e <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800652c:	683c      	ldr	r4, [r7, #0]
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	0758      	lsls	r0, r3, #29
 8006532:	4622      	mov	r2, r4
 8006534:	d5db      	bpl.n	80064ee <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006536:	69e3      	ldr	r3, [r4, #28]
 8006538:	0519      	lsls	r1, r3, #20
 800653a:	d5d8      	bpl.n	80064ee <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800653c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006540:	6223      	str	r3, [r4, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006546:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	e844 3100 	strex	r1, r3, [r4]
 800654e:	b139      	cbz	r1, 8006560 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006550:	e852 3f00 	ldrex	r3, [r2]
 8006554:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	e842 3100 	strex	r1, r3, [r2]
 800655c:	2900      	cmp	r1, #0
 800655e:	d1f7      	bne.n	8006550 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006560:	f102 0308 	add.w	r3, r2, #8
 8006564:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006568:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656c:	f102 0008 	add.w	r0, r2, #8
 8006570:	e840 3100 	strex	r1, r3, [r0]
 8006574:	2900      	cmp	r1, #0
 8006576:	d1f3      	bne.n	8006560 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8006578:	2320      	movs	r3, #32
 800657a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800657e:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006582:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 8006586:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006588:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 800658c:	e7bb      	b.n	8006506 <UART_WaitOnFlagUntilTimeout+0x2a>
 800658e:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006590:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006594:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	e842 3100 	strex	r1, r3, [r2]
 800659c:	2900      	cmp	r1, #0
 800659e:	d1f7      	bne.n	8006590 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	f102 0308 	add.w	r3, r2, #8
 80065a4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ac:	f102 0008 	add.w	r0, r2, #8
 80065b0:	e840 3100 	strex	r1, r3, [r0]
 80065b4:	2900      	cmp	r1, #0
 80065b6:	d1f3      	bne.n	80065a0 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 80065b8:	2320      	movs	r3, #32
 80065ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80065be:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80065c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 80065c6:	2003      	movs	r0, #3
 80065c8:	e79d      	b.n	8006506 <UART_WaitOnFlagUntilTimeout+0x2a>
 80065ca:	bf00      	nop

080065cc <HAL_UART_Init>:
  if (huart == NULL)
 80065cc:	2800      	cmp	r0, #0
 80065ce:	d066      	beq.n	800669e <HAL_UART_Init+0xd2>
{
 80065d0:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80065d2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 80065d6:	b082      	sub	sp, #8
 80065d8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d04c      	beq.n	8006678 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 80065de:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80065e0:	2324      	movs	r3, #36	; 0x24
 80065e2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80065e6:	6813      	ldr	r3, [r2, #0]
 80065e8:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065ec:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80065ee:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065f0:	f7ff fdae 	bl	8006150 <UART_SetConfig>
 80065f4:	2801      	cmp	r0, #1
 80065f6:	d03c      	beq.n	8006672 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d135      	bne.n	800666a <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	6859      	ldr	r1, [r3, #4]
 8006602:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8006606:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006608:	6899      	ldr	r1, [r3, #8]
 800660a:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800660e:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006610:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006612:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 8006614:	f041 0101 	orr.w	r1, r1, #1
 8006618:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800661e:	f7fd f8e9 	bl	80037f4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8006628:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800662a:	d40e      	bmi.n	800664a <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	075b      	lsls	r3, r3, #29
 8006630:	d427      	bmi.n	8006682 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006632:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006634:	2220      	movs	r2, #32
 8006636:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800663a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800663e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 8006642:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006644:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8006646:	b002      	add	sp, #8
 8006648:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800664a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	462a      	mov	r2, r5
 8006652:	4603      	mov	r3, r0
 8006654:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006658:	4620      	mov	r0, r4
 800665a:	f7ff ff3f 	bl	80064dc <UART_WaitOnFlagUntilTimeout>
 800665e:	b9e0      	cbnz	r0, 800669a <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	075b      	lsls	r3, r3, #29
 8006666:	d40c      	bmi.n	8006682 <HAL_UART_Init+0xb6>
 8006668:	e7e3      	b.n	8006632 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800666a:	4620      	mov	r0, r4
 800666c:	f7ff fede 	bl	800642c <UART_AdvFeatureConfig>
 8006670:	e7c5      	b.n	80065fe <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8006672:	2001      	movs	r0, #1
}
 8006674:	b002      	add	sp, #8
 8006676:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8006678:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800667c:	f7fc f9c8 	bl	8002a10 <HAL_UART_MspInit>
 8006680:	e7ad      	b.n	80065de <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006682:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	2200      	movs	r2, #0
 800668a:	4633      	mov	r3, r6
 800668c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006690:	4620      	mov	r0, r4
 8006692:	f7ff ff23 	bl	80064dc <UART_WaitOnFlagUntilTimeout>
 8006696:	2800      	cmp	r0, #0
 8006698:	d0cb      	beq.n	8006632 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800669a:	2003      	movs	r0, #3
 800669c:	e7d3      	b.n	8006646 <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 800669e:	2001      	movs	r0, #1
}
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop

080066a4 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066a4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d017      	beq.n	80066dc <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066ac:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80066ae:	2324      	movs	r3, #36	; 0x24
{
 80066b0:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 80066b2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066b6:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066b8:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066ba:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 80066bc:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066c0:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80066c4:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066c6:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066c8:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066ca:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 80066ce:	2220      	movs	r2, #32
 80066d0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 80066d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 80066d8:	4618      	mov	r0, r3
}
 80066da:	4770      	bx	lr
  __HAL_LOCK(huart);
 80066dc:	2002      	movs	r0, #2
}
 80066de:	4770      	bx	lr

080066e0 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066e0:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80066e4:	2a01      	cmp	r2, #1
 80066e6:	d037      	beq.n	8006758 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 80066e8:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066ea:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80066ec:	2024      	movs	r0, #36	; 0x24
{
 80066ee:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80066f0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066f4:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066f6:	6810      	ldr	r0, [r2, #0]
 80066f8:	f020 0001 	bic.w	r0, r0, #1
 80066fc:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80066fe:	6890      	ldr	r0, [r2, #8]
 8006700:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8006704:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006706:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006708:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800670a:	b310      	cbz	r0, 8006752 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800670c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800670e:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8006710:	4d12      	ldr	r5, [pc, #72]	; (800675c <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006712:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006716:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800671a:	4911      	ldr	r1, [pc, #68]	; (8006760 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 800671c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006720:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006724:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006728:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800672c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800672e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006730:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006734:	fbb1 f1f5 	udiv	r1, r1, r5
 8006738:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800673c:	2100      	movs	r1, #0
 800673e:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8006742:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006744:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8006746:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800674a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800674c:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8006750:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8006752:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006754:	4608      	mov	r0, r1
 8006756:	e7ef      	b.n	8006738 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8006758:	2002      	movs	r0, #2
}
 800675a:	4770      	bx	lr
 800675c:	080090ec 	.word	0x080090ec
 8006760:	080090f4 	.word	0x080090f4

08006764 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8006764:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8006768:	2a01      	cmp	r2, #1
 800676a:	d037      	beq.n	80067dc <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 800676c:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800676e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006770:	2024      	movs	r0, #36	; 0x24
{
 8006772:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8006774:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006778:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800677a:	6810      	ldr	r0, [r2, #0]
 800677c:	f020 0001 	bic.w	r0, r0, #1
 8006780:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006782:	6890      	ldr	r0, [r2, #8]
 8006784:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8006788:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800678a:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800678c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800678e:	b310      	cbz	r0, 80067d6 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006790:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006792:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006794:	4d12      	ldr	r5, [pc, #72]	; (80067e0 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006796:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800679a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800679e:	4911      	ldr	r1, [pc, #68]	; (80067e4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80067a0:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067a4:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80067a8:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80067ac:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067b0:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067b2:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067b4:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067b8:	fbb1 f1f5 	udiv	r1, r1, r5
 80067bc:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80067c0:	2100      	movs	r1, #0
 80067c2:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80067c6:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067c8:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80067ca:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80067ce:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80067d0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80067d4:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80067d6:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80067d8:	4608      	mov	r0, r1
 80067da:	e7ef      	b.n	80067bc <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80067dc:	2002      	movs	r0, #2
}
 80067de:	4770      	bx	lr
 80067e0:	080090ec 	.word	0x080090ec
 80067e4:	080090f4 	.word	0x080090f4

080067e8 <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 80067e8:	88c0      	ldrh	r0, [r0, #6]
 80067ea:	4770      	bx	lr

080067ec <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80067ec:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80067ee:	8840      	ldrh	r0, [r0, #2]
 80067f0:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 80067f4:	0c00      	lsrs	r0, r0, #16
 80067f6:	4770      	bx	lr

080067f8 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 80067f8:	b500      	push	{lr}
 80067fa:	140a      	asrs	r2, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80067fc:	f8b0 c000 	ldrh.w	ip, [r0]
{
 8006800:	460b      	mov	r3, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8006802:	fb02 fe02 	mul.w	lr, r2, r2
 8006806:	b209      	sxth	r1, r1
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8006808:	fb0c fc0c 	mul.w	ip, ip, ip
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 800680c:	fb01 ee01 	mla	lr, r1, r1, lr
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8006810:	45e6      	cmp	lr, ip
{
 8006812:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8006814:	d91e      	bls.n	8006854 <Circle_Limitation+0x5c>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8006816:	f890 30b2 	ldrb.w	r3, [r0, #178]	; 0xb2
 800681a:	ebc3 631e 	rsb	r3, r3, lr, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 800681e:	b2db      	uxtb	r3, r3
 8006820:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8006824:	2300      	movs	r3, #0

    sw_temp = Vqd.q * ( int32_t )table_element;
 8006826:	8880      	ldrh	r0, [r0, #4]
 8006828:	fb00 f101 	mul.w	r1, r0, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800682c:	4299      	cmp	r1, r3

    sw_temp = Vqd.d * ( int32_t )( table_element );
 800682e:	fb00 f202 	mul.w	r2, r0, r2
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8006832:	bfbc      	itt	lt
 8006834:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8006838:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 800683a:	2a00      	cmp	r2, #0
 800683c:	bfb8      	it	lt
 800683e:	f502 42ff 	addlt.w	r2, r2, #32640	; 0x7f80
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8006842:	ea4f 31e1 	mov.w	r1, r1, asr #15
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8006846:	bfb8      	it	lt
 8006848:	327f      	addlt	r2, #127	; 0x7f
 800684a:	f361 030f 	bfi	r3, r1, #0, #16
 800684e:	13d2      	asrs	r2, r2, #15
 8006850:	f362 431f 	bfi	r3, r2, #16, #16
  }

  return ( local_vqd );
 8006854:	b29a      	uxth	r2, r3
 8006856:	2000      	movs	r0, #0
 8006858:	f362 000f 	bfi	r0, r2, #0, #16
 800685c:	0c1b      	lsrs	r3, r3, #16
 800685e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8006862:	b005      	add	sp, #20
 8006864:	f85d fb04 	ldr.w	pc, [sp], #4

08006868 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8006868:	2300      	movs	r3, #0
 800686a:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 800686c:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 800686e:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8006872:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8006876:	f8a0 311b 	strh.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
  pHandle->RxFrameLevel = 0;
 800687a:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
}
 800687e:	4770      	bx	lr

08006880 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8006880:	b120      	cbz	r0, 800688c <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8006882:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8006886:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8006888:	9b00      	ldr	r3, [sp, #0]
 800688a:	60c3      	str	r3, [r0, #12]
  }
}
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop

08006890 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8006890:	b190      	cbz	r0, 80068b8 <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8006892:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8006894:	7803      	ldrb	r3, [r0, #0]
    nSum += pFrame->Size;
 8006896:	440b      	add	r3, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8006898:	b151      	cbz	r1, 80068b0 <FCP_CalcCRC+0x20>
 800689a:	1c82      	adds	r2, r0, #2
 800689c:	3901      	subs	r1, #1
 800689e:	3001      	adds	r0, #1
 80068a0:	fa52 f181 	uxtab	r1, r2, r1
    {
      nSum += pFrame->Buffer[idx];
 80068a4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80068a8:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80068aa:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 80068ac:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80068ae:	d1f9      	bne.n	80068a4 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 80068b0:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 80068b4:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  }

  return nCRC ;
}
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop

080068bc <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 80068bc:	b510      	push	{r4, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 80068be:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 80068c2:	4604      	mov	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 80068c4:	2100      	movs	r1, #0
 80068c6:	f002 fa8f 	bl	8008de8 <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 80068ca:	2300      	movs	r3, #0
 80068cc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 80068d0:	bd10      	pop	{r4, pc}
 80068d2:	bf00      	nop

080068d4 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80068d4:	f8b0 c100 	ldrh.w	ip, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 80068d8:	f10c 0201 	add.w	r2, ip, #1
 80068dc:	b292      	uxth	r2, r2
{
 80068de:	b510      	push	{r4, lr}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
  {
    pHandle->hNextMeasBufferIndex = 0u;
 80068e0:	2a80      	cmp	r2, #128	; 0x80
{
 80068e2:	4604      	mov	r4, r0
    pHandle->hNextMeasBufferIndex = 0u;
 80068e4:	bf28      	it	cs
 80068e6:	2200      	movcs	r2, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80068e8:	f824 101c 	strh.w	r1, [r4, ip, lsl #1]
{
 80068ec:	4608      	mov	r0, r1
 80068ee:	f8a4 2100 	strh.w	r2, [r4, #256]	; 0x100
 80068f2:	1ea3      	subs	r3, r4, #2
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 80068f4:	f8a4 c102 	strh.w	ip, [r4, #258]	; 0x102
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80068f8:	f104 0efe 	add.w	lr, r4, #254	; 0xfe
  int32_t wAux = 0;
 80068fc:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 80068fe:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006902:	4573      	cmp	r3, lr
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8006904:	4462      	add	r2, ip
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006906:	d1fa      	bne.n	80068fe <MPM_CalcElMotorPower+0x2a>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8006908:	2a00      	cmp	r2, #0
 800690a:	bfb8      	it	lt
 800690c:	327f      	addlt	r2, #127	; 0x7f
 800690e:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8006910:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8006914:	bd10      	pop	{r4, pc}
 8006916:	bf00      	nop

08006918 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8006918:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop

08006920 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8006920:	8a03      	ldrh	r3, [r0, #16]
 8006922:	8b42      	ldrh	r2, [r0, #26]
 8006924:	429a      	cmp	r2, r3
 8006926:	d306      	bcc.n	8006936 <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8006928:	8b82      	ldrh	r2, [r0, #28]
 800692a:	429a      	cmp	r2, r3
 800692c:	d901      	bls.n	8006932 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 800692e:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8006930:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8006932:	8ac0      	ldrh	r0, [r0, #22]
 8006934:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8006936:	2008      	movs	r0, #8
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop

0800693c <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 800693c:	2300      	movs	r3, #0
 800693e:	8203      	strh	r3, [r0, #16]
}
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop

08006944 <NTC_Init>:
{
 8006944:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8006946:	7803      	ldrb	r3, [r0, #0]
{
 8006948:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 800694a:	b123      	cbz	r3, 8006956 <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800694c:	8a43      	ldrh	r3, [r0, #18]
 800694e:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8006950:	2200      	movs	r2, #0
 8006952:	82c2      	strh	r2, [r0, #22]
}
 8006954:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8006956:	3004      	adds	r0, #4
 8006958:	f7fb fb9c 	bl	8002094 <RCM_RegisterRegConv>
 800695c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8006960:	4620      	mov	r0, r4
 8006962:	f7ff ffeb 	bl	800693c <NTC_Clear>
}
 8006966:	bd10      	pop	{r4, pc}

08006968 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8006968:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 800696a:	7803      	ldrb	r3, [r0, #0]
{
 800696c:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 800696e:	b113      	cbz	r3, 8006976 <NTC_CalcAvTemp+0xe>
 8006970:	2000      	movs	r0, #0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );

      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
    }

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8006972:	82e0      	strh	r0, [r4, #22]
  {
    pHandle->hFaultState = MC_NO_ERROR;
  }

  return ( pHandle->hFaultState );
}
 8006974:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8006976:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 800697a:	f7fb fc91 	bl	80022a0 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 800697e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006982:	4298      	cmp	r0, r3
 8006984:	d007      	beq.n	8006996 <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8006986:	8b23      	ldrh	r3, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8006988:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 800698a:	1e59      	subs	r1, r3, #1
      wtemp += hAux;
 800698c:	fb01 0002 	mla	r0, r1, r2, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8006990:	fbb0 f0f3 	udiv	r0, r0, r3
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8006994:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8006996:	4620      	mov	r0, r4
 8006998:	f7ff ffc2 	bl	8006920 <NTC_SetFaultState>
 800699c:	82e0      	strh	r0, [r4, #22]
}
 800699e:	bd10      	pop	{r4, pc}

080069a0 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80069a0:	7803      	ldrb	r3, [r0, #0]
 80069a2:	b983      	cbnz	r3, 80069c6 <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 80069a4:	8a02      	ldrh	r2, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 80069a6:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 80069a8:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80069ac:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 80069ae:	1a52      	subs	r2, r2, r1
    wTemp *= pHandle->hSensitivity;
 80069b0:	fb02 f303 	mul.w	r3, r2, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	bfbc      	itt	lt
 80069b8:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 80069bc:	33ff      	addlt	r3, #255	; 0xff
 80069be:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 80069c2:	b200      	sxth	r0, r0
 80069c4:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 80069c6:	8a80      	ldrh	r0, [r0, #20]
}
 80069c8:	b200      	sxth	r0, r0
 80069ca:	4770      	bx	lr

080069cc <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 80069cc:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 80069ce:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 80069d0:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 80069d2:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 80069d4:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 80069d6:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 80069d8:	6283      	str	r3, [r0, #40]	; 0x28
}
 80069da:	4770      	bx	lr

080069dc <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 80069dc:	8081      	strh	r1, [r0, #4]
}
 80069de:	4770      	bx	lr

080069e0 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 80069e0:	80c1      	strh	r1, [r0, #6]
}
 80069e2:	4770      	bx	lr

080069e4 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 80069e4:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop

080069ec <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 80069ec:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop

080069f4 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 80069f4:	6081      	str	r1, [r0, #8]

  return;
}
 80069f6:	4770      	bx	lr

080069f8 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 80069f8:	8b00      	ldrh	r0, [r0, #24]
 80069fa:	4770      	bx	lr

080069fc <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 80069fc:	8b40      	ldrh	r0, [r0, #26]
 80069fe:	4770      	bx	lr

08006a00 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8006a00:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8006a02:	4770      	bx	lr

08006a04 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8006a04:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop

08006a0c <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006a0c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8006a10:	4603      	mov	r3, r0
 8006a12:	b510      	push	{r4, lr}

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8006a14:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8006a18:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8006a1c:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006a20:	fb01 f202 	mul.w	r2, r1, r2
  if ( pHandle->hKiGain == 0 )
 8006a24:	b18c      	cbz	r4, 8006a4a <PI_Controller+0x3e>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8006a26:	fb04 f101 	mul.w	r1, r4, r1
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8006a2a:	689c      	ldr	r4, [r3, #8]

    if ( wIntegral_sum_temp < 0 )
 8006a2c:	eb14 0e01 	adds.w	lr, r4, r1
 8006a30:	d421      	bmi.n	8006a76 <PI_Controller+0x6a>
    {
      if ( pHandle->wIntegralTerm < 0 )
      {
        if ( wIntegral_Term < 0 )
        {
          wIntegral_sum_temp = -INT32_MAX;
 8006a32:	420c      	tst	r4, r1
 8006a34:	4916      	ldr	r1, [pc, #88]	; (8006a90 <PI_Controller+0x84>)
 8006a36:	bf48      	it	mi
 8006a38:	468e      	movmi	lr, r1
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8006a3a:	68d9      	ldr	r1, [r3, #12]
 8006a3c:	4571      	cmp	r1, lr
 8006a3e:	db05      	blt.n	8006a4c <PI_Controller+0x40>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8006a40:	6919      	ldr	r1, [r3, #16]
 8006a42:	4571      	cmp	r1, lr
 8006a44:	dc02      	bgt.n	8006a4c <PI_Controller+0x40>
    {
      pHandle->wIntegralTerm = pHandle->wLowerIntegralLimit;
    }
    else
    {
      pHandle->wIntegralTerm = wIntegral_sum_temp;
 8006a46:	4671      	mov	r1, lr
 8006a48:	e000      	b.n	8006a4c <PI_Controller+0x40>
 8006a4a:	4621      	mov	r1, r4
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8006a4c:	8b9c      	ldrh	r4, [r3, #28]
 8006a4e:	4122      	asrs	r2, r4
 8006a50:	8bdc      	ldrh	r4, [r3, #30]
 8006a52:	fa41 f404 	asr.w	r4, r1, r4
 8006a56:	4422      	add	r2, r4
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8006a58:	4290      	cmp	r0, r2
 8006a5a:	da03      	bge.n	8006a64 <PI_Controller+0x58>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8006a5c:	1a82      	subs	r2, r0, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8006a5e:	4411      	add	r1, r2
 8006a60:	6099      	str	r1, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8006a62:	bd10      	pop	{r4, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 8006a64:	4594      	cmp	ip, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
 8006a66:	bfc5      	ittet	gt
 8006a68:	ebac 0202 	subgt.w	r2, ip, r2
  pHandle->wIntegralTerm += wDischarge;
 8006a6c:	1889      	addgt	r1, r1, r2
  return ( ( int16_t )( wOutput_32 ) );
 8006a6e:	b210      	sxthle	r0, r2
    wOutput_32 = hLowerOutputLimit;
 8006a70:	4660      	movgt	r0, ip
  pHandle->wIntegralTerm += wDischarge;
 8006a72:	6099      	str	r1, [r3, #8]
}
 8006a74:	bd10      	pop	{r4, pc}
      if ( pHandle->wIntegralTerm > 0 )
 8006a76:	2c00      	cmp	r4, #0
 8006a78:	dddf      	ble.n	8006a3a <PI_Controller+0x2e>
        if ( wIntegral_Term > 0 )
 8006a7a:	2900      	cmp	r1, #0
 8006a7c:	dddd      	ble.n	8006a3a <PI_Controller+0x2e>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8006a7e:	68d9      	ldr	r1, [r3, #12]
 8006a80:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8006a84:	42a1      	cmp	r1, r4
 8006a86:	d1e1      	bne.n	8006a4c <PI_Controller+0x40>
          wIntegral_sum_temp = INT32_MAX;
 8006a88:	468e      	mov	lr, r1
      pHandle->wIntegralTerm = wIntegral_sum_temp;
 8006a8a:	4671      	mov	r1, lr
 8006a8c:	e7de      	b.n	8006a4c <PI_Controller+0x40>
 8006a8e:	bf00      	nop
 8006a90:	80000001 	.word	0x80000001

08006a94 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8006a94:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
{
 8006a98:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8006a9a:	89d1      	ldrh	r1, [r2, #14]
 8006a9c:	8b14      	ldrh	r4, [r2, #24]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006a9e:	8993      	ldrh	r3, [r2, #12]
{
 8006aa0:	4605      	mov	r5, r0
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006aa2:	8ad0      	ldrh	r0, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006aa4:	f8d5 6108 	ldr.w	r6, [r5, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8006aa8:	fb11 f204 	smulbb	r2, r1, r4
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006aac:	fb13 2400 	smlabb	r4, r3, r0, r2
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006ab0:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
 8006ab4:	f7ff fe9a 	bl	80067ec <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 8006ab8:	1e23      	subs	r3, r4, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006aba:	490f      	ldr	r1, [pc, #60]	; (8006af8 <PQD_CalcElMotorPower+0x64>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006abc:	fb06 f000 	mul.w	r0, r6, r0
  wAux /= 65536;
 8006ac0:	bfb8      	it	lt
 8006ac2:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006ac6:	ea4f 72e0 	mov.w	r2, r0, asr #31
  wAux /= 65536;
 8006aca:	bfb8      	it	lt
 8006acc:	33ff      	addlt	r3, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006ace:	fb81 1000 	smull	r1, r0, r1, r0
 8006ad2:	ebc2 12a0 	rsb	r2, r2, r0, asr #6
  wAux /= 65536;
 8006ad6:	141b      	asrs	r3, r3, #16

  wAux3 = wAux * wAux2;
 8006ad8:	fb02 f303 	mul.w	r3, r2, r3
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8006adc:	4907      	ldr	r1, [pc, #28]	; (8006afc <PQD_CalcElMotorPower+0x68>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8006ade:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006ae2:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8006ae4:	fb81 2103 	smull	r2, r1, r1, r3
 8006ae8:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8006aea:	4628      	mov	r0, r5
 8006aec:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8006af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8006af4:	f7ff beee 	b.w	80068d4 <MPM_CalcElMotorPower>
 8006af8:	1b4e81b5 	.word	0x1b4e81b5
 8006afc:	66666667 	.word	0x66666667

08006b00 <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 8006b00:	b410      	push	{r4}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8006b02:	4b19      	ldr	r3, [pc, #100]	; (8006b68 <startTimers+0x68>)
 8006b04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b06:	07d2      	lsls	r2, r2, #31
 8006b08:	b083      	sub	sp, #12
 8006b0a:	d416      	bmi.n	8006b3a <startTimers+0x3a>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006b0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b0e:	f042 0201 	orr.w	r2, r2, #1
 8006b12:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006b14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006b16:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006b1a:	f002 0201 	and.w	r2, r2, #1
 8006b1e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8006b20:	9a01      	ldr	r2, [sp, #4]
 8006b22:	694a      	ldr	r2, [r1, #20]
 8006b24:	f042 0201 	orr.w	r2, r2, #1
 8006b28:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8006b2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b2c:	f022 0201 	bic.w	r2, r2, #1
 8006b30:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8006b32:	b003      	add	sp, #12
 8006b34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b38:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8006b3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006b3e:	480b      	ldr	r0, [pc, #44]	; (8006b6c <startTimers+0x6c>)
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	6859      	ldr	r1, [r3, #4]
 8006b44:	4c0a      	ldr	r4, [pc, #40]	; (8006b70 <startTimers+0x70>)
 8006b46:	4001      	ands	r1, r0
 8006b48:	f041 0120 	orr.w	r1, r1, #32
 8006b4c:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006b4e:	6959      	ldr	r1, [r3, #20]
 8006b50:	f041 0101 	orr.w	r1, r1, #1
 8006b54:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006b56:	6859      	ldr	r1, [r3, #4]
 8006b58:	4022      	ands	r2, r4
 8006b5a:	4001      	ands	r1, r0
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	605a      	str	r2, [r3, #4]
}
 8006b60:	b003      	add	sp, #12
 8006b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	40021000 	.word	0x40021000
 8006b6c:	fdffff8f 	.word	0xfdffff8f
 8006b70:	02000070 	.word	0x02000070

08006b74 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8006b74:	b570      	push	{r4, r5, r6, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8006b76:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 8006b78:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 8006b7c:	d11c      	bne.n	8006bb8 <waitForPolarizationEnd+0x44>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8006b7e:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8006b80:	3201      	adds	r2, #1
 8006b82:	0855      	lsrs	r5, r2, #1
 8006b84:	016d      	lsls	r5, r5, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006b86:	f06f 0602 	mvn.w	r6, #2
 8006b8a:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8006b8c:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8006b8e:	f893 c000 	ldrb.w	ip, [r3]
 8006b92:	f1bc 0f0f 	cmp.w	ip, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8006b96:	f102 0e01 	add.w	lr, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8006b9a:	d80c      	bhi.n	8006bb6 <waitForPolarizationEnd+0x42>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8006b9c:	6904      	ldr	r4, [r0, #16]
 8006b9e:	07a4      	lsls	r4, r4, #30
 8006ba0:	d5f5      	bpl.n	8006b8e <waitForPolarizationEnd+0x1a>
      hCalibrationPeriodCounter++;
 8006ba2:	fa1f f28e 	uxth.w	r2, lr
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8006ba6:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006ba8:	6106      	str	r6, [r0, #16]
 8006baa:	d8f0      	bhi.n	8006b8e <waitForPolarizationEnd+0x1a>
      {
        if (*cnt < NB_CONVERSIONS)
 8006bac:	781c      	ldrb	r4, [r3, #0]
 8006bae:	2c0f      	cmp	r4, #15
 8006bb0:	d8ed      	bhi.n	8006b8e <waitForPolarizationEnd+0x1a>
        {
          *SWerror = 1u;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8006bb6:	bd70      	pop	{r4, r5, r6, pc}
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8006bb8:	2c60      	cmp	r4, #96	; 0x60
 8006bba:	d1e1      	bne.n	8006b80 <waitForPolarizationEnd+0xc>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8006bbc:	3201      	adds	r2, #1
 8006bbe:	0155      	lsls	r5, r2, #5
 8006bc0:	e7e1      	b.n	8006b86 <waitForPolarizationEnd+0x12>
 8006bc2:	bf00      	nop

08006bc4 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8006bc4:	6843      	ldr	r3, [r0, #4]
 8006bc6:	4718      	bx	r3

08006bc8 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8006bc8:	b530      	push	{r4, r5, lr}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006bca:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006bce:	8e02      	ldrh	r2, [r0, #48]	; 0x30
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006bd0:	ea4f 4c21 	mov.w	ip, r1, asr #16
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006bd4:	b20b      	sxth	r3, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006bd6:	fb0e fc0c 	mul.w	ip, lr, ip
 8006bda:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006bde:	fb02 f303 	mul.w	r3, r2, r3
{
 8006be2:	b083      	sub	sp, #12

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8006be4:	eb03 024c 	add.w	r2, r3, ip, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006be8:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
{
 8006bec:	9101      	str	r1, [sp, #4]
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006bee:	eb03 74d3 	add.w	r4, r3, r3, lsr #31
  wY = ( wUBeta + wUAlpha ) / 2;
 8006bf2:	eb02 71d2 	add.w	r1, r2, r2, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8006bf6:	1c55      	adds	r5, r2, #1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006bf8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8006bfc:	ea4f 0161 	mov.w	r1, r1, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006c00:	ea4f 0464 	mov.w	r4, r4, asr #1
  if ( wY < 0 )
 8006c04:	f2c0 8083 	blt.w	8006d0e <PWMC_SetPhaseVoltage+0x146>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8006c08:	1c5d      	adds	r5, r3, #1
 8006c0a:	db58      	blt.n	8006cbe <PWMC_SetPhaseVoltage+0xf6>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006c0c:	1b09      	subs	r1, r1, r4
 8006c0e:	bf44      	itt	mi
 8006c10:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 8006c14:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	bfbc      	itt	lt
 8006c1c:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8006c20:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8006c24:	2a00      	cmp	r2, #0
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006c26:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
      wTimePhC = wTimePhA - wY / 131072;
 8006c2a:	bfb8      	it	lt
 8006c2c:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006c30:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006c34:	bfb8      	it	lt
 8006c36:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006c3a:	eb01 43a3 	add.w	r3, r1, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006c3e:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
      pHandle->lowDuty = wTimePhB;
 8006c42:	fa1f fe83 	uxth.w	lr, r3
      pHandle->midDuty = wTimePhA;
 8006c46:	fa1f fc81 	uxth.w	ip, r1
      pHandle->highDuty = wTimePhC;
 8006c4a:	b294      	uxth	r4, r2
 8006c4c:	2501      	movs	r5, #1
        pHandle->highDuty = wTimePhA;
 8006c4e:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8006c52:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
        pHandle->Sector = SECTOR_4;
 8006c56:	f880 503a 	strb.w	r5, [r0, #58]	; 0x3a
 8006c5a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8006c5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006c62:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8006c66:	b289      	uxth	r1, r1
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	b292      	uxth	r2, r2
  if ( pHandle->DTTest == 1u )
 8006c6c:	2c01      	cmp	r4, #1
        pHandle->lowDuty = wTimePhC;
 8006c6e:	f8a0 e03c 	strh.w	lr, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8006c72:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8006c76:	8641      	strh	r1, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8006c78:	8683      	strh	r3, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8006c7a:	86c2      	strh	r2, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8006c7c:	d11a      	bne.n	8006cb4 <PWMC_SetPhaseVoltage+0xec>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8006c7e:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
 8006c82:	2c00      	cmp	r4, #0
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8006c84:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8006c88:	bfcc      	ite	gt
 8006c8a:	1909      	addgt	r1, r1, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8006c8c:	1b09      	suble	r1, r1, r4
 8006c8e:	b289      	uxth	r1, r1
 8006c90:	8641      	strh	r1, [r0, #50]	; 0x32
    }

    if ( pHandle->Ib > 0 )
 8006c92:	f9b0 104a 	ldrsh.w	r1, [r0, #74]	; 0x4a
 8006c96:	2900      	cmp	r1, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8006c98:	f9b0 104c 	ldrsh.w	r1, [r0, #76]	; 0x4c
      pHandle->CntPhB += pHandle->DTCompCnt;
 8006c9c:	bfcc      	ite	gt
 8006c9e:	191b      	addgt	r3, r3, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8006ca0:	1b1b      	suble	r3, r3, r4
    if ( pHandle->Ic > 0 )
 8006ca2:	2900      	cmp	r1, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8006ca4:	b29b      	uxth	r3, r3
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8006ca6:	bfcc      	ite	gt
 8006ca8:	18a4      	addgt	r4, r4, r2
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8006caa:	1b12      	suble	r2, r2, r4
 8006cac:	8683      	strh	r3, [r0, #52]	; 0x34
      pHandle->CntPhC += pHandle->DTCompCnt;
 8006cae:	bfcc      	ite	gt
 8006cb0:	86c4      	strhgt	r4, [r0, #54]	; 0x36
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8006cb2:	86c2      	strhle	r2, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8006cb4:	6983      	ldr	r3, [r0, #24]
}
 8006cb6:	b003      	add	sp, #12
 8006cb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8006cbc:	4718      	bx	r3
      if ( wX <= 0 )
 8006cbe:	f1bc 0f00 	cmp.w	ip, #0
 8006cc2:	dd46      	ble.n	8006d52 <PWMC_SetPhaseVoltage+0x18a>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006cc4:	ebbc 0404 	subs.w	r4, ip, r4
 8006cc8:	bf44      	itt	mi
 8006cca:	f504 347f 	addmi.w	r4, r4, #261120	; 0x3fc00
 8006cce:	f204 34ff 	addwmi	r4, r4, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	bfb8      	it	lt
 8006cd6:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006cda:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
        wTimePhB = wTimePhA + wZ / 131072;
 8006cde:	bfb8      	it	lt
 8006ce0:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhC = wTimePhB - wX / 131072;
 8006ce4:	f1bc 0200 	subs.w	r2, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006ce8:	eb0e 41a4 	add.w	r1, lr, r4, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006cec:	bfb8      	it	lt
 8006cee:	f502 32ff 	addlt.w	r2, r2, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006cf2:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006cf6:	bfb8      	it	lt
 8006cf8:	f202 12ff 	addwlt	r2, r2, #511	; 0x1ff
 8006cfc:	eba3 4262 	sub.w	r2, r3, r2, asr #17
        pHandle->lowDuty = wTimePhA;
 8006d00:	fa1f fe81 	uxth.w	lr, r1
        pHandle->midDuty = wTimePhB;
 8006d04:	fa1f fc83 	uxth.w	ip, r3
        pHandle->highDuty = wTimePhC;
 8006d08:	b294      	uxth	r4, r2
 8006d0a:	2500      	movs	r5, #0
 8006d0c:	e79f      	b.n	8006c4e <PWMC_SetPhaseVoltage+0x86>
    if ( wZ < 0 )
 8006d0e:	1c5d      	adds	r5, r3, #1
 8006d10:	db69      	blt.n	8006de6 <PWMC_SetPhaseVoltage+0x21e>
      if ( wX <= 0 )
 8006d12:	f1bc 0f00 	cmp.w	ip, #0
 8006d16:	dd41      	ble.n	8006d9c <PWMC_SetPhaseVoltage+0x1d4>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006d18:	ebb1 010c 	subs.w	r1, r1, ip
 8006d1c:	bf44      	itt	mi
 8006d1e:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 8006d22:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8006d26:	2a00      	cmp	r2, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006d28:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
        wTimePhC = wTimePhA - wY / 131072;
 8006d2c:	bfb8      	it	lt
 8006d2e:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006d32:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8006d36:	bfb8      	it	lt
 8006d38:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
 8006d3c:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006d40:	eb02 436c 	add.w	r3, r2, ip, asr #17
        pHandle->lowDuty = wTimePhB;
 8006d44:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = wTimePhC;
 8006d48:	fa1f fc82 	uxth.w	ip, r2
        pHandle->highDuty = wTimePhA;
 8006d4c:	b28c      	uxth	r4, r1
 8006d4e:	2502      	movs	r5, #2
 8006d50:	e77d      	b.n	8006c4e <PWMC_SetPhaseVoltage+0x86>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006d52:	ebb1 010c 	subs.w	r1, r1, ip
 8006d56:	bf44      	itt	mi
 8006d58:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 8006d5c:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8006d60:	2a00      	cmp	r2, #0
 8006d62:	bfb8      	it	lt
 8006d64:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006d68:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
        wTimePhC = wTimePhA - wY / 131072;
 8006d6c:	bfb8      	it	lt
 8006d6e:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
        wTimePhB = wTimePhC + wX / 131072;
 8006d72:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006d76:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006d7a:	bfb8      	it	lt
 8006d7c:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8006d80:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006d84:	bfb8      	it	lt
 8006d86:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8006d8a:	eb02 4363 	add.w	r3, r2, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 8006d8e:	fa1f fe81 	uxth.w	lr, r1
        pHandle->midDuty = wTimePhC;
 8006d92:	fa1f fc82 	uxth.w	ip, r2
        pHandle->highDuty = wTimePhB;
 8006d96:	b29c      	uxth	r4, r3
 8006d98:	2505      	movs	r5, #5
 8006d9a:	e758      	b.n	8006c4e <PWMC_SetPhaseVoltage+0x86>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006d9c:	ebbc 0404 	subs.w	r4, ip, r4
 8006da0:	bf44      	itt	mi
 8006da2:	f504 347f 	addmi.w	r4, r4, #261120	; 0x3fc00
 8006da6:	f204 34ff 	addwmi	r4, r4, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	bfb8      	it	lt
 8006dae:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006db2:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
        wTimePhB = wTimePhA + wZ / 131072;
 8006db6:	bfb8      	it	lt
 8006db8:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        wTimePhC = wTimePhB - wX / 131072;
 8006dbc:	f1bc 0200 	subs.w	r2, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006dc0:	eb0e 41a4 	add.w	r1, lr, r4, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006dc4:	bfb8      	it	lt
 8006dc6:	f502 32ff 	addlt.w	r2, r2, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006dca:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006dce:	bfb8      	it	lt
 8006dd0:	f202 12ff 	addwlt	r2, r2, #511	; 0x1ff
 8006dd4:	eba3 4262 	sub.w	r2, r3, r2, asr #17
        pHandle->lowDuty = wTimePhC;
 8006dd8:	fa1f fe82 	uxth.w	lr, r2
        pHandle->midDuty = wTimePhB;
 8006ddc:	fa1f fc83 	uxth.w	ip, r3
        pHandle->highDuty = wTimePhA;
 8006de0:	b28c      	uxth	r4, r1
 8006de2:	2503      	movs	r5, #3
 8006de4:	e733      	b.n	8006c4e <PWMC_SetPhaseVoltage+0x86>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006de6:	1b09      	subs	r1, r1, r4
 8006de8:	bf44      	itt	mi
 8006dea:	f501 317f 	addmi.w	r1, r1, #261120	; 0x3fc00
 8006dee:	f201 31ff 	addwmi	r1, r1, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	bfbc      	itt	lt
 8006df6:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8006dfa:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8006dfe:	2a00      	cmp	r2, #0
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006e00:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
      wTimePhC = wTimePhA - wY / 131072;
 8006e04:	bfb8      	it	lt
 8006e06:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006e0a:	eb0e 41a1 	add.w	r1, lr, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006e0e:	bfb8      	it	lt
 8006e10:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006e14:	eb01 43a3 	add.w	r3, r1, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006e18:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
      pHandle->lowDuty = wTimePhC;
 8006e1c:	fa1f fe82 	uxth.w	lr, r2
      pHandle->midDuty = wTimePhA;
 8006e20:	fa1f fc81 	uxth.w	ip, r1
      pHandle->highDuty = wTimePhB;
 8006e24:	b29c      	uxth	r4, r3
 8006e26:	2504      	movs	r5, #4
 8006e28:	e711      	b.n	8006c4e <PWMC_SetPhaseVoltage+0x86>
 8006e2a:	bf00      	nop

08006e2c <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8006e2c:	6883      	ldr	r3, [r0, #8]
 8006e2e:	4718      	bx	r3

08006e30 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8006e30:	b510      	push	{r4, lr}
 8006e32:	4604      	mov	r4, r0
 8006e34:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8006e36:	b199      	cbz	r1, 8006e60 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8006e38:	2901      	cmp	r1, #1
 8006e3a:	d002      	beq.n	8006e42 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8006e3c:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8006e3e:	b002      	add	sp, #8
 8006e40:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8006e42:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006e46:	b1cb      	cbz	r3, 8006e7c <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	9101      	str	r1, [sp, #4]
 8006e4e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1f2      	bne.n	8006e3c <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8006e56:	6903      	ldr	r3, [r0, #16]
 8006e58:	4798      	blx	r3
        retVal = true;
 8006e5a:	9901      	ldr	r1, [sp, #4]
 8006e5c:	4608      	mov	r0, r1
 8006e5e:	e7ee      	b.n	8006e3e <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8006e60:	f7ff ffe4 	bl	8006e2c <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8006e64:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006e68:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e5      	bne.n	8006e3c <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8006e70:	4620      	mov	r0, r4
 8006e72:	6923      	ldr	r3, [r4, #16]
 8006e74:	4798      	blx	r3
      retVal = true;
 8006e76:	2001      	movs	r0, #1
}
 8006e78:	b002      	add	sp, #8
 8006e7a:	bd10      	pop	{r4, pc}
      retVal = true;
 8006e7c:	4608      	mov	r0, r1
}
 8006e7e:	b002      	add	sp, #8
 8006e80:	bd10      	pop	{r4, pc}
 8006e82:	bf00      	nop

08006e84 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8006e84:	69c3      	ldr	r3, [r0, #28]
 8006e86:	4718      	bx	r3

08006e88 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006e88:	6883      	ldr	r3, [r0, #8]
 8006e8a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006e8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e92:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006e94:	6883      	ldr	r3, [r0, #8]
 8006e96:	00d9      	lsls	r1, r3, #3
    R3_2_TIMxInit( TIMx, &pHandle->_Super );
  }
}

static void R3_2_ADCxInit( ADC_TypeDef * ADCx )
{
 8006e98:	b082      	sub	sp, #8
 8006e9a:	d418      	bmi.n	8006ece <R3_2_ADCxInit+0x46>
  
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 8006e9c:	4b24      	ldr	r3, [pc, #144]	; (8006f30 <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 8006e9e:	6882      	ldr	r2, [r0, #8]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4924      	ldr	r1, [pc, #144]	; (8006f34 <R3_2_ADCxInit+0xac>)
 8006ea4:	099b      	lsrs	r3, r3, #6
 8006ea6:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8006eaa:	fba1 1303 	umull	r1, r3, r1, r3
 8006eae:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006eb2:	099b      	lsrs	r3, r3, #6
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006eba:	6082      	str	r2, [r0, #8]
 8006ebc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8006ebe:	9b01      	ldr	r3, [sp, #4]
 8006ec0:	b12b      	cbz	r3, 8006ece <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 8006ec2:	9b01      	ldr	r3, [sp, #4]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8006ec8:	9b01      	ldr	r3, [sp, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1f9      	bne.n	8006ec2 <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 8006ece:	6883      	ldr	r3, [r0, #8]
 8006ed0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006ed4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ed8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006edc:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006ede:	6883      	ldr	r3, [r0, #8]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	dbfc      	blt.n	8006ede <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006ee4:	6803      	ldr	r3, [r0, #0]
 8006ee6:	07da      	lsls	r2, r3, #31
 8006ee8:	d408      	bmi.n	8006efc <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 8006eea:	4a13      	ldr	r2, [pc, #76]	; (8006f38 <R3_2_ADCxInit+0xb0>)
 8006eec:	6883      	ldr	r3, [r0, #8]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	f043 0301 	orr.w	r3, r3, #1
 8006ef4:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006ef6:	6803      	ldr	r3, [r0, #0]
 8006ef8:	07db      	lsls	r3, r3, #31
 8006efa:	d5f7      	bpl.n	8006eec <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 8006efc:	6883      	ldr	r3, [r0, #8]
 8006efe:	4a0e      	ldr	r2, [pc, #56]	; (8006f38 <R3_2_ADCxInit+0xb0>)
 8006f00:	4013      	ands	r3, r2
 8006f02:	f043 0308 	orr.w	r3, r3, #8
 8006f06:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8006f08:	6883      	ldr	r3, [r0, #8]
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	f043 0320 	orr.w	r3, r3, #32
 8006f10:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8006f12:	68c3      	ldr	r3, [r0, #12]
 8006f14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f20:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 8006f22:	6883      	ldr	r3, [r0, #8]
 8006f24:	4013      	ands	r3, r2
 8006f26:	f043 0304 	orr.w	r3, r3, #4
 8006f2a:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
 }
 8006f2c:	b002      	add	sp, #8
 8006f2e:	4770      	bx	lr
 8006f30:	20000694 	.word	0x20000694
 8006f34:	053e2d63 	.word	0x053e2d63
 8006f38:	7fffffc0 	.word	0x7fffffc0

08006f3c <R3_2_GetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;  
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006f3c:	6f43      	ldr	r3, [r0, #116]	; 0x74
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 8006f3e:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8006f42:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006f44:	689c      	ldr	r4, [r3, #8]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8006f46:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006f4a:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 8006f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8006f4e:	682d      	ldr	r5, [r5, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 8006f50:	681e      	ldr	r6, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006f52:	6863      	ldr	r3, [r4, #4]
 8006f54:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f5c:	6063      	str	r3, [r4, #4]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  switch ( Sector )
 8006f5e:	2a05      	cmp	r2, #5
 8006f60:	f200 8097 	bhi.w	8007092 <R3_2_GetPhaseCurrents+0x156>
 8006f64:	e8df f002 	tbb	[pc, r2]
 8006f68:	031b1b33 	.word	0x031b1b33
 8006f6c:	3303      	.short	0x3303
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8006f6e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 8006f70:	4a4b      	ldr	r2, [pc, #300]	; (80070a0 <R3_2_GetPhaseCurrents+0x164>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8006f72:	1b5b      	subs	r3, r3, r5
      if ( Aux < -INT16_MAX )
 8006f74:	4293      	cmp	r3, r2
 8006f76:	db53      	blt.n	8007020 <R3_2_GetPhaseCurrents+0xe4>
      {
        Iab->a = -INT16_MAX;
      }
      else  if ( Aux > INT16_MAX )
 8006f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f7c:	f280 8082 	bge.w	8007084 <R3_2_GetPhaseCurrents+0x148>
      {
        Iab->a = INT16_MAX;
      }
      else
      {
        Iab->a = ( int16_t )Aux;
 8006f80:	fa0f fc83 	sxth.w	ip, r3
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8006f84:	6e02      	ldr	r2, [r0, #96]	; 0x60

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 8006f86:	4d46      	ldr	r5, [pc, #280]	; (80070a0 <R3_2_GetPhaseCurrents+0x164>)
        Iab->a = -INT16_MAX;
 8006f88:	f8a1 c000 	strh.w	ip, [r1]
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8006f8c:	1b92      	subs	r2, r2, r6
      if ( Aux < -INT16_MAX )
 8006f8e:	42aa      	cmp	r2, r5
 8006f90:	da57      	bge.n	8007042 <R3_2_GetPhaseCurrents+0x106>
      {
        Iab->b = -INT16_MAX;
 8006f92:	804d      	strh	r5, [r1, #2]
      break;
  }

  pHandle->_Super.Ia = Iab->a;
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006f94:	fa1f f38c 	uxth.w	r3, ip
 8006f98:	f248 0201 	movw	r2, #32769	; 0x8001
 8006f9c:	e02c      	b.n	8006ff8 <R3_2_GetPhaseCurrents+0xbc>
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8006f9e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      if ( Aux < -INT16_MAX )
 8006fa0:	4b3f      	ldr	r3, [pc, #252]	; (80070a0 <R3_2_GetPhaseCurrents+0x164>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8006fa2:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8006fa4:	429c      	cmp	r4, r3
 8006fa6:	db36      	blt.n	8007016 <R3_2_GetPhaseCurrents+0xda>
      else  if ( Aux > INT16_MAX )
 8006fa8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8006fac:	da5f      	bge.n	800706e <R3_2_GetPhaseCurrents+0x132>
        Iab->a = ( int16_t )Aux;
 8006fae:	fa0f fc84 	sxth.w	ip, r4
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006fb2:	b2a3      	uxth	r3, r4
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8006fb4:	6e42      	ldr	r2, [r0, #100]	; 0x64
        Iab->a = -INT16_MAX;
 8006fb6:	f8a1 c000 	strh.w	ip, [r1]
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8006fba:	1ab2      	subs	r2, r6, r2
      Aux -= ( int32_t )Iab->a;             /* Ib */
 8006fbc:	1b12      	subs	r2, r2, r4
      if ( Aux > INT16_MAX )
 8006fbe:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006fc2:	db37      	blt.n	8007034 <R3_2_GetPhaseCurrents+0xf8>
        Iab->b = INT16_MAX;
 8006fc4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006fc8:	804a      	strh	r2, [r1, #2]
 8006fca:	4615      	mov	r5, r2
 8006fcc:	e014      	b.n	8006ff8 <R3_2_GetPhaseCurrents+0xbc>
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8006fce:	6e04      	ldr	r4, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 8006fd0:	4b33      	ldr	r3, [pc, #204]	; (80070a0 <R3_2_GetPhaseCurrents+0x164>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8006fd2:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8006fd4:	429c      	cmp	r4, r3
 8006fd6:	db19      	blt.n	800700c <R3_2_GetPhaseCurrents+0xd0>
      else  if ( Aux > INT16_MAX )
 8006fd8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8006fdc:	da3c      	bge.n	8007058 <R3_2_GetPhaseCurrents+0x11c>
        Iab->b = ( int16_t )Aux;
 8006fde:	b225      	sxth	r5, r4
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006fe0:	b2a2      	uxth	r2, r4
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8006fe2:	6e43      	ldr	r3, [r0, #100]	; 0x64
        Iab->b = -INT16_MAX;
 8006fe4:	804d      	strh	r5, [r1, #2]
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8006fe6:	1af3      	subs	r3, r6, r3
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 8006fe8:	1b1b      	subs	r3, r3, r4
      if ( Aux > INT16_MAX )
 8006fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fee:	db19      	blt.n	8007024 <R3_2_GetPhaseCurrents+0xe8>
        Iab->a = INT16_MAX;
 8006ff0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006ff4:	800b      	strh	r3, [r1, #0]
 8006ff6:	469c      	mov	ip, r3
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006ff8:	4413      	add	r3, r2
 8006ffa:	425b      	negs	r3, r3
  pHandle->_Super.Ib = Iab->b;
 8006ffc:	f8a0 504a 	strh.w	r5, [r0, #74]	; 0x4a
  pHandle->_Super.Ia = Iab->a;
 8007000:	f8a0 c048 	strh.w	ip, [r0, #72]	; 0x48
}
 8007004:	bc70      	pop	{r4, r5, r6}
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007006:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 800700a:	4770      	bx	lr
 800700c:	461c      	mov	r4, r3
 800700e:	f248 0201 	movw	r2, #32769	; 0x8001
 8007012:	461d      	mov	r5, r3
 8007014:	e7e5      	b.n	8006fe2 <R3_2_GetPhaseCurrents+0xa6>
 8007016:	461c      	mov	r4, r3
 8007018:	46a4      	mov	ip, r4
 800701a:	f248 0301 	movw	r3, #32769	; 0x8001
 800701e:	e7c9      	b.n	8006fb4 <R3_2_GetPhaseCurrents+0x78>
 8007020:	4694      	mov	ip, r2
 8007022:	e7af      	b.n	8006f84 <R3_2_GetPhaseCurrents+0x48>
      else  if ( Aux < -INT16_MAX )
 8007024:	4c1e      	ldr	r4, [pc, #120]	; (80070a0 <R3_2_GetPhaseCurrents+0x164>)
 8007026:	42a3      	cmp	r3, r4
 8007028:	da26      	bge.n	8007078 <R3_2_GetPhaseCurrents+0x13c>
        Iab->a = -INT16_MAX;
 800702a:	800c      	strh	r4, [r1, #0]
 800702c:	f248 0301 	movw	r3, #32769	; 0x8001
 8007030:	46a4      	mov	ip, r4
 8007032:	e7e1      	b.n	8006ff8 <R3_2_GetPhaseCurrents+0xbc>
      else  if ( Aux < -INT16_MAX )
 8007034:	4d1a      	ldr	r5, [pc, #104]	; (80070a0 <R3_2_GetPhaseCurrents+0x164>)
 8007036:	42aa      	cmp	r2, r5
 8007038:	da27      	bge.n	800708a <R3_2_GetPhaseCurrents+0x14e>
        Iab->b = -INT16_MAX;
 800703a:	804d      	strh	r5, [r1, #2]
 800703c:	f248 0201 	movw	r2, #32769	; 0x8001
 8007040:	e7da      	b.n	8006ff8 <R3_2_GetPhaseCurrents+0xbc>
      else  if ( Aux > INT16_MAX )
 8007042:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007046:	db0c      	blt.n	8007062 <R3_2_GetPhaseCurrents+0x126>
        Iab->b = INT16_MAX;
 8007048:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800704c:	461a      	mov	r2, r3
 800704e:	804b      	strh	r3, [r1, #2]
 8007050:	4615      	mov	r5, r2
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007052:	fa1f f38c 	uxth.w	r3, ip
 8007056:	e7cf      	b.n	8006ff8 <R3_2_GetPhaseCurrents+0xbc>
 8007058:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800705c:	4614      	mov	r4, r2
 800705e:	4615      	mov	r5, r2
 8007060:	e7bf      	b.n	8006fe2 <R3_2_GetPhaseCurrents+0xa6>
        Iab->b = ( int16_t )Aux;
 8007062:	b215      	sxth	r5, r2
 8007064:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007066:	fa1f f38c 	uxth.w	r3, ip
 800706a:	b292      	uxth	r2, r2
 800706c:	e7c4      	b.n	8006ff8 <R3_2_GetPhaseCurrents+0xbc>
 800706e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007072:	461c      	mov	r4, r3
 8007074:	469c      	mov	ip, r3
 8007076:	e79d      	b.n	8006fb4 <R3_2_GetPhaseCurrents+0x78>
        Iab->a = ( int16_t )Aux;
 8007078:	fa0f fc83 	sxth.w	ip, r3
 800707c:	f8a1 c000 	strh.w	ip, [r1]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007080:	b29b      	uxth	r3, r3
 8007082:	e7b9      	b.n	8006ff8 <R3_2_GetPhaseCurrents+0xbc>
 8007084:	f647 7cff 	movw	ip, #32767	; 0x7fff
 8007088:	e77c      	b.n	8006f84 <R3_2_GetPhaseCurrents+0x48>
        Iab->b = ( int16_t )Aux;
 800708a:	b215      	sxth	r5, r2
 800708c:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 800708e:	b292      	uxth	r2, r2
 8007090:	e7b2      	b.n	8006ff8 <R3_2_GetPhaseCurrents+0xbc>
  pHandle->_Super.Ia = Iab->a;
 8007092:	f9b1 c000 	ldrsh.w	ip, [r1]
  pHandle->_Super.Ib = Iab->b;
 8007096:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 800709a:	880b      	ldrh	r3, [r1, #0]
 800709c:	884a      	ldrh	r2, [r1, #2]
 800709e:	e7ab      	b.n	8006ff8 <R3_2_GetPhaseCurrents+0xbc>
 80070a0:	ffff8001 	.word	0xffff8001

080070a4 <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 80070a4:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80070a6:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 80070a8:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 80070ac:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 80070b0:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80070b4:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 80070b6:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 80070b8:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 80070ba:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 80070bc:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 80070be:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR2, CompareValue);
 80070c0:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 80070c2:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 80070c4:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80070c6:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 80070c8:	4904      	ldr	r1, [pc, #16]	; (80070dc <R3_2_SetADCSampPointPolarization+0x38>)
 80070ca:	685b      	ldr	r3, [r3, #4]
}
 80070cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 80070d0:	420b      	tst	r3, r1
}
 80070d2:	bf14      	ite	ne
 80070d4:	2001      	movne	r0, #1
 80070d6:	2000      	moveq	r0, #0
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	02000070 	.word	0x02000070

080070e0 <R3_2_SetADCSampPointSectX>:
{
 80070e0:	b530      	push	{r4, r5, lr}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 80070e2:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 80070e4:	f8b0 e068 	ldrh.w	lr, [r0, #104]	; 0x68
 80070e8:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80070ea:	ebae 0203 	sub.w	r2, lr, r3
 80070ee:	f8b1 40b2 	ldrh.w	r4, [r1, #178]	; 0xb2
 80070f2:	b292      	uxth	r2, r2
 80070f4:	42a2      	cmp	r2, r4
 80070f6:	d914      	bls.n	8007122 <R3_2_SetADCSampPointSectX+0x42>
    pHandle->_Super.Sector = SECTOR_5;
 80070f8:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 80070fa:	f10e 33ff 	add.w	r3, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 80070fe:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8007102:	b29b      	uxth	r3, r3
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007104:	688a      	ldr	r2, [r1, #8]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8007106:	8e45      	ldrh	r5, [r0, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8007108:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 800710a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 800710c:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800710e:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007110:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007112:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007114:	6852      	ldr	r2, [r2, #4]
 8007116:	4b10      	ldr	r3, [pc, #64]	; (8007158 <R3_2_SetADCSampPointSectX+0x78>)
 8007118:	421a      	tst	r2, r3
}
 800711a:	bf14      	ite	ne
 800711c:	2001      	movne	r0, #1
 800711e:	2000      	moveq	r0, #0
 8007120:	bd30      	pop	{r4, r5, pc}
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 8007122:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8007126:	eba3 0c0c 	sub.w	ip, r3, ip
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 800712a:	fa1f fc8c 	uxth.w	ip, ip
 800712e:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8007132:	d904      	bls.n	800713e <R3_2_SetADCSampPointSectX+0x5e>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8007134:	f8b1 20b4 	ldrh.w	r2, [r1, #180]	; 0xb4
 8007138:	1a9b      	subs	r3, r3, r2
 800713a:	b29b      	uxth	r3, r3
 800713c:	e7e2      	b.n	8007104 <R3_2_SetADCSampPointSectX+0x24>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 800713e:	4423      	add	r3, r4
 8007140:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 8007142:	459e      	cmp	lr, r3
 8007144:	d8de      	bhi.n	8007104 <R3_2_SetADCSampPointSectX+0x24>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8007146:	43db      	mvns	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8007148:	f44f 7280 	mov.w	r2, #256	; 0x100
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 800714c:	eb03 034e 	add.w	r3, r3, lr, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8007150:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8007154:	b29b      	uxth	r3, r3
 8007156:	e7d5      	b.n	8007104 <R3_2_SetADCSampPointSectX+0x24>
 8007158:	02000070 	.word	0x02000070

0800715c <R3_2_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHdl Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800715c:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800715e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007160:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 8007164:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8007166:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800716a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800716c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 800716e:	6824      	ldr	r4, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8007170:	681d      	ldr	r5, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007172:	6853      	ldr	r3, [r2, #4]
 8007174:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717c:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800717e:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8007182:	2b0f      	cmp	r3, #15
 8007184:	d80b      	bhi.n	800719e <R3_2_HFCurrentsPolarizationAB+0x42>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
 8007186:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    pHandle-> PhaseBOffset += ADCDataReg2;
 8007188:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle-> PhaseAOffset += ADCDataReg1;
 800718a:	441c      	add	r4, r3
    pHandle->PolarizationCounter++;
 800718c:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseBOffset += ADCDataReg2;
 8007190:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 8007192:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 8007194:	e9c0 4217 	strd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 8007198:	b2db      	uxtb	r3, r3
 800719a:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800719e:	2300      	movs	r3, #0
  Iab->b = 0;
}
 80071a0:	bc30      	pop	{r4, r5}
  Iab->a = 0;
 80071a2:	600b      	str	r3, [r1, #0]
}
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop

080071a8 <R3_2_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80071a8:	6f43      	ldr	r3, [r0, #116]	; 0x74
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80071aa:	f890 c06d 	ldrb.w	ip, [r0, #109]	; 0x6d
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80071ae:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80071b0:	eb03 038c 	add.w	r3, r3, ip, lsl #2
{
 80071b4:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80071b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071b8:	681c      	ldr	r4, [r3, #0]
 80071ba:	6853      	ldr	r3, [r2, #4]
 80071bc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80071c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c4:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80071c6:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 80071ca:	2b0f      	cmp	r3, #15
 80071cc:	d808      	bhi.n	80071e0 <R3_2_HFCurrentsPolarizationC+0x38>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 80071ce:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 80071d2:	6e42      	ldr	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 80071d4:	3301      	adds	r3, #1
    pHandle-> PhaseCOffset += ADCDataReg2;    
 80071d6:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 80071d8:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 80071da:	6642      	str	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 80071dc:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 80071e0:	2300      	movs	r3, #0
  Iab->b = 0;
}
 80071e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  Iab->a = 0;
 80071e6:	600b      	str	r3, [r1, #0]
}
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop

080071ec <R3_2_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80071ec:	6f42      	ldr	r2, [r0, #116]	; 0x74

  pHandle->_Super.TurnOnLowSidesAction = true;
 80071ee:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80071f2:	6893      	ldr	r3, [r2, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 80071f4:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 80071f8:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80071fa:	f06f 0001 	mvn.w	r0, #1
 80071fe:	6118      	str	r0, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007200:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007202:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007204:	63d9      	str	r1, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007206:	6919      	ldr	r1, [r3, #16]
 8007208:	07c9      	lsls	r1, r1, #31
 800720a:	d5fc      	bpl.n	8007206 <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800720c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800720e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8007212:	6459      	str	r1, [r3, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007214:	f892 30ba 	ldrb.w	r3, [r2, #186]	; 0xba
 8007218:	2b02      	cmp	r3, #2
 800721a:	d000      	beq.n	800721e <R3_2_TurnOnLowSides+0x32>
 800721c:	4770      	bx	lr
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800721e:	e9d2 0108 	ldrd	r0, r1, [r2, #32]
{
 8007222:	b410      	push	{r4}
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007224:	6a93      	ldr	r3, [r2, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007226:	f8b2 40ac 	ldrh.w	r4, [r2, #172]	; 0xac
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800722a:	6184      	str	r4, [r0, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800722c:	f8b2 00ae 	ldrh.w	r0, [r2, #174]	; 0xae
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007230:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
  }
  return;
}
 8007234:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007238:	6188      	str	r0, [r1, #24]
 800723a:	619a      	str	r2, [r3, #24]
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop

08007240 <R3_2_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007240:	6f42      	ldr	r2, [r0, #116]	; 0x74
  pHandle->ADCRegularLocked=true; 

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 8007242:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007246:	6893      	ldr	r3, [r2, #8]
  pHandle->ADCRegularLocked=true; 
 8007248:	f04f 0c01 	mov.w	ip, #1
{
 800724c:	b430      	push	{r4, r5}
  pHandle->ADCRegularLocked=true; 
 800724e:	f880 c078 	strb.w	ip, [r0, #120]	; 0x78
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007252:	f04f 0c00 	mov.w	ip, #0
 8007256:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800725a:	0848      	lsrs	r0, r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800725c:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 800725e:	3905      	subs	r1, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007260:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007262:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007264:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007268:	6419      	str	r1, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800726a:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800726c:	6919      	ldr	r1, [r3, #16]
 800726e:	07c9      	lsls	r1, r1, #31
 8007270:	d5fc      	bpl.n	800726c <R3_2_SwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007272:	f06f 0101 	mvn.w	r1, #1
 8007276:	6119      	str	r1, [r3, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007278:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800727a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800727e:	6459      	str	r1, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007280:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007282:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8007286:	6459      	str	r1, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007288:	f892 10ba 	ldrb.w	r1, [r2, #186]	; 0xba
 800728c:	2902      	cmp	r1, #2
 800728e:	d008      	beq.n	80072a2 <R3_2_SwitchOnPWM+0x62>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007290:	f06f 0201 	mvn.w	r2, #1
 8007294:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007296:	68da      	ldr	r2, [r3, #12]
 8007298:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 800729c:	bc30      	pop	{r4, r5}
 800729e:	60da      	str	r2, [r3, #12]
 80072a0:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80072a2:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80072a4:	6a14      	ldr	r4, [r2, #32]
 80072a6:	f8b2 50ac 	ldrh.w	r5, [r2, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80072aa:	f240 5155 	movw	r1, #1365	; 0x555
 80072ae:	4208      	tst	r0, r1
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80072b0:	e9d2 0109 	ldrd	r0, r1, [r2, #36]	; 0x24
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80072b4:	d007      	beq.n	80072c6 <R3_2_SwitchOnPWM+0x86>
 80072b6:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80072b8:	f8b2 40ae 	ldrh.w	r4, [r2, #174]	; 0xae
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80072bc:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
 80072c0:	6184      	str	r4, [r0, #24]
 80072c2:	618a      	str	r2, [r1, #24]
}
 80072c4:	e7e4      	b.n	8007290 <R3_2_SwitchOnPWM+0x50>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80072c6:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80072c8:	f8b2 40ae 	ldrh.w	r4, [r2, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80072cc:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
 80072d0:	6284      	str	r4, [r0, #40]	; 0x28
 80072d2:	628a      	str	r2, [r1, #40]	; 0x28
}
 80072d4:	e7dc      	b.n	8007290 <R3_2_SwitchOnPWM+0x50>
 80072d6:	bf00      	nop

080072d8 <R3_2_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80072d8:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80072da:	688b      	ldr	r3, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	f022 0201 	bic.w	r2, r2, #1
 80072e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80072e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 80072e6:	f04f 0c00 	mov.w	ip, #0
 80072ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072ee:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
 80072f2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 80072f4:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
 80072f8:	b91a      	cbnz	r2, 8007302 <R3_2_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80072fa:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 80072fe:	2a02      	cmp	r2, #2
 8007300:	d00c      	beq.n	800731c <R3_2_SwitchOffPWM+0x44>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007302:	f06f 0201 	mvn.w	r2, #1
 8007306:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007308:	691a      	ldr	r2, [r3, #16]
 800730a:	07d2      	lsls	r2, r2, #31
 800730c:	d5fc      	bpl.n	8007308 <R3_2_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800730e:	f06f 0101 	mvn.w	r1, #1
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 8007312:	2200      	movs	r2, #0
 8007314:	6119      	str	r1, [r3, #16]
 8007316:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 800731a:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800731c:	6a0a      	ldr	r2, [r1, #32]
{
 800731e:	b410      	push	{r4}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007320:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 8007324:	6294      	str	r4, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007326:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8007328:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
 800732c:	6294      	str	r4, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800732e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8007330:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8007334:	6291      	str	r1, [r2, #40]	; 0x28
 8007336:	f06f 0201 	mvn.w	r2, #1
 800733a:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800733c:	691a      	ldr	r2, [r3, #16]
 800733e:	07d1      	lsls	r1, r2, #31
 8007340:	d5fc      	bpl.n	800733c <R3_2_SwitchOffPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007342:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked=false; 
 8007346:	2200      	movs	r2, #0
 8007348:	6119      	str	r1, [r3, #16]
}
 800734a:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->ADCRegularLocked=false; 
 800734e:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
}
 8007352:	4770      	bx	lr

08007354 <R3_2_RLGetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007354:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 8007356:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007358:	6894      	ldr	r4, [r2, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800735a:	6863      	ldr	r3, [r4, #4]
 800735c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007364:	6063      	str	r3, [r4, #4]
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 8007366:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 800736a:	6e03      	ldr	r3, [r0, #96]	; 0x60
  
  /* Check saturation */
  if ( wAux > -INT16_MAX )
 800736c:	480d      	ldr	r0, [pc, #52]	; (80073a4 <R3_2_RLGetPhaseCurrents+0x50>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 800736e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007372:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8007374:	6812      	ldr	r2, [r2, #0]
 8007376:	1a9b      	subs	r3, r3, r2
  if ( wAux > -INT16_MAX )
 8007378:	4283      	cmp	r3, r0
 800737a:	db05      	blt.n	8007388 <R3_2_RLGetPhaseCurrents+0x34>
  {
    if ( wAux < INT16_MAX )
 800737c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007380:	4293      	cmp	r3, r2
 8007382:	dc0b      	bgt.n	800739c <R3_2_RLGetPhaseCurrents+0x48>
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 8007384:	b21b      	sxth	r3, r3
 8007386:	e000      	b.n	800738a <R3_2_RLGetPhaseCurrents+0x36>
 8007388:	4b07      	ldr	r3, [pc, #28]	; (80073a8 <R3_2_RLGetPhaseCurrents+0x54>)
  pStator_Currents->b = (int16_t)wAux;
}
 800738a:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = (int16_t)wAux;
 800738e:	2200      	movs	r2, #0
 8007390:	f363 020f 	bfi	r2, r3, #0, #16
 8007394:	f363 421f 	bfi	r2, r3, #16, #16
 8007398:	600a      	str	r2, [r1, #0]
}
 800739a:	4770      	bx	lr
 800739c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80073a0:	e7f3      	b.n	800738a <R3_2_RLGetPhaseCurrents+0x36>
 80073a2:	bf00      	nop
 80073a4:	ffff8002 	.word	0xffff8002
 80073a8:	ffff8001 	.word	0xffff8001

080073ac <R3_2_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80073ac:	6f42      	ldr	r2, [r0, #116]	; 0x74

  pHandle->ADCRegularLocked=true;
 80073ae:	2101      	movs	r1, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80073b0:	6893      	ldr	r3, [r2, #8]
{
 80073b2:	b410      	push	{r4}
  pHandle->ADCRegularLocked=true;
 80073b4:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
  WRITE_REG(TIMx->CCR1, CompareValue);
 80073b8:	2400      	movs	r4, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80073ba:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80073be:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80073c0:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80073c2:	6919      	ldr	r1, [r3, #16]
 80073c4:	07c9      	lsls	r1, r1, #31
 80073c6:	d5fc      	bpl.n	80073c2 <R3_2_RLTurnOnLowSides+0x16>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80073c8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80073ca:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80073ce:	6459      	str	r1, [r3, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80073d0:	f892 30ba 	ldrb.w	r3, [r2, #186]	; 0xba
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d10b      	bne.n	80073f0 <R3_2_RLTurnOnLowSides+0x44>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80073d8:	e9d2 0108 	ldrd	r0, r1, [r2, #32]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80073dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80073de:	f8b2 40ac 	ldrh.w	r4, [r2, #172]	; 0xac
  WRITE_REG(GPIOx->BSRR, PinMask);
 80073e2:	6184      	str	r4, [r0, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80073e4:	f8b2 00ae 	ldrh.w	r0, [r2, #174]	; 0xae
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80073e8:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
  WRITE_REG(GPIOx->BRR, PinMask);
 80073ec:	6288      	str	r0, [r1, #40]	; 0x28
 80073ee:	629a      	str	r2, [r3, #40]	; 0x28
  }
  return;
}
 80073f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop

080073f8 <R3_2_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80073f8:	6f42      	ldr	r2, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;

  pHandle->ADCRegularLocked=true;
 80073fa:	2101      	movs	r1, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80073fc:	6893      	ldr	r3, [r2, #8]
{
 80073fe:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007400:	e9d2 5400 	ldrd	r5, r4, [r2]
  pHandle->ADCRegularLocked=true;
 8007404:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007408:	f06f 0101 	mvn.w	r1, #1
 800740c:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800740e:	6919      	ldr	r1, [r3, #16]
 8007410:	07ce      	lsls	r6, r1, #31
 8007412:	d5fc      	bpl.n	800740e <R3_2_RLSwitchOnPWM+0x16>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 8007414:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007418:	f06f 0601 	mvn.w	r6, #1
 800741c:	611e      	str	r6, [r3, #16]
 800741e:	3905      	subs	r1, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007420:	2601      	movs	r6, #1
 8007422:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007424:	6419      	str	r1, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007426:	6919      	ldr	r1, [r3, #16]
 8007428:	07c9      	lsls	r1, r1, #31
 800742a:	d5fc      	bpl.n	8007426 <R3_2_RLSwitchOnPWM+0x2e>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800742c:	68d9      	ldr	r1, [r3, #12]
 800742e:	f041 0101 	orr.w	r1, r1, #1
 8007432:	60d9      	str	r1, [r3, #12]

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8007434:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007436:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800743a:	6459      	str	r1, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800743c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800743e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8007442:	6459      	str	r1, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007444:	f892 10ba 	ldrb.w	r1, [r2, #186]	; 0xba
 8007448:	2902      	cmp	r1, #2
 800744a:	d00f      	beq.n	800746c <R3_2_RLSwitchOnPWM+0x74>
    }
  }

  /* set the sector that correspond to Phase B and C sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 800744c:	2303      	movs	r3, #3
 800744e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  MODIFY_REG(ADCx->CR,
 8007452:	68ab      	ldr	r3, [r5, #8]
 8007454:	4a12      	ldr	r2, [pc, #72]	; (80074a0 <R3_2_RLSwitchOnPWM+0xa8>)
 8007456:	4013      	ands	r3, r2
 8007458:	f043 0308 	orr.w	r3, r3, #8
 800745c:	60ab      	str	r3, [r5, #8]
 800745e:	68a3      	ldr	r3, [r4, #8]
 8007460:	4013      	ands	r3, r2
 8007462:	f043 0308 	orr.w	r3, r3, #8
 8007466:	60a3      	str	r3, [r4, #8]

  LL_ADC_INJ_StartConversion( ADCx_1 );
  LL_ADC_INJ_StartConversion( ADCx_2 );

  return;
}
 8007468:	bcf0      	pop	{r4, r5, r6, r7}
 800746a:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800746c:	6a19      	ldr	r1, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800746e:	6a16      	ldr	r6, [r2, #32]
 8007470:	f8b2 70ac 	ldrh.w	r7, [r2, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8007474:	f240 5355 	movw	r3, #1365	; 0x555
 8007478:	4219      	tst	r1, r3
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800747a:	e9d2 1309 	ldrd	r1, r3, [r2, #36]	; 0x24
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800747e:	d007      	beq.n	8007490 <R3_2_RLSwitchOnPWM+0x98>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007480:	61b7      	str	r7, [r6, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007482:	f8b2 60ae 	ldrh.w	r6, [r2, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007486:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
 800748a:	618e      	str	r6, [r1, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800748c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800748e:	e7dd      	b.n	800744c <R3_2_RLSwitchOnPWM+0x54>
  WRITE_REG(GPIOx->BRR, PinMask);
 8007490:	62b7      	str	r7, [r6, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007492:	f8b2 60ae 	ldrh.w	r6, [r2, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007496:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
 800749a:	628e      	str	r6, [r1, #40]	; 0x28
 800749c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800749e:	e7d5      	b.n	800744c <R3_2_RLSwitchOnPWM+0x54>
 80074a0:	7fffffc0 	.word	0x7fffffc0

080074a4 <R3_2_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 80074a4:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 80074a8:	b510      	push	{r4, lr}
 80074aa:	f00c 0c3c 	and.w	ip, ip, #60	; 0x3c
 80074ae:	f101 0e08 	add.w	lr, r1, #8
 80074b2:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 80074b4:	f85e 300c 	ldr.w	r3, [lr, ip]
 80074b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074c0:	431a      	orrs	r2, r3
 80074c2:	f84e 200c 	str.w	r2, [lr, ip]
  SET_BIT(DACx->SWTRIGR,
 80074c6:	684a      	ldr	r2, [r1, #4]
 80074c8:	f000 0303 	and.w	r3, r0, #3
 80074cc:	4313      	orrs	r3, r2
 80074ce:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 80074d0:	680a      	ldr	r2, [r1, #0]
 80074d2:	f000 0010 	and.w	r0, r0, #16
 80074d6:	2301      	movs	r3, #1
 80074d8:	4083      	lsls	r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 80074da:	ea33 0202 	bics.w	r2, r3, r2
 80074de:	d014      	beq.n	800750a <R3_2_SetAOReferenceVoltage+0x66>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80074e0:	4a14      	ldr	r2, [pc, #80]	; (8007534 <R3_2_SetAOReferenceVoltage+0x90>)
 80074e2:	4815      	ldr	r0, [pc, #84]	; (8007538 <R3_2_SetAOReferenceVoltage+0x94>)
 80074e4:	6812      	ldr	r2, [r2, #0]
  SET_BIT(DACx->CR,
 80074e6:	680c      	ldr	r4, [r1, #0]
 80074e8:	fba0 0202 	umull	r0, r2, r0, r2
 80074ec:	0cd2      	lsrs	r2, r2, #19
 80074ee:	4323      	orrs	r3, r4
 80074f0:	00d2      	lsls	r2, r2, #3
 80074f2:	600b      	str	r3, [r1, #0]
 80074f4:	9200      	str	r2, [sp, #0]
    while(wait_loop_index != 0UL)
 80074f6:	9b00      	ldr	r3, [sp, #0]
 80074f8:	b12b      	cbz	r3, 8007506 <R3_2_SetAOReferenceVoltage+0x62>
      wait_loop_index--;
 80074fa:	9b00      	ldr	r3, [sp, #0]
 80074fc:	3b01      	subs	r3, #1
 80074fe:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 8007500:	9b00      	ldr	r3, [sp, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1f9      	bne.n	80074fa <R3_2_SetAOReferenceVoltage+0x56>
}
 8007506:	b002      	add	sp, #8
 8007508:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800750a:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <R3_2_SetAOReferenceVoltage+0x90>)
 800750c:	4a0a      	ldr	r2, [pc, #40]	; (8007538 <R3_2_SetAOReferenceVoltage+0x94>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	fba2 2303 	umull	r2, r3, r2, r3
 8007514:	0cdb      	lsrs	r3, r3, #19
 8007516:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800751a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800751c:	9b01      	ldr	r3, [sp, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0f1      	beq.n	8007506 <R3_2_SetAOReferenceVoltage+0x62>
      wait_loop_index--;
 8007522:	9b01      	ldr	r3, [sp, #4]
 8007524:	3b01      	subs	r3, #1
 8007526:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8007528:	9b01      	ldr	r3, [sp, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1f9      	bne.n	8007522 <R3_2_SetAOReferenceVoltage+0x7e>
}
 800752e:	b002      	add	sp, #8
 8007530:	bd10      	pop	{r4, pc}
 8007532:	bf00      	nop
 8007534:	20000694 	.word	0x20000694
 8007538:	431bde83 	.word	0x431bde83

0800753c <R3_2_Init>:
{
 800753c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8007540:	6f44      	ldr	r4, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 8007542:	6827      	ldr	r7, [r4, #0]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007544:	6866      	ldr	r6, [r4, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8007546:	687a      	ldr	r2, [r7, #4]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007548:	68a5      	ldr	r5, [r4, #8]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800754a:	f8d4 b014 	ldr.w	fp, [r4, #20]
{
 800754e:	4680      	mov	r8, r0
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8007550:	e9d4 c00b 	ldrd	ip, r0, [r4, #44]	; 0x2c
{
 8007554:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8007556:	f04f 0e04 	mov.w	lr, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800755a:	f022 0204 	bic.w	r2, r2, #4
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800755e:	9000      	str	r0, [sp, #0]
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8007560:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007562:	9001      	str	r0, [sp, #4]
  COMP_TypeDef * COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 8007564:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
  DAC_TypeDef * DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 8007568:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800756a:	9002      	str	r0, [sp, #8]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800756c:	e9d4 a906 	ldrd	sl, r9, [r4, #24]
 8007570:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8007572:	f8c7 e000 	str.w	lr, [r7]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8007576:	687a      	ldr	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8007578:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800757a:	f022 0220 	bic.w	r2, r2, #32
 800757e:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8007580:	6038      	str	r0, [r7, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8007582:	6872      	ldr	r2, [r6, #4]
 8007584:	f022 0204 	bic.w	r2, r2, #4
 8007588:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800758a:	f8c6 e000 	str.w	lr, [r6]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800758e:	6872      	ldr	r2, [r6, #4]
 8007590:	f022 0220 	bic.w	r2, r2, #32
 8007594:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8007596:	6030      	str	r0, [r6, #0]
    if ( TIMx == TIM1 )
 8007598:	4a87      	ldr	r2, [pc, #540]	; (80077b8 <R3_2_Init+0x27c>)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800759a:	4888      	ldr	r0, [pc, #544]	; (80077bc <R3_2_Init+0x280>)
 800759c:	4295      	cmp	r5, r2
 800759e:	6902      	ldr	r2, [r0, #16]
 80075a0:	bf0c      	ite	eq
 80075a2:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 80075a6:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 80075aa:	6102      	str	r2, [r0, #16]
    if ( OPAMPParams != NULL )
 80075ac:	b189      	cbz	r1, 80075d2 <R3_2_Init+0x96>
     if (OPAMPParams -> OPAMPx_1 != NULL ) 
 80075ae:	680a      	ldr	r2, [r1, #0]
 80075b0:	b11a      	cbz	r2, 80075ba <R3_2_Init+0x7e>
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 80075b2:	6810      	ldr	r0, [r2, #0]
 80075b4:	f040 0001 	orr.w	r0, r0, #1
 80075b8:	6010      	str	r0, [r2, #0]
     if (OPAMPParams -> OPAMPx_2 != NULL ) 
 80075ba:	684a      	ldr	r2, [r1, #4]
 80075bc:	b11a      	cbz	r2, 80075c6 <R3_2_Init+0x8a>
 80075be:	6810      	ldr	r0, [r2, #0]
 80075c0:	f040 0001 	orr.w	r0, r0, #1
 80075c4:	6010      	str	r0, [r2, #0]
     if (OPAMPParams -> OPAMPx_3 != NULL ) 
 80075c6:	688a      	ldr	r2, [r1, #8]
 80075c8:	b11a      	cbz	r2, 80075d2 <R3_2_Init+0x96>
 80075ca:	6811      	ldr	r1, [r2, #0]
 80075cc:	f041 0101 	orr.w	r1, r1, #1
 80075d0:	6011      	str	r1, [r2, #0]
    if ( COMP_OCPAx != NULL )
 80075d2:	b1b3      	cbz	r3, 8007602 <R3_2_Init+0xc6>
      if (( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE ) && (DAC_OCPAx != MC_NULL))
 80075d4:	f894 20bd 	ldrb.w	r2, [r4, #189]	; 0xbd
 80075d8:	2a01      	cmp	r2, #1
 80075da:	d00a      	beq.n	80075f2 <R3_2_Init+0xb6>
 80075dc:	f1bc 0f00 	cmp.w	ip, #0
 80075e0:	d007      	beq.n	80075f2 <R3_2_Init+0xb6>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 80075e2:	f8b4 20b6 	ldrh.w	r2, [r4, #182]	; 0xb6
 80075e6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80075e8:	9303      	str	r3, [sp, #12]
 80075ea:	4661      	mov	r1, ip
 80075ec:	f7ff ff5a 	bl	80074a4 <R3_2_SetAOReferenceVoltage>
 80075f0:	9b03      	ldr	r3, [sp, #12]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	f042 0201 	orr.w	r2, r2, #1
 80075f8:	601a      	str	r2, [r3, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007600:	601a      	str	r2, [r3, #0]
    if ( COMP_OCPBx != NULL )
 8007602:	f1bb 0f00 	cmp.w	fp, #0
 8007606:	d017      	beq.n	8007638 <R3_2_Init+0xfc>
      if (( pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE ) && (DAC_OCPBx != MC_NULL))
 8007608:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
 800760c:	2b01      	cmp	r3, #1
 800760e:	d007      	beq.n	8007620 <R3_2_Init+0xe4>
 8007610:	9b00      	ldr	r3, [sp, #0]
 8007612:	b12b      	cbz	r3, 8007620 <R3_2_Init+0xe4>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8007614:	f8b4 20b6 	ldrh.w	r2, [r4, #182]	; 0xb6
 8007618:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800761a:	4619      	mov	r1, r3
 800761c:	f7ff ff42 	bl	80074a4 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8007620:	f8db 3000 	ldr.w	r3, [fp]
 8007624:	f043 0301 	orr.w	r3, r3, #1
 8007628:	f8cb 3000 	str.w	r3, [fp]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800762c:	f8db 3000 	ldr.w	r3, [fp]
 8007630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007634:	f8cb 3000 	str.w	r3, [fp]
    if ( COMP_OCPCx != NULL )
 8007638:	f1ba 0f00 	cmp.w	sl, #0
 800763c:	d017      	beq.n	800766e <R3_2_Init+0x132>
      if (( pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE )  && (DAC_OCPCx != MC_NULL))
 800763e:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
 8007642:	2b01      	cmp	r3, #1
 8007644:	d007      	beq.n	8007656 <R3_2_Init+0x11a>
 8007646:	9b01      	ldr	r3, [sp, #4]
 8007648:	b12b      	cbz	r3, 8007656 <R3_2_Init+0x11a>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800764a:	f8b4 20b6 	ldrh.w	r2, [r4, #182]	; 0xb6
 800764e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8007650:	4619      	mov	r1, r3
 8007652:	f7ff ff27 	bl	80074a4 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8007656:	f8da 3000 	ldr.w	r3, [sl]
 800765a:	f043 0301 	orr.w	r3, r3, #1
 800765e:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8007662:	f8da 3000 	ldr.w	r3, [sl]
 8007666:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800766a:	f8ca 3000 	str.w	r3, [sl]
    if ( COMP_OVPx != NULL )
 800766e:	f1b9 0f00 	cmp.w	r9, #0
 8007672:	d017      	beq.n	80076a4 <R3_2_Init+0x168>
      if (( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE ) && (DAC_OVPx != MC_NULL))
 8007674:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8007678:	2b01      	cmp	r3, #1
 800767a:	d007      	beq.n	800768c <R3_2_Init+0x150>
 800767c:	9b02      	ldr	r3, [sp, #8]
 800767e:	b12b      	cbz	r3, 800768c <R3_2_Init+0x150>
          R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 8007680:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
 8007684:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007686:	4619      	mov	r1, r3
 8007688:	f7ff ff0c 	bl	80074a4 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800768c:	f8d9 3000 	ldr.w	r3, [r9]
 8007690:	f043 0301 	orr.w	r3, r3, #1
 8007694:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8007698:	f8d9 3000 	ldr.w	r3, [r9]
 800769c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076a0:	f8c9 3000 	str.w	r3, [r9]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	07d8      	lsls	r0, r3, #31
 80076a8:	d555      	bpl.n	8007756 <R3_2_Init+0x21a>
 80076aa:	68b3      	ldr	r3, [r6, #8]
 80076ac:	07d9      	lsls	r1, r3, #31
 80076ae:	d54e      	bpl.n	800774e <R3_2_Init+0x212>
  volatile uint32_t Brk2Timeout = 1000;
 80076b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80076b4:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80076b6:	682b      	ldr	r3, [r5, #0]
 80076b8:	f023 0301 	bic.w	r3, r3, #1
 80076bc:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80076be:	686b      	ldr	r3, [r5, #4]
 80076c0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80076c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c8:	606b      	str	r3, [r5, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80076ca:	69ab      	ldr	r3, [r5, #24]
 80076cc:	f043 0308 	orr.w	r3, r3, #8
 80076d0:	61ab      	str	r3, [r5, #24]
 80076d2:	69ab      	ldr	r3, [r5, #24]
 80076d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80076d8:	61ab      	str	r3, [r5, #24]
 80076da:	69eb      	ldr	r3, [r5, #28]
 80076dc:	f043 0308 	orr.w	r3, r3, #8
 80076e0:	61eb      	str	r3, [r5, #28]
 80076e2:	69eb      	ldr	r3, [r5, #28]
 80076e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80076e8:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80076ea:	696b      	ldr	r3, [r5, #20]
 80076ec:	f043 0301 	orr.w	r3, r3, #1
 80076f0:	616b      	str	r3, [r5, #20]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 80076f2:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d03a      	beq.n	8007770 <R3_2_Init+0x234>
    if ( pHandle->_Super.Motor == M1 )
 80076fa:	f898 3046 	ldrb.w	r3, [r8, #70]	; 0x46
 80076fe:	b92b      	cbnz	r3, 800770c <R3_2_Init+0x1d0>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 8007700:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
 8007704:	2b01      	cmp	r3, #1
 8007706:	d037      	beq.n	8007778 <R3_2_Init+0x23c>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8007708:	2b03      	cmp	r3, #3
 800770a:	d04c      	beq.n	80077a6 <R3_2_Init+0x26a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800770c:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8007710:	612b      	str	r3, [r5, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8007712:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 8007716:	b16b      	cbz	r3, 8007734 <R3_2_Init+0x1f8>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8007718:	692b      	ldr	r3, [r5, #16]
 800771a:	05da      	lsls	r2, r3, #23
 800771c:	d50a      	bpl.n	8007734 <R3_2_Init+0x1f8>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800771e:	f46f 7280 	mvn.w	r2, #256	; 0x100
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 8007722:	9b05      	ldr	r3, [sp, #20]
 8007724:	b133      	cbz	r3, 8007734 <R3_2_Init+0x1f8>
 8007726:	612a      	str	r2, [r5, #16]
      Brk2Timeout--;
 8007728:	9b05      	ldr	r3, [sp, #20]
 800772a:	3b01      	subs	r3, #1
 800772c:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800772e:	692b      	ldr	r3, [r5, #16]
 8007730:	05db      	lsls	r3, r3, #23
 8007732:	d4f6      	bmi.n	8007722 <R3_2_Init+0x1e6>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8007734:	68eb      	ldr	r3, [r5, #12]
 8007736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800773a:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CCER, Channels);
 800773c:	6a2b      	ldr	r3, [r5, #32]
 800773e:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8007742:	f043 0305 	orr.w	r3, r3, #5
 8007746:	622b      	str	r3, [r5, #32]
}
 8007748:	b007      	add	sp, #28
 800774a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      R3_2_ADCxInit (ADCx_2);
 800774e:	4630      	mov	r0, r6
 8007750:	f7ff fb9a 	bl	8006e88 <R3_2_ADCxInit>
 8007754:	e7ac      	b.n	80076b0 <R3_2_Init+0x174>
      R3_2_ADCxInit (ADCx_1);
 8007756:	4638      	mov	r0, r7
 8007758:	f7ff fb96 	bl	8006e88 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800775c:	2340      	movs	r3, #64	; 0x40
 800775e:	603b      	str	r3, [r7, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007766:	607b      	str	r3, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007768:	68b3      	ldr	r3, [r6, #8]
 800776a:	07d9      	lsls	r1, r3, #31
 800776c:	d4a0      	bmi.n	80076b0 <R3_2_Init+0x174>
 800776e:	e7ee      	b.n	800774e <R3_2_Init+0x212>
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 8007770:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
 8007774:	2b01      	cmp	r3, #1
 8007776:	d00b      	beq.n	8007790 <R3_2_Init+0x254>
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8007778:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 800777c:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 800777e:	626b      	str	r3, [r5, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8007780:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8007784:	612b      	str	r3, [r5, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8007786:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1c4      	bne.n	8007718 <R3_2_Init+0x1dc>
 800778e:	e7d1      	b.n	8007734 <R3_2_Init+0x1f8>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8007790:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
 8007794:	2a03      	cmp	r2, #3
 8007796:	d1ef      	bne.n	8007778 <R3_2_Init+0x23c>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007798:	632b      	str	r3, [r5, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800779a:	696b      	ldr	r3, [r5, #20]
 800779c:	f043 0301 	orr.w	r3, r3, #1
 80077a0:	616b      	str	r3, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80077a2:	632a      	str	r2, [r5, #48]	; 0x30
}
 80077a4:	e7e8      	b.n	8007778 <R3_2_Init+0x23c>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80077a6:	2201      	movs	r2, #1
 80077a8:	632a      	str	r2, [r5, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80077aa:	696a      	ldr	r2, [r5, #20]
 80077ac:	f042 0201 	orr.w	r2, r2, #1
 80077b0:	616a      	str	r2, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80077b2:	632b      	str	r3, [r5, #48]	; 0x30
}
 80077b4:	e7aa      	b.n	800770c <R3_2_Init+0x1d0>
 80077b6:	bf00      	nop
 80077b8:	40012c00 	.word	0x40012c00
 80077bc:	e0042000 	.word	0xe0042000

080077c0 <R3_2_CurrentReadingPolarization>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80077c0:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 80077c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80077c4:	689d      	ldr	r5, [r3, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 80077c6:	e9d3 7600 	ldrd	r7, r6, [r3]
  pHandle->PhaseAOffset = 0u;
 80077ca:	2300      	movs	r3, #0
  pHandle->PolarizationCounter = 0u;
 80077cc:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  pHandle->PhaseBOffset = 0u;
 80077d0:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  pHandle->PhaseCOffset = 0u;
 80077d4:	6643      	str	r3, [r0, #100]	; 0x64
  CLEAR_BIT(TIMx->CCER, Channels);
 80077d6:	6a2b      	ldr	r3, [r5, #32]
 80077d8:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 80077dc:	f023 0305 	bic.w	r3, r3, #5
 80077e0:	622b      	str	r3, [r5, #32]
  pHandle->PolarizationSector=SECTOR_5;
 80077e2:	2304      	movs	r3, #4
 80077e4:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_5;   
 80077e8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 80077ec:	4b3b      	ldr	r3, [pc, #236]	; (80078dc <R3_2_CurrentReadingPolarization+0x11c>)
 80077ee:	6043      	str	r3, [r0, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 80077f0:	4b3b      	ldr	r3, [pc, #236]	; (80078e0 <R3_2_CurrentReadingPolarization+0x120>)
 80077f2:	6183      	str	r3, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 80077f4:	2380      	movs	r3, #128	; 0x80
{
 80077f6:	b083      	sub	sp, #12
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 80077f8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
{
 80077fc:	4604      	mov	r4, r0
  R3_2_SwitchOnPWM( &pHandle->_Super );
 80077fe:	f7ff fd1f 	bl	8007240 <R3_2_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 8007802:	4a38      	ldr	r2, [pc, #224]	; (80078e4 <R3_2_CurrentReadingPolarization+0x124>)
 8007804:	686b      	ldr	r3, [r5, #4]
 8007806:	4013      	ands	r3, r2
 8007808:	2b70      	cmp	r3, #112	; 0x70
 800780a:	d1fb      	bne.n	8007804 <R3_2_CurrentReadingPolarization+0x44>
  MODIFY_REG(ADCx->CR,
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	4a36      	ldr	r2, [pc, #216]	; (80078e8 <R3_2_CurrentReadingPolarization+0x128>)
 8007810:	4013      	ands	r3, r2
 8007812:	f043 0308 	orr.w	r3, r3, #8
 8007816:	60bb      	str	r3, [r7, #8]
 8007818:	68b3      	ldr	r3, [r6, #8]
 800781a:	4013      	ands	r3, r2
 800781c:	f043 0308 	orr.w	r3, r3, #8
  						  pHandle->pParams_str->RepetitionCounter,
 8007820:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007822:	60b3      	str	r3, [r6, #8]
  waitForPolarizationEnd( TIMx,
 8007824:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8007828:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800782c:	f892 20bb 	ldrb.w	r2, [r2, #187]	; 0xbb
 8007830:	4628      	mov	r0, r5
 8007832:	e9cd 1300 	strd	r1, r3, [sp]
 8007836:	f7ff f99d 	bl	8006b74 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 800783a:	4620      	mov	r0, r4
 800783c:	f7ff fd4c 	bl	80072d8 <R3_2_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 8007840:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 8007842:	4a2a      	ldr	r2, [pc, #168]	; (80078ec <R3_2_CurrentReadingPolarization+0x12c>)
 8007844:	6062      	str	r2, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8007846:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 8007848:	f884 606c 	strb.w	r6, [r4, #108]	; 0x6c
  pHandle->PolarizationSector=SECTOR_1;
 800784c:	f884 606d 	strb.w	r6, [r4, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_1;   
 8007850:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8007854:	f7ff fcf4 	bl	8007240 <R3_2_SwitchOnPWM>
  						  pHandle->pParams_str->RepetitionCounter,
 8007858:	6f62      	ldr	r2, [r4, #116]	; 0x74
  waitForPolarizationEnd( TIMx,
 800785a:	e9dd 1300 	ldrd	r1, r3, [sp]
 800785e:	f892 20bb 	ldrb.w	r2, [r2, #187]	; 0xbb
 8007862:	4628      	mov	r0, r5
 8007864:	f7ff f986 	bl	8006b74 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 8007868:	4620      	mov	r0, r4
 800786a:	f7ff fd35 	bl	80072d8 <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800786e:	e9d4 2317 	ldrd	r2, r3, [r4, #92]	; 0x5c
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8007872:	0912      	lsrs	r2, r2, #4
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8007874:	091b      	lsrs	r3, r3, #4
 8007876:	e9c4 2317 	strd	r2, r3, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800787a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800787c:	4a1c      	ldr	r2, [pc, #112]	; (80078f0 <R3_2_CurrentReadingPolarization+0x130>)
 800787e:	6062      	str	r2, [r4, #4]
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8007880:	091b      	lsrs	r3, r3, #4
 8007882:	6663      	str	r3, [r4, #100]	; 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007884:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 8007886:	4a1b      	ldr	r2, [pc, #108]	; (80078f4 <R3_2_CurrentReadingPolarization+0x134>)
 8007888:	61a2      	str	r2, [r4, #24]
 800788a:	f023 0308 	bic.w	r3, r3, #8
 800788e:	61ab      	str	r3, [r5, #24]
 8007890:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 8007892:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8007896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800789a:	61aa      	str	r2, [r5, #24]
 800789c:	69ea      	ldr	r2, [r5, #28]
 800789e:	f022 0208 	bic.w	r2, r2, #8
 80078a2:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80078a4:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80078a6:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80078a8:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80078aa:	69ab      	ldr	r3, [r5, #24]
 80078ac:	f043 0308 	orr.w	r3, r3, #8
 80078b0:	61ab      	str	r3, [r5, #24]
 80078b2:	69ab      	ldr	r3, [r5, #24]
 80078b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80078b8:	61ab      	str	r3, [r5, #24]
 80078ba:	69eb      	ldr	r3, [r5, #28]
 80078bc:	f043 0308 	orr.w	r3, r3, #8
 80078c0:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 80078c2:	6a2b      	ldr	r3, [r5, #32]
 80078c4:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
  pHandle->_Super.Sector=SECTOR_5;
 80078c8:	2204      	movs	r2, #4
 80078ca:	f043 0305 	orr.w	r3, r3, #5
 80078ce:	622b      	str	r3, [r5, #32]
 80078d0:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
  pHandle->BrakeActionLock = false;
 80078d4:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
}
 80078d8:	b003      	add	sp, #12
 80078da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078dc:	0800715d 	.word	0x0800715d
 80078e0:	080070a5 	.word	0x080070a5
 80078e4:	02000070 	.word	0x02000070
 80078e8:	7fffffc0 	.word	0x7fffffc0
 80078ec:	080071a9 	.word	0x080071a9
 80078f0:	08006f3d 	.word	0x08006f3d
 80078f4:	080070e1 	.word	0x080070e1

080078f8 <R3_2_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80078f8:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 80078fa:	4684      	mov	ip, r0
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 80078fc:	68d0      	ldr	r0, [r2, #12]
{
 80078fe:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007900:	e9d2 1500 	ldrd	r1, r5, [r2]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007904:	6894      	ldr	r4, [r2, #8]
  if ( OPAMPParams != NULL )
 8007906:	b378      	cbz	r0, 8007968 <R3_2_TIMx_UP_IRQHandler+0x70>
    while (ADCx_1->JSQR != 0x0u)
 8007908:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1fc      	bne.n	8007908 <R3_2_TIMx_UP_IRQHandler+0x10>
    Opamp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 800790e:	f89c e03a 	ldrb.w	lr, [ip, #58]	; 0x3a
 8007912:	eb00 038e 	add.w	r3, r0, lr, lsl #2
 8007916:	68de      	ldr	r6, [r3, #12]
    if (Opamp != NULL )
 8007918:	b12e      	cbz	r6, 8007926 <R3_2_TIMx_UP_IRQHandler+0x2e>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 800791a:	6830      	ldr	r0, [r6, #0]
 800791c:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800791e:	f420 7086 	bic.w	r0, r0, #268	; 0x10c
 8007922:	4338      	orrs	r0, r7
 8007924:	6030      	str	r0, [r6, #0]
     Opamp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8007926:	6a58      	ldr	r0, [r3, #36]	; 0x24
    if (Opamp != NULL )
 8007928:	b128      	cbz	r0, 8007936 <R3_2_TIMx_UP_IRQHandler+0x3e>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 800792a:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 800792c:	6803      	ldr	r3, [r0, #0]
 800792e:	f423 7386 	bic.w	r3, r3, #268	; 0x10c
 8007932:	4333      	orrs	r3, r6
 8007934:	6003      	str	r3, [r0, #0]
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007936:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 800793a:	f8bc 306a 	ldrh.w	r3, [ip, #106]	; 0x6a
 800793e:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007940:	f8d2 6094 	ldr.w	r6, [r2, #148]	; 0x94
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007944:	4318      	orrs	r0, r3
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007946:	4333      	orrs	r3, r6
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007948:	64c8      	str	r0, [r1, #76]	; 0x4c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800794a:	64eb      	str	r3, [r5, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800794c:	6863      	ldr	r3, [r4, #4]
 800794e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8007956:	2280      	movs	r2, #128	; 0x80
 8007958:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800795c:	6063      	str	r3, [r4, #4]
}
 800795e:	f10c 0046 	add.w	r0, ip, #70	; 0x46
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8007962:	f8ac 206a 	strh.w	r2, [ip, #106]	; 0x6a
}
 8007966:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007968:	f89c e03a 	ldrb.w	lr, [ip, #58]	; 0x3a
 800796c:	e7e3      	b.n	8007936 <R3_2_TIMx_UP_IRQHandler+0x3e>
 800796e:	bf00      	nop

08007970 <R3_2_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8007970:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8007974:	b923      	cbnz	r3, 8007980 <R3_2_BRK2_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007976:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007978:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
 800797c:	2a02      	cmp	r2, #2
 800797e:	d004      	beq.n	800798a <R3_2_BRK2_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 8007980:	2301      	movs	r3, #1
 8007982:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 8007986:	3046      	adds	r0, #70	; 0x46
 8007988:	4770      	bx	lr
{
 800798a:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800798c:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007990:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 8007996:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007998:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800799c:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80079a0:	628c      	str	r4, [r1, #40]	; 0x28
 80079a2:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 80079a4:	2301      	movs	r3, #1
 80079a6:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 80079aa:	bc30      	pop	{r4, r5}
 80079ac:	3046      	adds	r0, #70	; 0x46
 80079ae:	4770      	bx	lr

080079b0 <R3_2_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80079b0:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80079b2:	6891      	ldr	r1, [r2, #8]
 80079b4:	6c4a      	ldr	r2, [r1, #68]	; 0x44
{
 80079b6:	4603      	mov	r3, r0
  pHandle->OverVoltageFlag = true;
 80079b8:	f240 1c01 	movw	ip, #257	; 0x101
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80079bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079c0:	644a      	str	r2, [r1, #68]	; 0x44
}
 80079c2:	3046      	adds	r0, #70	; 0x46
  pHandle->OverVoltageFlag = true;
 80079c4:	f8a3 c06f 	strh.w	ip, [r3, #111]	; 0x6f
}
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop

080079cc <R3_2_IsOverCurrentOccurred>:
{
 80079cc:	4603      	mov	r3, r0
  if ( pHandle->OverVoltageFlag == true )
 80079ce:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
 80079d2:	b160      	cbz	r0, 80079ee <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 80079da:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 80079dc:	2002      	movs	r0, #2
  if ( pHandle->OverCurrentFlag == true )
 80079de:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 80079e2:	b11a      	cbz	r2, 80079ec <R3_2_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
    retVal |= MC_BREAK_IN;
 80079ea:	4608      	mov	r0, r1
}
 80079ec:	4770      	bx	lr
 80079ee:	2140      	movs	r1, #64	; 0x40
 80079f0:	e7f5      	b.n	80079de <R3_2_IsOverCurrentOccurred+0x12>
 80079f2:	bf00      	nop

080079f4 <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 80079f4:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 80079f8:	b430      	push	{r4, r5}
  if ( pHandle->_Super.RLDetectionMode == false )
 80079fa:	2900      	cmp	r1, #0
 80079fc:	d13c      	bne.n	8007a78 <R3_2_RLDetectionModeEnable+0x84>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80079fe:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8007a00:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007a02:	699a      	ldr	r2, [r3, #24]
 8007a04:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007a08:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007a0c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007a10:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007a12:	6a1a      	ldr	r2, [r3, #32]
 8007a14:	f042 0201 	orr.w	r2, r2, #1
 8007a18:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007a1a:	6a1a      	ldr	r2, [r3, #32]
 8007a1c:	f022 0204 	bic.w	r2, r2, #4
 8007a20:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007a22:	6359      	str	r1, [r3, #52]	; 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8007a24:	f895 20ba 	ldrb.w	r2, [r5, #186]	; 0xba
 8007a28:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007a2a:	f103 0418 	add.w	r4, r3, #24
 8007a2e:	d030      	beq.n	8007a92 <R3_2_RLDetectionModeEnable+0x9e>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007a30:	2a02      	cmp	r2, #2
 8007a32:	d10f      	bne.n	8007a54 <R3_2_RLDetectionModeEnable+0x60>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007a34:	699a      	ldr	r2, [r3, #24]
 8007a36:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007a3a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007a3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a42:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007a44:	6a1a      	ldr	r2, [r3, #32]
 8007a46:	f042 0210 	orr.w	r2, r2, #16
 8007a4a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007a4c:	6a1a      	ldr	r2, [r3, #32]
 8007a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a52:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007a54:	6862      	ldr	r2, [r4, #4]
 8007a56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007a5a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007a5e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8007a62:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007a64:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8007a66:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8007a68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a6c:	621a      	str	r2, [r3, #32]
 8007a6e:	6a1a      	ldr	r2, [r3, #32]
 8007a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a74:	621a      	str	r2, [r3, #32]
 8007a76:	65c1      	str	r1, [r0, #92]	; 0x5c
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8007a78:	4b0e      	ldr	r3, [pc, #56]	; (8007ab4 <R3_2_RLDetectionModeEnable+0xc0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8007a7a:	490f      	ldr	r1, [pc, #60]	; (8007ab8 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007a7c:	4a0f      	ldr	r2, [pc, #60]	; (8007abc <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8007a7e:	4c10      	ldr	r4, [pc, #64]	; (8007ac0 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8007a80:	6143      	str	r3, [r0, #20]
  pHandle->_Super.RLDetectionMode = true;
 8007a82:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8007a84:	6044      	str	r4, [r0, #4]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007a86:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8007a8a:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 8007a8c:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8007a90:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007a92:	699a      	ldr	r2, [r3, #24]
 8007a94:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007a98:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007a9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007aa0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007aa2:	6a1a      	ldr	r2, [r3, #32]
 8007aa4:	f022 0210 	bic.w	r2, r2, #16
 8007aa8:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007aaa:	6a1a      	ldr	r2, [r3, #32]
 8007aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ab0:	621a      	str	r2, [r3, #32]
}
 8007ab2:	e7cf      	b.n	8007a54 <R3_2_RLDetectionModeEnable+0x60>
 8007ab4:	080073ad 	.word	0x080073ad
 8007ab8:	080073f9 	.word	0x080073f9
 8007abc:	080072d9 	.word	0x080072d9
 8007ac0:	08007355 	.word	0x08007355

08007ac4 <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8007ac4:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d03b      	beq.n	8007b44 <R3_2_RLDetectionModeDisable+0x80>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007acc:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8007ace:	688b      	ldr	r3, [r1, #8]
{
 8007ad0:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007ad2:	699a      	ldr	r2, [r3, #24]
 8007ad4:	4c43      	ldr	r4, [pc, #268]	; (8007be4 <R3_2_RLDetectionModeDisable+0x120>)
 8007ad6:	4022      	ands	r2, r4
 8007ad8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007adc:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007ade:	6a1a      	ldr	r2, [r3, #32]
 8007ae0:	f042 0201 	orr.w	r2, r2, #1
 8007ae4:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8007ae6:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 8007aea:	2a01      	cmp	r2, #1
 8007aec:	d02b      	beq.n	8007b46 <R3_2_RLDetectionModeDisable+0x82>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007aee:	2a02      	cmp	r2, #2
 8007af0:	d050      	beq.n	8007b94 <R3_2_RLDetectionModeDisable+0xd0>
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8007af2:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8007af6:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007af8:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007afa:	6999      	ldr	r1, [r3, #24]
 8007afc:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8007b00:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8007b04:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8007b08:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007b0a:	6a19      	ldr	r1, [r3, #32]
 8007b0c:	f041 0110 	orr.w	r1, r1, #16
 8007b10:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007b12:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007b14:	69d9      	ldr	r1, [r3, #28]
 8007b16:	4021      	ands	r1, r4
 8007b18:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8007b1c:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007b1e:	6a19      	ldr	r1, [r3, #32]
 8007b20:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007b24:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8007b26:	4930      	ldr	r1, [pc, #192]	; (8007be8 <R3_2_RLDetectionModeDisable+0x124>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007b28:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007b2a:	4a30      	ldr	r2, [pc, #192]	; (8007bec <R3_2_RLDetectionModeDisable+0x128>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8007b2c:	6041      	str	r1, [r0, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8007b2e:	4930      	ldr	r1, [pc, #192]	; (8007bf0 <R3_2_RLDetectionModeDisable+0x12c>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8007b30:	4c30      	ldr	r4, [pc, #192]	; (8007bf4 <R3_2_RLDetectionModeDisable+0x130>)
 8007b32:	6144      	str	r4, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 8007b34:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007b36:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8007b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8007b3e:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8007b42:	4770      	bx	lr
 8007b44:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8007b46:	6a19      	ldr	r1, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8007b48:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8007b4c:	f041 0104 	orr.w	r1, r1, #4
 8007b50:	0852      	lsrs	r2, r2, #1
 8007b52:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007b54:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007b56:	6999      	ldr	r1, [r3, #24]
 8007b58:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8007b5c:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8007b60:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8007b64:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007b66:	6a19      	ldr	r1, [r3, #32]
 8007b68:	f041 0110 	orr.w	r1, r1, #16
 8007b6c:	6219      	str	r1, [r3, #32]
 8007b6e:	6a19      	ldr	r1, [r3, #32]
 8007b70:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8007b74:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007b76:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007b78:	69d9      	ldr	r1, [r3, #28]
 8007b7a:	4021      	ands	r1, r4
 8007b7c:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8007b80:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007b82:	6a19      	ldr	r1, [r3, #32]
 8007b84:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007b88:	6219      	str	r1, [r3, #32]
 8007b8a:	6a19      	ldr	r1, [r3, #32]
 8007b8c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8007b90:	6219      	str	r1, [r3, #32]
}
 8007b92:	e7c8      	b.n	8007b26 <R3_2_RLDetectionModeDisable+0x62>
  CLEAR_BIT(TIMx->CCER, Channels);
 8007b94:	6a19      	ldr	r1, [r3, #32]
 8007b96:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8007b9a:	f021 0104 	bic.w	r1, r1, #4
 8007b9e:	0852      	lsrs	r2, r2, #1
 8007ba0:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007ba2:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007ba4:	6999      	ldr	r1, [r3, #24]
 8007ba6:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8007baa:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8007bae:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8007bb2:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007bb4:	6a19      	ldr	r1, [r3, #32]
 8007bb6:	f041 0110 	orr.w	r1, r1, #16
 8007bba:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007bbc:	6a19      	ldr	r1, [r3, #32]
 8007bbe:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8007bc2:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007bc4:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007bc6:	69d9      	ldr	r1, [r3, #28]
 8007bc8:	4021      	ands	r1, r4
 8007bca:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8007bce:	61d9      	str	r1, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007bd0:	6a19      	ldr	r1, [r3, #32]
 8007bd2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007bd6:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007bd8:	6a19      	ldr	r1, [r3, #32]
 8007bda:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007bde:	6219      	str	r1, [r3, #32]
}
 8007be0:	e7a1      	b.n	8007b26 <R3_2_RLDetectionModeDisable+0x62>
 8007be2:	bf00      	nop
 8007be4:	fffeff8c 	.word	0xfffeff8c
 8007be8:	08006f3d 	.word	0x08006f3d
 8007bec:	080072d9 	.word	0x080072d9
 8007bf0:	08007241 	.word	0x08007241
 8007bf4:	080071ed 	.word	0x080071ed

08007bf8 <R3_2_RLDetectionModeSetDuty>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007bf8:	6f42      	ldr	r2, [r0, #116]	; 0x74
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007bfa:	f8b0 c068 	ldrh.w	ip, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007bfe:	6892      	ldr	r2, [r2, #8]
{
 8007c00:	4603      	mov	r3, r0
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007c02:	69d0      	ldr	r0, [r2, #28]
 8007c04:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007c08:	fb01 f10c 	mul.w	r1, r1, ip
 8007c0c:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
{
 8007c10:	b410      	push	{r4}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007c12:	0c09      	lsrs	r1, r1, #16
  pHandle->ADCRegularLocked=true;
 8007c14:	2401      	movs	r4, #1
 8007c16:	f440 40e0 	orr.w	r0, r0, #28672	; 0x7000
 8007c1a:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8007c1e:	8659      	strh	r1, [r3, #50]	; 0x32
 8007c20:	61d0      	str	r0, [r2, #28]
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8007c22:	f8b3 0056 	ldrh.w	r0, [r3, #86]	; 0x56
  LL_TIM_OC_SetCompareCH3(TIMx, ( uint32_t )pHandle->_Super.Toff);
 8007c26:	f8b3 4058 	ldrh.w	r4, [r3, #88]	; 0x58
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8007c2a:	ebac 0000 	sub.w	r0, ip, r0
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007c2e:	6410      	str	r0, [r2, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007c30:	63d4      	str	r4, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007c32:	6351      	str	r1, [r2, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007c34:	6851      	ldr	r1, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007c36:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 8007c38:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
 8007c3c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  pHdl->Sector = SECTOR_4;
 8007c40:	f04f 0c03 	mov.w	ip, #3
 8007c44:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 8007c48:	6051      	str	r1, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007c4a:	2801      	cmp	r0, #1
  pHdl->Sector = SECTOR_4;
 8007c4c:	f883 c03a 	strb.w	ip, [r3, #58]	; 0x3a
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007c50:	6852      	ldr	r2, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007c52:	d007      	beq.n	8007c64 <R3_2_RLDetectionModeSetDuty+0x6c>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007c54:	4b06      	ldr	r3, [pc, #24]	; (8007c70 <R3_2_RLDetectionModeSetDuty+0x78>)
}
 8007c56:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007c5a:	421a      	tst	r2, r3
    hAux = MC_FOC_DURATION;
 8007c5c:	bf14      	ite	ne
 8007c5e:	2001      	movne	r0, #1
 8007c60:	2000      	moveq	r0, #0
}
 8007c62:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 8007c64:	2200      	movs	r2, #0
}
 8007c66:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.SWerror = 0u;
 8007c6a:	871a      	strh	r2, [r3, #56]	; 0x38
}
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	02000070 	.word	0x02000070

08007c74 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8007c74:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8007c78:	8b82      	ldrh	r2, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007c7a:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8007c7c:	4494      	add	ip, r2
 8007c7e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 8007c82:	b430      	push	{r4, r5}
 8007c84:	2500      	movs	r5, #0
 8007c86:	f36c 050f 	bfi	r5, ip, #0, #16
 8007c8a:	f36c 451f 	bfi	r5, ip, #16, #16
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007c8e:	b14b      	cbz	r3, 8007ca4 <RVBS_Clear+0x30>
  {
    pHandle->aBuffer[index] = aux;
 8007c90:	6a04      	ldr	r4, [r0, #32]
 8007c92:	2300      	movs	r3, #0
 8007c94:	b29a      	uxth	r2, r3
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007c96:	3301      	adds	r3, #1
    pHandle->aBuffer[index] = aux;
 8007c98:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007c9c:	8b01      	ldrh	r1, [r0, #24]
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	4291      	cmp	r1, r2
 8007ca2:	d8f7      	bhi.n	8007c94 <RVBS_Clear+0x20>
  }
  pHandle->_Super.LatestConv = aux;
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8007ca4:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 8007ca6:	6045      	str	r5, [r0, #4]
  pHandle->index = 0;
 8007ca8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
}
 8007cac:	bc30      	pop	{r4, r5}
 8007cae:	4770      	bx	lr

08007cb0 <RVBS_Init>:
{
 8007cb0:	b510      	push	{r4, lr}
 8007cb2:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8007cb4:	300c      	adds	r0, #12
 8007cb6:	f7fa f9ed 	bl	8002094 <RCM_RegisterRegConv>
 8007cba:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f7ff ffd8 	bl	8007c74 <RVBS_Clear>
}
 8007cc4:	bd10      	pop	{r4, pc}
 8007cc6:	bf00      	nop

08007cc8 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8007cc8:	88c3      	ldrh	r3, [r0, #6]
 8007cca:	8b42      	ldrh	r2, [r0, #26]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d306      	bcc.n	8007cde <RVBS_CheckFaultState+0x16>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8007cd0:	8b80      	ldrh	r0, [r0, #28]
 8007cd2:	4298      	cmp	r0, r3
 8007cd4:	bf94      	ite	ls
 8007cd6:	2000      	movls	r0, #0
 8007cd8:	2001      	movhi	r0, #1
 8007cda:	0080      	lsls	r0, r0, #2
 8007cdc:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8007cde:	2002      	movs	r0, #2
  else
  {
    fault = MC_NO_ERROR;
  }
  return fault;
}
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop

08007ce4 <RVBS_CalcAvVbus>:
{
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8007ce8:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8007cec:	f7fa fad8 	bl	80022a0 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8007cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007cf4:	4298      	cmp	r0, r3
 8007cf6:	d01b      	beq.n	8007d30 <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 8007cf8:	6a26      	ldr	r6, [r4, #32]
 8007cfa:	f894 e025 	ldrb.w	lr, [r4, #37]	; 0x25
 8007cfe:	f826 001e 	strh.w	r0, [r6, lr, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007d02:	8b25      	ldrh	r5, [r4, #24]
 8007d04:	b1cd      	cbz	r5, 8007d3a <RVBS_CalcAvVbus+0x56>
 8007d06:	2300      	movs	r3, #0
    wtemp = 0;
 8007d08:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8007d0a:	f836 c013 	ldrh.w	ip, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007d0e:	3301      	adds	r3, #1
 8007d10:	b2d9      	uxtb	r1, r3
 8007d12:	42a9      	cmp	r1, r5
      wtemp += pHandle->aBuffer[i];
 8007d14:	4462      	add	r2, ip
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007d16:	460b      	mov	r3, r1
 8007d18:	d3f7      	bcc.n	8007d0a <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8007d1a:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8007d1e:	1e6b      	subs	r3, r5, #1
 8007d20:	459e      	cmp	lr, r3
    pHandle->_Super.LatestConv = hAux;
 8007d22:	80a0      	strh	r0, [r4, #4]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8007d24:	80e2      	strh	r2, [r4, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8007d26:	da0a      	bge.n	8007d3e <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 8007d28:	f10e 0e01 	add.w	lr, lr, #1
 8007d2c:	f884 e025 	strb.w	lr, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8007d30:	4620      	mov	r0, r4
 8007d32:	f7ff ffc9 	bl	8007cc8 <RVBS_CheckFaultState>
 8007d36:	8120      	strh	r0, [r4, #8]
}
 8007d38:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8007d3a:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 8007d3c:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8007d44:	4620      	mov	r0, r4
 8007d46:	f7ff ffbf 	bl	8007cc8 <RVBS_CheckFaultState>
 8007d4a:	8120      	strh	r0, [r4, #8]
}
 8007d4c:	bd70      	pop	{r4, r5, r6, pc}
 8007d4e:	bf00      	nop

08007d50 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8007d50:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8007d52:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8007d54:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8007d58:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8007d5c:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8007d5e:	4770      	bx	lr

08007d60 <REMNG_Calc>:
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 8007d60:	e9d0 3102 	ldrd	r3, r1, [r0, #8]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8007d64:	2901      	cmp	r1, #1
 8007d66:	d90c      	bls.n	8007d82 <REMNG_Calc+0x22>
{
 8007d68:	b410      	push	{r4}
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;
 8007d6a:	e9d0 4204 	ldrd	r4, r2, [r0, #16]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 8007d6e:	3901      	subs	r1, #1
    current_ref += pHandle->IncDecAmount;
 8007d70:	4423      	add	r3, r4
    pHandle->RampRemainingStep --;
 8007d72:	60c1      	str	r1, [r0, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 8007d74:	6083      	str	r3, [r0, #8]

#ifdef FASTDIV
  ret_val = FD_FastDiv( & ( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8007d76:	fb93 f2f2 	sdiv	r2, r3, r2
#endif

  return ret_val;
}
 8007d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d7e:	4610      	mov	r0, r2
 8007d80:	4770      	bx	lr
  else if ( pHandle->RampRemainingStep == 1u )
 8007d82:	d005      	beq.n	8007d90 <REMNG_Calc+0x30>
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8007d84:	6942      	ldr	r2, [r0, #20]
  pHandle->Ext = current_ref;
 8007d86:	6083      	str	r3, [r0, #8]
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8007d88:	fb93 f2f2 	sdiv	r2, r3, r2
}
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	4770      	bx	lr
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007d90:	6842      	ldr	r2, [r0, #4]
 8007d92:	6943      	ldr	r3, [r0, #20]
    pHandle->RampRemainingStep = 0u;
 8007d94:	2100      	movs	r1, #0
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007d96:	fb02 f303 	mul.w	r3, r2, r3
    pHandle->RampRemainingStep = 0u;
 8007d9a:	60c1      	str	r1, [r0, #12]
  pHandle->Ext = current_ref;
 8007d9c:	6083      	str	r3, [r0, #8]
}
 8007d9e:	4610      	mov	r0, r2
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop

08007da4 <REMNG_RampCompleted>:
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
  bool retVal = false;
  if ( pHandle->RampRemainingStep == 0u )
 8007da4:	68c0      	ldr	r0, [r0, #12]
  {
    retVal = true;
  }
  return retVal;
}
 8007da6:	fab0 f080 	clz	r0, r0
 8007daa:	0940      	lsrs	r0, r0, #5
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop

08007db0 <getScalingFactor>:
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
  {
    aux = -Target;
 8007db0:	2800      	cmp	r0, #0
 8007db2:	bfb8      	it	lt
 8007db4:	4240      	neglt	r0, r0
{
 8007db6:	2301      	movs	r3, #1
  {
    TargetAbs = ( uint32_t )( Target );
  }
  for ( i = 1u; i < 32u; i++ )
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8007db8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007dbc:	e002      	b.n	8007dc4 <getScalingFactor+0x14>
  for ( i = 1u; i < 32u; i++ )
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	d007      	beq.n	8007dd4 <getScalingFactor+0x24>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8007dc4:	fa21 f203 	lsr.w	r2, r1, r3
    if ( TargetAbs >= limit )
 8007dc8:	4290      	cmp	r0, r2
 8007dca:	d3f8      	bcc.n	8007dbe <getScalingFactor+0xe>
    {
      break;
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	2001      	movs	r0, #1
 8007dd0:	4098      	lsls	r0, r3
}
 8007dd2:	4770      	bx	lr
 8007dd4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop

08007ddc <REMNG_ExecRamp>:
{
 8007ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de0:	4604      	mov	r4, r0
 8007de2:	460e      	mov	r6, r1
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8007de4:	6880      	ldr	r0, [r0, #8]
 8007de6:	6963      	ldr	r3, [r4, #20]
  if ( Durationms == 0u )
 8007de8:	4615      	mov	r5, r2
 8007dea:	b962      	cbnz	r2, 8007e06 <REMNG_ExecRamp+0x2a>
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8007dec:	4608      	mov	r0, r1
 8007dee:	f7ff ffdf 	bl	8007db0 <getScalingFactor>
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007df2:	fb00 f606 	mul.w	r6, r0, r6
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8007df6:	6160      	str	r0, [r4, #20]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007df8:	4628      	mov	r0, r5
    pHandle->IncDecAmount = 0;
 8007dfa:	e9c4 5003 	strd	r5, r0, [r4, #12]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007dfe:	60a6      	str	r6, [r4, #8]
}
 8007e00:	2001      	movs	r0, #1
 8007e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8007e06:	fb90 f8f3 	sdiv	r8, r0, r3
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 8007e0a:	eba1 0708 	sub.w	r7, r1, r8
 8007e0e:	4638      	mov	r0, r7
 8007e10:	f7ff ffce 	bl	8007db0 <getScalingFactor>
 8007e14:	4682      	mov	sl, r0
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 8007e16:	4640      	mov	r0, r8
 8007e18:	f7ff ffca 	bl	8007db0 <getScalingFactor>
 8007e1c:	4681      	mov	r9, r0
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8007e1e:	4630      	mov	r0, r6
 8007e20:	f7ff ffc6 	bl	8007db0 <getScalingFactor>
    if ( wScalingFactor <  wScalingFactor2 )
 8007e24:	45ca      	cmp	sl, r9
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8007e26:	4603      	mov	r3, r0
      if ( wScalingFactor < wScalingFactor3 )
 8007e28:	bf2c      	ite	cs
 8007e2a:	4648      	movcs	r0, r9
 8007e2c:	4650      	movcc	r0, sl
      if ( wScalingFactor2 < wScalingFactor3 )
 8007e2e:	4298      	cmp	r0, r3
 8007e30:	bf28      	it	cs
 8007e32:	4618      	movcs	r0, r3
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8007e34:	fb08 f300 	mul.w	r3, r8, r0
 8007e38:	60a3      	str	r3, [r4, #8]
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8007e3a:	6823      	ldr	r3, [r4, #0]
    aux /= 1000u;
 8007e3c:	4a08      	ldr	r2, [pc, #32]	; (8007e60 <REMNG_ExecRamp+0x84>)
    pHandle->ScalingFactor = wScalingFactorMin;
 8007e3e:	6160      	str	r0, [r4, #20]
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8007e40:	fb05 f303 	mul.w	r3, r5, r3
    aux /= 1000u;
 8007e44:	fba2 2303 	umull	r2, r3, r2, r3
 8007e48:	099b      	lsrs	r3, r3, #6
    pHandle->RampRemainingStep++;
 8007e4a:	1c5d      	adds	r5, r3, #1
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 8007e4c:	fb07 f000 	mul.w	r0, r7, r0
    pHandle->TargetFinal = TargetFinal;
 8007e50:	6066      	str	r6, [r4, #4]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 8007e52:	fb90 f0f5 	sdiv	r0, r0, r5
    pHandle->IncDecAmount = 0;
 8007e56:	e9c4 5003 	strd	r5, r0, [r4, #12]
}
 8007e5a:	2001      	movs	r0, #1
 8007e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e60:	10624dd3 	.word	0x10624dd3

08007e64 <RUC_Init>:
__weak void RUC_Init( RevUpCtrl_Handle_t * pHandle,
               SpeednTorqCtrl_Handle_t * pSTC,
               VirtualSpeedSensor_Handle_t * pVSS,
               STO_Handle_t * pSNSL,
               PWMC_Handle_t * pPWM )
{
 8007e64:	b500      	push	{lr}
  RevUpCtrl_PhaseParams_t * pRUCPhaseParams = &pHandle->ParamsData[0];
  uint8_t bPhase = 0u;

  pHandle->pSTC = pSTC;
 8007e66:	6681      	str	r1, [r0, #104]	; 0x68
  pHandle->OTFSCLowside = false;
  pHandle->EnteredZone1 = false;

  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
  {
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8007e68:	6941      	ldr	r1, [r0, #20]
  pHandle->pSNSL = pSNSL;
 8007e6a:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
  pHandle->OTFSCLowside = false;
 8007e6e:	f04f 0c00 	mov.w	ip, #0
  pHandle->pPWM = pPWM;
 8007e72:	9b01      	ldr	r3, [sp, #4]
  pHandle->OTFSCLowside = false;
 8007e74:	f8a0 c054 	strh.w	ip, [r0, #84]	; 0x54
  pHandle->pPWM = pPWM;
 8007e78:	6743      	str	r3, [r0, #116]	; 0x74
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8007e7a:	b309      	cbz	r1, 8007ec0 <RUC_Init+0x5c>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8007e7c:	688b      	ldr	r3, [r1, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8007e7e:	b323      	cbz	r3, 8007eca <RUC_Init+0x66>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8007e80:	689b      	ldr	r3, [r3, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8007e82:	b32b      	cbz	r3, 8007ed0 <RUC_Init+0x6c>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 8007e84:	689b      	ldr	r3, [r3, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8007e86:	b333      	cbz	r3, 8007ed6 <RUC_Init+0x72>
 8007e88:	689b      	ldr	r3, [r3, #8]
    bPhase++;
 8007e8a:	f04f 0c05 	mov.w	ip, #5
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 8007e8e:	b1cb      	cbz	r3, 8007ec4 <RUC_Init+0x60>
 8007e90:	2204      	movs	r2, #4
 8007e92:	f04f 0c05 	mov.w	ip, #5
  }
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

  pHandle->bPhaseNbr = bPhase;

  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8007e96:	8803      	ldrh	r3, [r0, #0]
 8007e98:	4910      	ldr	r1, [pc, #64]	; (8007edc <RUC_Init+0x78>)
 8007e9a:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8007e9e:	fb0e f303 	mul.w	r3, lr, r3
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007ea2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8007ea6:	fba1 1303 	umull	r1, r3, r1, r3
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007eaa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007eae:	2100      	movs	r1, #0
  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8007eb0:	099b      	lsrs	r3, r3, #6
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007eb2:	6151      	str	r1, [r2, #20]
  pHandle->bPhaseNbr = bPhase;
 8007eb4:	f880 c048 	strb.w	ip, [r0, #72]	; 0x48
  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 8007eb8:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56

}
 8007ebc:	f85d fb04 	ldr.w	pc, [sp], #4
    bPhase++;
 8007ec0:	f04f 0c01 	mov.w	ip, #1
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8007ec4:	f10c 32ff 	add.w	r2, ip, #4294967295
 8007ec8:	e7e5      	b.n	8007e96 <RUC_Init+0x32>
    bPhase++;
 8007eca:	f04f 0c02 	mov.w	ip, #2
 8007ece:	e7f9      	b.n	8007ec4 <RUC_Init+0x60>
 8007ed0:	f04f 0c03 	mov.w	ip, #3
 8007ed4:	e7f6      	b.n	8007ec4 <RUC_Init+0x60>
 8007ed6:	f04f 0c04 	mov.w	ip, #4
 8007eda:	e7f3      	b.n	8007ec4 <RUC_Init+0x60>
 8007edc:	10624dd3 	.word	0x10624dd3

08007ee0 <RUC_Clear>:
  * @param  hMotorDirection: rotor rotation direction.
  *         This parameter must be -1 or +1.
  *  @retval none
  */
__weak void RUC_Clear( RevUpCtrl_Handle_t * pHandle, int16_t hMotorDirection )
{
 8007ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  VirtualSpeedSensor_Handle_t * pVSS = pHandle->pVSS;
 8007ee4:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
  SpeednTorqCtrl_Handle_t * pSTC = pHandle->pSTC;
 8007ee6:	f8d0 8068 	ldr.w	r8, [r0, #104]	; 0x68
  RevUpCtrl_PhaseParams_t * pPhaseParams = pHandle->ParamsData;

  pHandle->hDirection = hMotorDirection;
 8007eea:	80c1      	strh	r1, [r0, #6]
  pHandle->EnteredZone1 = false;

  /*Initializes the rev up stages counter.*/
  pHandle->bStageCnt = 0u;
 8007eec:	2600      	movs	r6, #0
{
 8007eee:	4604      	mov	r4, r0
  pHandle->bStageCnt = 0u;
 8007ef0:	f880 6058 	strb.w	r6, [r0, #88]	; 0x58
  pHandle->bOTFRelCounter = 0u;
 8007ef4:	f880 6053 	strb.w	r6, [r0, #83]	; 0x53
  pHandle->OTFSCLowside = false;
 8007ef8:	f8a0 6054 	strh.w	r6, [r0, #84]	; 0x54

  /* Calls the clear method of VSS.*/
  VSS_Clear( pVSS );
 8007efc:	4638      	mov	r0, r7

  /* Sets the STC in torque mode.*/
  STC_SetControlMode( pSTC, STC_TORQUE_MODE );

  /* Sets the mechanical starting angle of VSS.*/
  VSS_SetMecAngle( pVSS, pHandle->hStartingMecAngle * hMotorDirection );
 8007efe:	b28d      	uxth	r5, r1
  VSS_Clear( pVSS );
 8007f00:	f000 fe6a 	bl	8008bd8 <VSS_Clear>
  STC_SetControlMode( pSTC, STC_TORQUE_MODE );
 8007f04:	4631      	mov	r1, r6
 8007f06:	4640      	mov	r0, r8
 8007f08:	f000 f910 	bl	800812c <STC_SetControlMode>
  VSS_SetMecAngle( pVSS, pHandle->hStartingMecAngle * hMotorDirection );
 8007f0c:	8861      	ldrh	r1, [r4, #2]
 8007f0e:	fb11 f105 	smulbb	r1, r1, r5
 8007f12:	b209      	sxth	r1, r1
 8007f14:	4638      	mov	r0, r7
 8007f16:	f000 ff0d 	bl	8008d34 <VSS_SetMecAngle>

  /* Sets to zero the starting torque of STC */
  STC_ExecRamp( pSTC, 0, 0u );
 8007f1a:	4632      	mov	r2, r6
 8007f1c:	4631      	mov	r1, r6
 8007f1e:	4640      	mov	r0, r8
 8007f20:	f000 f908 	bl	8008134 <STC_ExecRamp>

  /* Gives the first command to STC and VSS.*/
  STC_ExecRamp( pSTC, pPhaseParams->hFinalTorque * hMotorDirection,
 8007f24:	8a21      	ldrh	r1, [r4, #16]
 8007f26:	89a2      	ldrh	r2, [r4, #12]
 8007f28:	fb11 f105 	smulbb	r1, r1, r5
 8007f2c:	b209      	sxth	r1, r1
 8007f2e:	4640      	mov	r0, r8
 8007f30:	f000 f900 	bl	8008134 <STC_ExecRamp>
                ( uint32_t )( pPhaseParams->hDurationms ) );

  VSS_SetMecAcceleration( pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection,
 8007f34:	89e1      	ldrh	r1, [r4, #14]
 8007f36:	89a2      	ldrh	r2, [r4, #12]
 8007f38:	fb11 f105 	smulbb	r1, r1, r5
 8007f3c:	b209      	sxth	r1, r1
 8007f3e:	4638      	mov	r0, r7
 8007f40:	f000 ff00 	bl	8008d44 <VSS_SetMecAcceleration>
                          pPhaseParams->hDurationms );

  /* Compute hPhaseRemainingTicks.*/
  pHandle->hPhaseRemainingTicks =
    ( uint16_t )( ( ( uint32_t )pPhaseParams->hDurationms *
 8007f44:	89a3      	ldrh	r3, [r4, #12]
                    ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007f46:	8821      	ldrh	r1, [r4, #0]
 8007f48:	4a06      	ldr	r2, [pc, #24]	; (8007f64 <RUC_Clear+0x84>)

  /*Set the next phases parameter pointer.*/
  pHandle->pCurrentPhaseParams = pPhaseParams->pNext;

  /*Timeout counter for PLL reset during OTF.*/
  pHandle->bResetPLLCnt = 0u;
 8007f4a:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
    ( uint16_t )( ( ( uint32_t )pPhaseParams->hDurationms *
 8007f4e:	fb01 f303 	mul.w	r3, r1, r3
                    ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007f52:	fba2 2303 	umull	r2, r3, r2, r3
 8007f56:	099b      	lsrs	r3, r3, #6
  pHandle->pCurrentPhaseParams = pPhaseParams->pNext;
 8007f58:	6962      	ldr	r2, [r4, #20]
 8007f5a:	60a2      	str	r2, [r4, #8]
  pHandle->hPhaseRemainingTicks++;
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	80a3      	strh	r3, [r4, #4]
}
 8007f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f64:	10624dd3 	.word	0x10624dd3

08007f68 <RUC_Exec>:
  */
__weak bool RUC_Exec( RevUpCtrl_Handle_t * pHandle )
{
  bool retVal = true;

  if ( pHandle->hPhaseRemainingTicks > 0u )
 8007f68:	8883      	ldrh	r3, [r0, #4]
{
 8007f6a:	b510      	push	{r4, lr}
 8007f6c:	4604      	mov	r4, r0
  if ( pHandle->hPhaseRemainingTicks > 0u )
 8007f6e:	bb43      	cbnz	r3, 8007fc2 <RUC_Exec+0x5a>

  } /* hPhaseRemainingTicks > 0 */

  if ( pHandle->hPhaseRemainingTicks == 0u )
  {
    if ( pHandle->pCurrentPhaseParams != MC_NULL )
 8007f70:	68a0      	ldr	r0, [r4, #8]
 8007f72:	b328      	cbz	r0, 8007fc0 <RUC_Exec+0x58>
    {

      /* If it becomes zero the current phase has been completed.*/
      /* Gives the next command to STC and VSS.*/
      STC_ExecRamp( pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8007f74:	8881      	ldrh	r1, [r0, #4]
 8007f76:	88e3      	ldrh	r3, [r4, #6]
 8007f78:	8802      	ldrh	r2, [r0, #0]
 8007f7a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007f7c:	fb11 f103 	smulbb	r1, r1, r3
 8007f80:	b209      	sxth	r1, r1
 8007f82:	f000 f8d7 	bl	8008134 <STC_ExecRamp>
                    ( uint32_t )( pHandle->pCurrentPhaseParams->hDurationms ) );

      VSS_SetMecAcceleration( pHandle->pVSS,
                              pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8007f86:	68a3      	ldr	r3, [r4, #8]
 8007f88:	88e0      	ldrh	r0, [r4, #6]
 8007f8a:	8859      	ldrh	r1, [r3, #2]
      VSS_SetMecAcceleration( pHandle->pVSS,
 8007f8c:	881a      	ldrh	r2, [r3, #0]
                              pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8007f8e:	fb11 f100 	smulbb	r1, r1, r0
      VSS_SetMecAcceleration( pHandle->pVSS,
 8007f92:	b209      	sxth	r1, r1
 8007f94:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007f96:	f000 fed5 	bl	8008d44 <VSS_SetMecAcceleration>
                              pHandle->pCurrentPhaseParams->hDurationms );

      /* Compute hPhaseRemainingTicks.*/
      pHandle->hPhaseRemainingTicks =
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 8007f9a:	68a1      	ldr	r1, [r4, #8]
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007f9c:	8820      	ldrh	r0, [r4, #0]
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 8007f9e:	880b      	ldrh	r3, [r1, #0]
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007fa0:	4a0b      	ldr	r2, [pc, #44]	; (8007fd0 <RUC_Exec+0x68>)
      pHandle->hPhaseRemainingTicks++;

      /*Set the next phases parameter pointer.*/
      pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext;
 8007fa2:	6889      	ldr	r1, [r1, #8]
 8007fa4:	60a1      	str	r1, [r4, #8]
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 8007fa6:	fb00 f303 	mul.w	r3, r0, r3
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007faa:	fba2 2303 	umull	r2, r3, r2, r3

      /*Increases the rev up stages counter.*/
      pHandle->bStageCnt++;
 8007fae:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8007fb2:	099b      	lsrs	r3, r3, #6
      pHandle->hPhaseRemainingTicks++;
 8007fb4:	3301      	adds	r3, #1
      pHandle->bStageCnt++;
 8007fb6:	3201      	adds	r2, #1
      pHandle->hPhaseRemainingTicks++;
 8007fb8:	80a3      	strh	r3, [r4, #4]
      pHandle->bStageCnt++;
 8007fba:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
  bool retVal = true;
 8007fbe:	2001      	movs	r0, #1
    {
      retVal = false;
    }
  }
  return retVal;
}
 8007fc0:	bd10      	pop	{r4, pc}
    pHandle->hPhaseRemainingTicks--;
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	8083      	strh	r3, [r0, #4]
  if ( pHandle->hPhaseRemainingTicks == 0u )
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d0d1      	beq.n	8007f70 <RUC_Exec+0x8>
  bool retVal = true;
 8007fcc:	2001      	movs	r0, #1
}
 8007fce:	bd10      	pop	{r4, pc}
 8007fd0:	10624dd3 	.word	0x10624dd3

08007fd4 <RUC_FirstAccelerationStageReached>:
  */
__weak bool RUC_FirstAccelerationStageReached( RevUpCtrl_Handle_t * pHandle )
{
  bool retVal = false;

  if ( pHandle->bStageCnt >= pHandle->bFirstAccelerationStage )
 8007fd4:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8007fd8:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
  {
    retVal = true;
  }
  return retVal;
}
 8007fdc:	4282      	cmp	r2, r0
 8007fde:	bf34      	ite	cc
 8007fe0:	2000      	movcc	r0, #0
 8007fe2:	2001      	movcs	r0, #1
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop

08007fe8 <RUC_SetPhaseDurationms>:
  *         This parameter must be set in millisecond.
  *  @retval none
  */
__weak void RUC_SetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, uint16_t hDurationms )
{
  pHandle->ParamsData[bPhase].hDurationms = hDurationms;
 8007fe8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007fec:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8007ff0:	8182      	strh	r2, [r0, #12]
}
 8007ff2:	4770      	bx	lr

08007ff4 <RUC_SetPhaseFinalMecSpeedUnit>:
  *  @retval none
  */
__weak void RUC_SetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase,
                                    int16_t hFinalMecSpeedUnit )
{
  pHandle->ParamsData[bPhase].hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007ff4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007ff8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8007ffc:	81c2      	strh	r2, [r0, #14]
}
 8007ffe:	4770      	bx	lr

08008000 <RUC_SetPhaseFinalTorque>:
  * @param  hFinalTorque: new targetted motor torque.
  *  @retval none
  */
__weak void RUC_SetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, int16_t hFinalTorque )
{
  pHandle->ParamsData[bPhase].hFinalTorque = hFinalTorque;
 8008000:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008004:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008008:	8202      	strh	r2, [r0, #16]
}
 800800a:	4770      	bx	lr

0800800c <RUC_GetPhaseDurationms>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns duration used in selected phase.
  */
__weak uint16_t RUC_GetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( uint16_t )pHandle->ParamsData[bPhase].hDurationms );
 800800c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008010:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8008014:	8980      	ldrh	r0, [r0, #12]
 8008016:	4770      	bx	lr

08008018 <RUC_GetPhaseFinalMecSpeedUnit>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted rotor speed set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalMecSpeedUnit );
 8008018:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800801c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8008020:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop

08008028 <RUC_GetPhaseFinalTorque>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted motor torque set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalTorque );
 8008028:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800802c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8008030:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop

08008038 <RUC_GetNumberOfPhases>:
  *  @retval Returns number of phases relative to the programmed revup.
  */
__weak uint8_t RUC_GetNumberOfPhases( RevUpCtrl_Handle_t * pHandle )
{
  return ( ( uint8_t )pHandle->bPhaseNbr );
}
 8008038:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop

08008040 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8008040:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop

08008048 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8008048:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop

08008050 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8008050:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop

08008058 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8008058:	f9b1 3000 	ldrsh.w	r3, [r1]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800805c:	f8b0 c016 	ldrh.w	ip, [r0, #22]
{
 8008060:	b410      	push	{r4}
  if ( *pMecSpeedUnit < 0 )
 8008062:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 8008064:	bfb8      	it	lt
 8008066:	425b      	neglt	r3, r3
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8008068:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800806a:	459c      	cmp	ip, r3
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800806c:	78c1      	ldrb	r1, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800806e:	7802      	ldrb	r2, [r0, #0]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8008070:	8a84      	ldrh	r4, [r0, #20]
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8008072:	d819      	bhi.n	80080a8 <SPD_IsMecSpeedReliable+0x50>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8008074:	429c      	cmp	r4, r3
 8008076:	bf2c      	ite	cs
 8008078:	2400      	movcs	r4, #0
 800807a:	2401      	movcc	r4, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 800807c:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8008080:	f8b0 c018 	ldrh.w	ip, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8008084:	2b00      	cmp	r3, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8008086:	bfb8      	it	lt
 8008088:	425b      	neglt	r3, r3
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 800808a:	b29b      	uxth	r3, r3
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800808c:	459c      	cmp	ip, r3
 800808e:	d300      	bcc.n	8008092 <SPD_IsMecSpeedReliable+0x3a>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8008090:	b164      	cbz	r4, 80080ac <SPD_IsMecSpeedReliable+0x54>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8008092:	4291      	cmp	r1, r2
 8008094:	d901      	bls.n	800809a <SPD_IsMecSpeedReliable+0x42>
    {
      bSpeedErrorNumber++;
 8008096:	3201      	adds	r2, #1
 8008098:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800809a:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 800809c:	1a50      	subs	r0, r2, r1
 800809e:	bf18      	it	ne
 80080a0:	2001      	movne	r0, #1
 80080a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080a6:	4770      	bx	lr
    SpeedError = true;
 80080a8:	2401      	movs	r4, #1
 80080aa:	e7e7      	b.n	800807c <SPD_IsMecSpeedReliable+0x24>
      bSpeedErrorNumber = 0u;
 80080ac:	4291      	cmp	r1, r2
 80080ae:	bf88      	it	hi
 80080b0:	2200      	movhi	r2, #0
 80080b2:	e7f2      	b.n	800809a <SPD_IsMecSpeedReliable+0x42>

080080b4 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 80080b4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80080b8:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
  wAux *= INT16_MAX;
 80080bc:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80080c0:	fb93 f0f2 	sdiv	r0, r3, r2
  return ( int16_t )wAux;
}
 80080c4:	b200      	sxth	r0, r0
 80080c6:	4770      	bx	lr

080080c8 <STC_Init>:
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80080c8:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
  pHandle->PISpeed = pPI;
 80080cc:	6101      	str	r1, [r0, #16]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80080ce:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
  pHandle->SPD = SPD_Handle;
 80080d2:	6142      	str	r2, [r0, #20]
{
 80080d4:	b410      	push	{r4}
  pHandle->Mode = pHandle->ModeDefault;
 80080d6:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 80080da:	7004      	strb	r4, [r0, #0]
  pHandle->TargetFinal = 0;
 80080dc:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80080de:	ea4f 440c 	mov.w	r4, ip, lsl #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80080e2:	0409      	lsls	r1, r1, #16
 80080e4:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->TargetFinal = 0;
 80080e8:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 80080ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->RampRemainingStep = 0u;
 80080ee:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80080f0:	6183      	str	r3, [r0, #24]
}
 80080f2:	4770      	bx	lr

080080f4 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 80080f4:	6141      	str	r1, [r0, #20]
}
 80080f6:	4770      	bx	lr

080080f8 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 80080f8:	6940      	ldr	r0, [r0, #20]
 80080fa:	4770      	bx	lr

080080fc <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 80080fc:	7803      	ldrb	r3, [r0, #0]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d000      	beq.n	8008104 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8008102:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8008104:	6900      	ldr	r0, [r0, #16]
 8008106:	2100      	movs	r1, #0
 8008108:	f7fe bc74 	b.w	80069f4 <PID_SetIntegralTerm>

0800810c <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 800810c:	6840      	ldr	r0, [r0, #4]
 800810e:	2800      	cmp	r0, #0
 8008110:	bfbc      	itt	lt
 8008112:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8008116:	30ff      	addlt	r0, #255	; 0xff
}
 8008118:	1400      	asrs	r0, r0, #16
 800811a:	4770      	bx	lr

0800811c <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800811c:	6880      	ldr	r0, [r0, #8]
 800811e:	2800      	cmp	r0, #0
 8008120:	bfbc      	itt	lt
 8008122:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8008126:	30ff      	addlt	r0, #255	; 0xff
}
 8008128:	1400      	asrs	r0, r0, #16
 800812a:	4770      	bx	lr

0800812c <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800812c:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 800812e:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008130:	60c3      	str	r3, [r0, #12]
}
 8008132:	4770      	bx	lr

08008134 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8008134:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8008136:	7803      	ldrb	r3, [r0, #0]
{
 8008138:	4604      	mov	r4, r0
 800813a:	460d      	mov	r5, r1
 800813c:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800813e:	b323      	cbz	r3, 800818a <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008140:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008142:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008144:	2800      	cmp	r0, #0
 8008146:	bfbc      	itt	lt
 8008148:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800814c:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800814e:	4299      	cmp	r1, r3
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008150:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008154:	dd01      	ble.n	800815a <STC_ExecRamp+0x26>
      AllowedRange = false;
 8008156:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8008158:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800815a:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800815e:	428b      	cmp	r3, r1
 8008160:	dcf9      	bgt.n	8008156 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8008162:	8c23      	ldrh	r3, [r4, #32]
 8008164:	4299      	cmp	r1, r3
 8008166:	da03      	bge.n	8008170 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8008168:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 800816c:	428b      	cmp	r3, r1
 800816e:	dbf2      	blt.n	8008156 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8008170:	b9ae      	cbnz	r6, 800819e <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8008172:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8008174:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8008176:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8008178:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800817c:	bf0c      	ite	eq
 800817e:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8008180:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8008182:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8008184:	61a3      	str	r3, [r4, #24]
 8008186:	2001      	movs	r0, #1
}
 8008188:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800818a:	f7ff ffc7 	bl	800811c <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800818e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008190:	429d      	cmp	r5, r3
 8008192:	dce0      	bgt.n	8008156 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8008194:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8008198:	42ab      	cmp	r3, r5
 800819a:	dcdc      	bgt.n	8008156 <STC_ExecRamp+0x22>
 800819c:	e7e8      	b.n	8008170 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800819e:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 80081a0:	4a07      	ldr	r2, [pc, #28]	; (80081c0 <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 80081a2:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80081a4:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 80081a8:	fba2 2303 	umull	r2, r3, r2, r3
 80081ac:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 80081ae:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 80081b0:	1a28      	subs	r0, r5, r0
 80081b2:	0400      	lsls	r0, r0, #16
      pHandle->RampRemainingStep++;
 80081b4:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 80081b6:	fb90 f0f3 	sdiv	r0, r0, r3
      pHandle->IncDecAmount = wAux1;
 80081ba:	61a0      	str	r0, [r4, #24]
 80081bc:	2001      	movs	r0, #1
}
 80081be:	bd70      	pop	{r4, r5, r6, pc}
 80081c0:	10624dd3 	.word	0x10624dd3

080081c4 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 80081c4:	2300      	movs	r3, #0
 80081c6:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80081c8:	6183      	str	r3, [r0, #24]
}
 80081ca:	4770      	bx	lr

080081cc <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 80081cc:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 80081ce:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80081d2:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 80081d4:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 80081d6:	2a00      	cmp	r2, #0
 80081d8:	bf08      	it	eq
 80081da:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 80081dc:	2b01      	cmp	r3, #1
{
 80081de:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 80081e0:	d90c      	bls.n	80081fc <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 80081e2:	6981      	ldr	r1, [r0, #24]
 80081e4:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 80081e6:	3b01      	subs	r3, #1
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 80081e8:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 80081ea:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 80081ec:	4630      	mov	r0, r6
 80081ee:	db09      	blt.n	8008204 <STC_CalcTorqueReference+0x38>
 80081f0:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 80081f2:	2a01      	cmp	r2, #1
 80081f4:	d00a      	beq.n	800820c <STC_CalcTorqueReference+0x40>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 80081f6:	b228      	sxth	r0, r5
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 80081f8:	60a6      	str	r6, [r4, #8]
  }

  return hTorqueReference;
}
 80081fa:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 80081fc:	d012      	beq.n	8008224 <STC_CalcTorqueReference+0x58>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 80081fe:	2e00      	cmp	r6, #0
 8008200:	4630      	mov	r0, r6
 8008202:	daf5      	bge.n	80081f0 <STC_CalcTorqueReference+0x24>
 8008204:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 8008208:	30ff      	adds	r0, #255	; 0xff
 800820a:	e7f1      	b.n	80081f0 <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 800820c:	6960      	ldr	r0, [r4, #20]
 800820e:	f7ff ff1b 	bl	8008048 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8008212:	1a29      	subs	r1, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8008214:	b209      	sxth	r1, r1
 8008216:	6920      	ldr	r0, [r4, #16]
 8008218:	f7fe fbf8 	bl	8006a0c <PI_Controller>
    pHandle->SpeedRefUnitExt = wCurrentReference;
 800821c:	6066      	str	r6, [r4, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800821e:	0406      	lsls	r6, r0, #16
 8008220:	60a6      	str	r6, [r4, #8]
}
 8008222:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8008224:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8008228:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800822a:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 800822c:	60c3      	str	r3, [r0, #12]
 800822e:	e7e0      	b.n	80081f2 <STC_CalcTorqueReference+0x26>

08008230 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8008230:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop

08008238 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8008238:	8bc0      	ldrh	r0, [r0, #30]
 800823a:	4770      	bx	lr

0800823c <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 800823c:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop

08008244 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8008244:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8008248:	2200      	movs	r2, #0
 800824a:	b299      	uxth	r1, r3
 800824c:	f361 020f 	bfi	r2, r1, #0, #16
 8008250:	0c1b      	lsrs	r3, r3, #16
 8008252:	f363 421f 	bfi	r2, r3, #16, #16
{
 8008256:	b082      	sub	sp, #8
}
 8008258:	4610      	mov	r0, r2
 800825a:	b002      	add	sp, #8
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop

08008260 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8008260:	b510      	push	{r4, lr}
 8008262:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8008264:	6940      	ldr	r0, [r0, #20]
 8008266:	f7ff feef 	bl	8008048 <SPD_GetAvrgMecSpeedUnit>
 800826a:	0400      	lsls	r0, r0, #16
 800826c:	6060      	str	r0, [r4, #4]
}
 800826e:	bd10      	pop	{r4, pc}

08008270 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8008270:	2300      	movs	r3, #0
 8008272:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8008274:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop

0800827c <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 800827c:	b500      	push	{lr}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800827e:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8008280:	f8b0 e004 	ldrh.w	lr, [r0, #4]
{
 8008284:	4684      	mov	ip, r0
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8008286:	430b      	orrs	r3, r1
  State_t LocalState =  pHandle->bState;
 8008288:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800828a:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 800828e:	ea41 010e 	orr.w	r1, r1, lr
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8008292:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 8008294:	280a      	cmp	r0, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8008296:	f8ac 2002 	strh.w	r2, [ip, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800829a:	f8ac 1004 	strh.w	r1, [ip, #4]
  if ( LocalState == FAULT_NOW )
 800829e:	d007      	beq.n	80082b0 <STM_FaultProcessing+0x34>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 80082a0:	b90a      	cbnz	r2, 80082a6 <STM_FaultProcessing+0x2a>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 80082a2:	f85d fb04 	ldr.w	pc, [sp], #4
      pHandle->bState = FAULT_NOW;
 80082a6:	200a      	movs	r0, #10
 80082a8:	f88c 0000 	strb.w	r0, [ip]
}
 80082ac:	f85d fb04 	ldr.w	pc, [sp], #4
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 80082b0:	2a00      	cmp	r2, #0
 80082b2:	d1f6      	bne.n	80082a2 <STM_FaultProcessing+0x26>
      pHandle->bState = FAULT_OVER;
 80082b4:	200b      	movs	r0, #11
 80082b6:	f88c 0000 	strb.w	r0, [ip]
}
 80082ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80082be:	bf00      	nop

080082c0 <STM_NextState>:
{
 80082c0:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 80082c2:	7803      	ldrb	r3, [r0, #0]
 80082c4:	2b14      	cmp	r3, #20
 80082c6:	d810      	bhi.n	80082ea <STM_NextState+0x2a>
 80082c8:	e8df f003 	tbb	[pc, r3]
 80082cc:	220d2e64 	.word	0x220d2e64
 80082d0:	4a0d4d51 	.word	0x4a0d4d51
 80082d4:	0f0f4247 	.word	0x0f0f4247
 80082d8:	3f5f0b17 	.word	0x3f5f0b17
 80082dc:	3539583c 	.word	0x3539583c
 80082e0:	2b          	.byte	0x2b
 80082e1:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 80082e2:	290e      	cmp	r1, #14
 80082e4:	d00b      	beq.n	80082fe <STM_NextState+0x3e>
      if ( bState == ANY_STOP )
 80082e6:	2907      	cmp	r1, #7
 80082e8:	d009      	beq.n	80082fe <STM_NextState+0x3e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80082ea:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d001      	beq.n	80082f6 <STM_NextState+0x36>
 80082f2:	2907      	cmp	r1, #7
 80082f4:	d106      	bne.n	8008304 <STM_NextState+0x44>
 80082f6:	2000      	movs	r0, #0
}
 80082f8:	bd08      	pop	{r3, pc}
      if ( bState == IDLE )
 80082fa:	2900      	cmp	r1, #0
 80082fc:	d1f5      	bne.n	80082ea <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 80082fe:	7001      	strb	r1, [r0, #0]
 8008300:	2001      	movs	r0, #1
}
 8008302:	bd08      	pop	{r3, pc}
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8008304:	2200      	movs	r2, #0
 8008306:	2180      	movs	r1, #128	; 0x80
 8008308:	f7ff ffb8 	bl	800827c <STM_FaultProcessing>
 800830c:	2000      	movs	r0, #0
}
 800830e:	bd08      	pop	{r3, pc}
      if ( ( bState == ANY_STOP ) || ( bState == CHARGE_BOOT_CAP ) ||
 8008310:	2907      	cmp	r1, #7
 8008312:	d0f4      	beq.n	80082fe <STM_NextState+0x3e>
 8008314:	2911      	cmp	r1, #17
 8008316:	d8e8      	bhi.n	80082ea <STM_NextState+0x2a>
 8008318:	4b22      	ldr	r3, [pc, #136]	; (80083a4 <STM_NextState+0xe4>)
 800831a:	40cb      	lsrs	r3, r1
 800831c:	07da      	lsls	r2, r3, #31
 800831e:	d4ee      	bmi.n	80082fe <STM_NextState+0x3e>
 8008320:	e7e3      	b.n	80082ea <STM_NextState+0x2a>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8008322:	2912      	cmp	r1, #18
 8008324:	d1df      	bne.n	80082e6 <STM_NextState+0x26>
 8008326:	e7ea      	b.n	80082fe <STM_NextState+0x3e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8008328:	2907      	cmp	r1, #7
 800832a:	d0e8      	beq.n	80082fe <STM_NextState+0x3e>
 800832c:	f1a1 030d 	sub.w	r3, r1, #13
 8008330:	2b01      	cmp	r3, #1
 8008332:	d8da      	bhi.n	80082ea <STM_NextState+0x2a>
 8008334:	e7e3      	b.n	80082fe <STM_NextState+0x3e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8008336:	1f0b      	subs	r3, r1, #4
 8008338:	2b01      	cmp	r3, #1
 800833a:	d8d4      	bhi.n	80082e6 <STM_NextState+0x26>
 800833c:	e7df      	b.n	80082fe <STM_NextState+0x3e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800833e:	2904      	cmp	r1, #4
 8008340:	d1d1      	bne.n	80082e6 <STM_NextState+0x26>
 8008342:	e7dc      	b.n	80082fe <STM_NextState+0x3e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8008344:	2911      	cmp	r1, #17
 8008346:	d1ce      	bne.n	80082e6 <STM_NextState+0x26>
 8008348:	e7d9      	b.n	80082fe <STM_NextState+0x3e>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800834a:	2902      	cmp	r1, #2
 800834c:	d1cb      	bne.n	80082e6 <STM_NextState+0x26>
 800834e:	e7d6      	b.n	80082fe <STM_NextState+0x3e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8008350:	2900      	cmp	r1, #0
 8008352:	d0d4      	beq.n	80082fe <STM_NextState+0x3e>
 8008354:	290c      	cmp	r1, #12
 8008356:	d1c8      	bne.n	80082ea <STM_NextState+0x2a>
 8008358:	e7d1      	b.n	80082fe <STM_NextState+0x3e>
      if ( bState == STOP_IDLE )
 800835a:	2909      	cmp	r1, #9
 800835c:	d1c5      	bne.n	80082ea <STM_NextState+0x2a>
 800835e:	e7ce      	b.n	80082fe <STM_NextState+0x3e>
      if ( bState == STOP )
 8008360:	2908      	cmp	r1, #8
 8008362:	d1c2      	bne.n	80082ea <STM_NextState+0x2a>
 8008364:	e7cb      	b.n	80082fe <STM_NextState+0x3e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8008366:	1f8b      	subs	r3, r1, #6
 8008368:	2b01      	cmp	r3, #1
 800836a:	d8be      	bhi.n	80082ea <STM_NextState+0x2a>
 800836c:	e7c7      	b.n	80082fe <STM_NextState+0x3e>
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800836e:	2913      	cmp	r1, #19
 8008370:	d0c5      	beq.n	80082fe <STM_NextState+0x3e>
 8008372:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8008376:	2b05      	cmp	r3, #5
 8008378:	d1b9      	bne.n	80082ee <STM_NextState+0x2e>
 800837a:	e7c0      	b.n	80082fe <STM_NextState+0x3e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 800837c:	2914      	cmp	r1, #20
 800837e:	d8b4      	bhi.n	80082ea <STM_NextState+0x2a>
 8008380:	4b09      	ldr	r3, [pc, #36]	; (80083a8 <STM_NextState+0xe8>)
 8008382:	410b      	asrs	r3, r1
 8008384:	07db      	lsls	r3, r3, #31
 8008386:	d5ba      	bpl.n	80082fe <STM_NextState+0x3e>
 8008388:	e7af      	b.n	80082ea <STM_NextState+0x2a>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 800838a:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 800838e:	2b07      	cmp	r3, #7
 8008390:	d1ab      	bne.n	80082ea <STM_NextState+0x2a>
 8008392:	e7b4      	b.n	80082fe <STM_NextState+0x3e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8008394:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8008398:	2b01      	cmp	r3, #1
 800839a:	d0b0      	beq.n	80082fe <STM_NextState+0x3e>
           || ( bState == ICLWAIT ) )
 800839c:	290c      	cmp	r1, #12
 800839e:	d1a8      	bne.n	80082f2 <STM_NextState+0x32>
 80083a0:	e7ad      	b.n	80082fe <STM_NextState+0x3e>
 80083a2:	bf00      	nop
 80083a4:	00030012 	.word	0x00030012
 80083a8:	ffebff7f 	.word	0xffebff7f

080083ac <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 80083ac:	7800      	ldrb	r0, [r0, #0]
 80083ae:	4770      	bx	lr

080083b0 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 80083b0:	7803      	ldrb	r3, [r0, #0]
 80083b2:	2b0b      	cmp	r3, #11
 80083b4:	d001      	beq.n	80083ba <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 80083b6:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 80083b8:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 80083ba:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80083bc:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 80083be:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80083c0:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 80083c2:	2001      	movs	r0, #1
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop

080083c8 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 80083c8:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 80083ca:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 80083cc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop

080083d4 <STO_PLL_CalcElAngle>:
  * @param  pHandle: handler of the current instance of the STO component
  * @param  pInputVars_str pointer to the observer inputs structure
  * @retval int16_t rotor electrical angle (s16Degrees)
  */
__weak int16_t STO_PLL_CalcElAngle( STO_PLL_Handle_t * pHandle, Observer_Inputs_t * pInputs )
{
 80083d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t wBemf_alfa_est_Next, wBemf_beta_est_Next;
  int16_t hAux, hAux_Alfa, hAux_Beta, hIalfa_err, hIbeta_err, hRotor_Speed,
          hValfa, hVbeta;


  if ( pHandle->wBemf_alfa_est > ( int32_t )( pHandle->hF2 )*INT16_MAX )
 80083d8:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 80083dc:	6e87      	ldr	r7, [r0, #104]	; 0x68
 80083de:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 80083e2:	429f      	cmp	r7, r3
{
 80083e4:	b087      	sub	sp, #28
 80083e6:	4604      	mov	r4, r0
  if ( pHandle->wBemf_alfa_est > ( int32_t )( pHandle->hF2 )*INT16_MAX )
 80083e8:	f340 80c9 	ble.w	800857e <STO_PLL_CalcElAngle+0x1aa>
  {
    pHandle->wBemf_alfa_est = INT16_MAX * ( int32_t )( pHandle->hF2 );
 80083ec:	6683      	str	r3, [r0, #104]	; 0x68
 80083ee:	461f      	mov	r7, r3
  {
  }
#ifdef FULL_MISRA_C_COMPLIANCY
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est / pHandle->hF2 );
#else
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est >> pHandle->F2LOG );
 80083f0:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
#endif

  if ( pHandle->wBemf_beta_est > INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 80083f4:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est >> pHandle->F2LOG );
 80083f6:	fa47 f205 	asr.w	r2, r7, r5
  if ( pHandle->wBemf_beta_est > INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 80083fa:	42b3      	cmp	r3, r6
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est >> pHandle->F2LOG );
 80083fc:	9200      	str	r2, [sp, #0]
 80083fe:	fa0f fc82 	sxth.w	ip, r2
  if ( pHandle->wBemf_beta_est > INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 8008402:	f2c0 80b9 	blt.w	8008578 <STO_PLL_CalcElAngle+0x1a4>
  {
    pHandle->wBemf_beta_est = INT16_MAX * ( int32_t )( pHandle->hF2 );
  }
  else if ( pHandle->wBemf_beta_est <= -INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 8008406:	425b      	negs	r3, r3
 8008408:	429e      	cmp	r6, r3
 800840a:	f340 80b5 	ble.w	8008578 <STO_PLL_CalcElAngle+0x1a4>
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est / pHandle->hF2 );
#else
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est >> pHandle->F2LOG );
#endif

  if ( pHandle->Ialfa_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 800840e:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8008412:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
 8008416:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est >> pHandle->F2LOG );
 800841a:	fa46 f205 	asr.w	r2, r6, r5
  if ( pHandle->Ialfa_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 800841e:	4599      	cmp	r9, r3
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est >> pHandle->F2LOG );
 8008420:	9201      	str	r2, [sp, #4]
 8008422:	b210      	sxth	r0, r2
  if ( pHandle->Ialfa_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 8008424:	f340 80b1 	ble.w	800858a <STO_PLL_CalcElAngle+0x1b6>
  {
    pHandle->Ialfa_est = INT16_MAX * ( int32_t )( pHandle->hF1 );
 8008428:	6623      	str	r3, [r4, #96]	; 0x60
 800842a:	4699      	mov	r9, r3
  }
  else
  {
  }

  if ( pHandle->Ibeta_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 800842c:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
 8008430:	4543      	cmp	r3, r8
 8008432:	f2c0 809e 	blt.w	8008572 <STO_PLL_CalcElAngle+0x19e>
  {
    pHandle->Ibeta_est = INT16_MAX * ( int32_t )( pHandle->hF1 );
  }
  else if ( pHandle->Ibeta_est <= -INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 8008436:	425b      	negs	r3, r3
 8008438:	4598      	cmp	r8, r3
 800843a:	f340 809a 	ble.w	8008572 <STO_PLL_CalcElAngle+0x19e>
  hIbeta_err = ( int16_t )( pHandle->Ibeta_est / pHandle->hF1 );
#else
  hIbeta_err = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
#endif

  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800843e:	88cb      	ldrh	r3, [r1, #6]

  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.alpha;
 8008440:	f8b1 a008 	ldrh.w	sl, [r1, #8]
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8008444:	f8ad 300c 	strh.w	r3, [sp, #12]
  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.alpha;
 8008448:	f9b1 3000 	ldrsh.w	r3, [r1]
  hIalfa_err = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 800844c:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8008450:	888d      	ldrh	r5, [r1, #4]
  hValfa = ( int16_t ) ( wAux / 65536 );
#else
  hValfa = ( int16_t ) ( wAux >> 16 );
#endif

  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.beta;
 8008452:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
  hAux = ( int16_t ) ( pHandle->Ialfa_est / pHandle->hF1 );
#else
  hAux = ( int16_t ) ( pHandle->Ialfa_est >> pHandle->F1LOG );
#endif

  wAux = ( int32_t ) ( pHandle->hC1 ) * hAux;
 8008456:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
  wAux = wAux * pHandle->hC6;
  wAux = pHandle->_Super.hElSpeedDpp * wAux;
  wBemf_beta_est_Next -= wAux;

  /*Calls the PLL blockset*/
  pHandle->hBemf_alfa_est = hAux_Alfa;
 800845a:	f8a4 c070 	strh.w	ip, [r4, #112]	; 0x70
  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.alpha;
 800845e:	fb0a f303 	mul.w	r3, sl, r3
  hValfa = ( int16_t ) ( wAux >> 16 );
 8008462:	141b      	asrs	r3, r3, #16
 8008464:	9302      	str	r3, [sp, #8]
  hIalfa_err = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 8008466:	fa49 f302 	asr.w	r3, r9, r2
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800846a:	1b59      	subs	r1, r3, r5
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800846c:	9d03      	ldr	r5, [sp, #12]
  pHandle->hBemf_beta_est = hAux_Beta;
 800846e:	f8a4 0072 	strh.w	r0, [r4, #114]	; 0x72
  hIbeta_err = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
 8008472:	fa48 f202 	asr.w	r2, r8, r2
  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.beta;
 8008476:	fb0a fe0e 	mul.w	lr, sl, lr
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800847a:	eba2 0a05 	sub.w	sl, r2, r5
  wAux = ( int32_t )  ( pHandle->hC1 ) * hAux;
 800847e:	fb12 f20b 	smulbb	r2, r2, fp
  wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 8008482:	eba8 0202 	sub.w	r2, r8, r2
  wAux = ( int32_t ) ( pHandle->hC1 ) * hAux;
 8008486:	fb13 f30b 	smulbb	r3, r3, fp
  wAux = ( int32_t ) ( pHandle->hC2 ) * hIalfa_err;
 800848a:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
  wIalfa_est_Next += wAux;
 800848e:	9d02      	ldr	r5, [sp, #8]
  wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 8008490:	eba9 0303 	sub.w	r3, r9, r3
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8008494:	b209      	sxth	r1, r1
  wAux = ( int32_t ) ( pHandle->hC5 ) * hValfa;
 8008496:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	; 0x28
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800849a:	fa0f fa8a 	sxth.w	sl, sl
  wIalfa_est_Next += wAux;
 800849e:	fb08 3301 	mla	r3, r8, r1, r3
  hVbeta = ( int16_t ) ( wAux >> 16 );
 80084a2:	ea4f 4e2e 	mov.w	lr, lr, asr #16
  wIbeta_est_Next += wAux;
 80084a6:	fb08 280a 	mla	r8, r8, sl, r2
  wIbeta_est_Next += wAux;
 80084aa:	fb09 880e 	mla	r8, r9, lr, r8
  wAux = ( int32_t )( pHandle->hC4 ) * hIalfa_err;
 80084ae:	f9b4 e026 	ldrsh.w	lr, [r4, #38]	; 0x26
  wAux = ( int32_t ) hAux_Beta >> pHandle->F3POW2;
 80084b2:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 80084b4:	fb01 710e 	mla	r1, r1, lr, r7
  wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 80084b8:	fb0e 6e0a 	mla	lr, lr, sl, r6
  wAux = ( int32_t )  ( pHandle->hC3 ) * hAux_Alfa;
 80084bc:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	; 0x24
  wIalfa_est_Next += wAux;
 80084c0:	fb09 3305 	mla	r3, r9, r5, r3
  wAux = wAux * pHandle->hC6;
 80084c4:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	; 0x2a
  wIalfa_est_Next -= wAux;
 80084c8:	fb06 371c 	mls	r7, r6, ip, r3
  wIbeta_est_Next -= wAux;
 80084cc:	fb06 8610 	mls	r6, r6, r0, r8
  wAux = ( int32_t ) hAux_Alfa >> pHandle->F3POW2;
 80084d0:	fa4c fc02 	asr.w	ip, ip, r2
  wAux = ( int32_t ) hAux_Beta >> pHandle->F3POW2;
 80084d4:	4110      	asrs	r0, r2
  wAux = pHandle->_Super.hElSpeedDpp * wAux;
 80084d6:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
  wAux = wAux * pHandle->hC6;
 80084da:	fb0c f309 	mul.w	r3, ip, r9
  wBemf_beta_est_Next -= wAux;
 80084de:	fb03 e812 	mls	r8, r3, r2, lr

  if (pHandle->hForcedDirection ==0)
 80084e2:	f994 3124 	ldrsb.w	r3, [r4, #292]	; 0x124
  wAux = wAux * pHandle->hC6;
 80084e6:	fb00 f009 	mul.w	r0, r0, r9
  wBemf_alfa_est_Next += wAux;
 80084ea:	fb00 1902 	mla	r9, r0, r2, r1
  if (pHandle->hForcedDirection ==0)
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d151      	bne.n	8008596 <STO_PLL_CalcElAngle+0x1c2>
  {
    /* we are in auxiliary mode, then rely on the speed detected */
    if(pHandle->_Super.hElSpeedDpp >= 0)
 80084f2:	2a00      	cmp	r2, #0
 80084f4:	f64f 7aff 	movw	sl, #65535	; 0xffff
 80084f8:	bfa8      	it	ge
 80084fa:	f04f 0a01 	movge.w	sl, #1
  int32_t wAlfa_Sin_tmp, wBeta_Cos_tmp;
  int16_t hOutput;
  Trig_Components Local_Components;
  int16_t hAux1, hAux2;

  Local_Components = MCM_Trig_Functions( pHandle->_Super.hElAngle );
 80084fe:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8008502:	f7f8 fceb 	bl	8000edc <MCM_Trig_Functions>
  hAux_Beta = ( int16_t )( hAux_Beta * wDirection  );
 8008506:	9b01      	ldr	r3, [sp, #4]
 8008508:	fb13 f50a 	smulbb	r5, r3, sl
  hAux_Alfa = ( int16_t )( hAux_Alfa * wDirection  );
 800850c:	9b00      	ldr	r3, [sp, #0]
  hRotor_Speed = STO_ExecutePLL( pHandle, hAux_Alfa, -hAux_Beta );
 800850e:	426d      	negs	r5, r5
  hAux_Alfa = ( int16_t )( hAux_Alfa * wDirection  );
 8008510:	fb13 f30a 	smulbb	r3, r3, sl

  /* Alfa & Beta BEMF multiplied by Cos & Sin*/
  wAlfa_Sin_tmp = ( int32_t )( hBemf_alfa_est ) * ( int32_t )Local_Components.hSin;
  wBeta_Cos_tmp = ( int32_t )( hBemf_beta_est ) * ( int32_t )Local_Components.hCos;
 8008514:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ( int32_t )( hBemf_alfa_est ) * ( int32_t )Local_Components.hSin;
 8008518:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = ( int16_t )( wAlfa_Sin_tmp >> 15 );
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller( & pHandle->PIRegulator, ( int32_t )( hAux1 ) - hAux2 );
 800851c:	f345 35cf 	sbfx	r5, r5, #15, #16
 8008520:	f340 31cf 	sbfx	r1, r0, #15, #16
 8008524:	1a69      	subs	r1, r5, r1
 8008526:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800852a:	f7fe fa6f 	bl	8006a0c <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 800852e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
  if ( bBuffer_index == pHandle->SpeedBufferSizeUnit )
 8008532:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
  pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 8008536:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 8008538:	3301      	adds	r3, #1
 800853a:	b2db      	uxtb	r3, r3
  if ( bBuffer_index == pHandle->SpeedBufferSizeUnit )
 800853c:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800853e:	bf12      	itee	ne
 8008540:	461a      	movne	r2, r3
 8008542:	2200      	moveq	r2, #0
    bBuffer_index = 0u;
 8008544:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8008546:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800854a:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 800854e:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 8008552:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 8008556:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
  pHandle->_Super.hElAngle += hRotor_Speed;
 800855a:	88a3      	ldrh	r3, [r4, #4]
  pHandle->Ialfa_est = wIalfa_est_Next;
 800855c:	6627      	str	r7, [r4, #96]	; 0x60
  pHandle->_Super.hElAngle += hRotor_Speed;
 800855e:	4418      	add	r0, r3
 8008560:	b200      	sxth	r0, r0
  pHandle->Ibeta_est = wIbeta_est_Next;
 8008562:	e9c4 6919 	strd	r6, r9, [r4, #100]	; 0x64
  pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 8008566:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
  pHandle->_Super.hElAngle += hRotor_Speed;
 800856a:	80a0      	strh	r0, [r4, #4]
}
 800856c:	b007      	add	sp, #28
 800856e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pHandle->Ibeta_est = -INT16_MAX * ( int32_t )( pHandle->hF1 );
 8008572:	6663      	str	r3, [r4, #100]	; 0x64
 8008574:	4698      	mov	r8, r3
 8008576:	e762      	b.n	800843e <STO_PLL_CalcElAngle+0x6a>
    pHandle->wBemf_beta_est = -INT16_MAX * ( int32_t )( pHandle->hF2 );
 8008578:	66e3      	str	r3, [r4, #108]	; 0x6c
 800857a:	461e      	mov	r6, r3
 800857c:	e747      	b.n	800840e <STO_PLL_CalcElAngle+0x3a>
  else if ( pHandle->wBemf_alfa_est <= -INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 800857e:	425a      	negs	r2, r3
 8008580:	4297      	cmp	r7, r2
    pHandle->wBemf_alfa_est = -INT16_MAX * ( int32_t )( pHandle->hF2 );
 8008582:	bfdc      	itt	le
 8008584:	6682      	strle	r2, [r0, #104]	; 0x68
 8008586:	4617      	movle	r7, r2
 8008588:	e732      	b.n	80083f0 <STO_PLL_CalcElAngle+0x1c>
  else if ( pHandle->Ialfa_est <= -INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 800858a:	425a      	negs	r2, r3
 800858c:	4591      	cmp	r9, r2
    pHandle->Ialfa_est = -INT16_MAX * ( int32_t )( pHandle->hF1 );
 800858e:	bfdc      	itt	le
 8008590:	6622      	strle	r2, [r4, #96]	; 0x60
 8008592:	4691      	movle	r9, r2
 8008594:	e74a      	b.n	800842c <STO_PLL_CalcElAngle+0x58>
  hAux_Alfa = ( int16_t )( hAux_Alfa * wDirection  );
 8008596:	fa1f fa83 	uxth.w	sl, r3
 800859a:	e7b0      	b.n	80084fe <STO_PLL_CalcElAngle+0x12a>

0800859c <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 800859c:	b570      	push	{r4, r5, r6, lr}
  uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 800859e:	f890 510e 	ldrb.w	r5, [r0, #270]	; 0x10e
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80085a2:	2d00      	cmp	r5, #0
 80085a4:	f000 8099 	beq.w	80086da <STO_PLL_CalcAvrgMecSpeedUnit+0x13e>
 80085a8:	1e6b      	subs	r3, r5, #1
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	f100 0472 	add.w	r4, r0, #114	; 0x72
 80085b0:	f100 0c74 	add.w	ip, r0, #116	; 0x74
 80085b4:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
  int32_t wAvrSpeed_dpp = ( int32_t )0;
 80085b8:	2200      	movs	r2, #0
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80085ba:	4623      	mov	r3, r4
    wAvrSpeed_dpp += ( int32_t )( pHandle->Speed_Buffer[i] );
 80085bc:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80085c0:	459c      	cmp	ip, r3
    wAvrSpeed_dpp += ( int32_t )( pHandle->Speed_Buffer[i] );
 80085c2:	4472      	add	r2, lr
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80085c4:	d1fa      	bne.n	80085bc <STO_PLL_CalcAvrgMecSpeedUnit+0x20>
  wAvrSpeed_dpp = wAvrSpeed_dpp / ( int16_t )bSpeedBufferSizeUnit;
 80085c6:	fb92 fef5 	sdiv	lr, r2, r5
 80085ca:	2200      	movs	r2, #0
    wError = ( int32_t )( pHandle->Speed_Buffer[i] ) - wAvrSpeed_dpp;
 80085cc:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 80085d0:	eba3 030e 	sub.w	r3, r3, lr
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80085d4:	45a4      	cmp	ip, r4
    wAvrQuadraticError += wError;
 80085d6:	fb03 2203 	mla	r2, r3, r3, r2
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80085da:	d1f7      	bne.n	80085cc <STO_PLL_CalcAvrgMecSpeedUnit+0x30>
  wAvrQuadraticError = wAvrQuadraticError / ( int16_t )bSpeedBufferSizeUnit;
 80085dc:	fbb2 f2f5 	udiv	r2, r2, r5
  wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 80085e0:	fb0e f40e 	mul.w	r4, lr, lr
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 80085e4:	f8b0 3110 	ldrh.w	r3, [r0, #272]	; 0x110
  wAux = wAvrSpeed_dpp * ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 80085e8:	8b45      	ldrh	r5, [r0, #26]
  if ( pHandle->EnableDualCheck == true ) /*do algorithm if it's enabled*/
 80085ea:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 80085ee:	fb04 f303 	mul.w	r3, r4, r3
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 80085f2:	ebb2 1fe3 	cmp.w	r2, r3, asr #7
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 80085f6:	ea4f 14e3 	mov.w	r4, r3, asr #7
  wAux = wAux * ( int32_t ) ( pHandle->_Super.SpeedUnit );
 80085fa:	7883      	ldrb	r3, [r0, #2]
  wAux = wAvrSpeed_dpp * ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 80085fc:	fb0e f505 	mul.w	r5, lr, r5
  wAux = wAux * ( int32_t ) ( pHandle->_Super.SpeedUnit );
 8008600:	fb05 f303 	mul.w	r3, r5, r3
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 8008604:	bfb8      	it	lt
 8008606:	f04f 0c01 	movlt.w	ip, #1
  wAux = wAux / ( int32_t )( pHandle->_Super.DPPConvFactor);
 800860a:	69c5      	ldr	r5, [r0, #28]
 800860c:	fb93 f3f5 	sdiv	r3, r3, r5
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 8008610:	bfa8      	it	ge
 8008612:	f04f 0c00 	movge.w	ip, #0
  wAux = wAux / ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008616:	7845      	ldrb	r5, [r0, #1]
 8008618:	fb93 f3f5 	sdiv	r3, r3, r5
  *pMecSpeedUnit = ( int16_t )wAux;
 800861c:	b21d      	sxth	r5, r3
 800861e:	800d      	strh	r5, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wAux;
 8008620:	8185      	strh	r5, [r0, #12]
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 8008622:	f880 c0f5 	strb.w	ip, [r0, #245]	; 0xf5
  if ( pHandle->EnableDualCheck == true ) /*do algorithm if it's enabled*/
 8008626:	b9ae      	cbnz	r6, 8008654 <STO_PLL_CalcAvrgMecSpeedUnit+0xb8>
  if ( pHandle->IsAlgorithmConverged == false )
 8008628:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
 800862c:	b353      	cbz	r3, 8008684 <STO_PLL_CalcAvrgMecSpeedUnit+0xe8>
    if ( ( pHandle->IsSpeedReliable == false ) || ( bIs_Bemf_Consistent == false ) )
 800862e:	4294      	cmp	r4, r2
 8008630:	dc25      	bgt.n	800867e <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
      pHandle->ReliabilityCounter++;
 8008632:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 8008636:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
      pHandle->ReliabilityCounter++;
 800863a:	3301      	adds	r3, #1
 800863c:	b2db      	uxtb	r3, r3
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 800863e:	429a      	cmp	r2, r3
      pHandle->ReliabilityCounter++;
 8008640:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 8008644:	d81e      	bhi.n	8008684 <STO_PLL_CalcAvrgMecSpeedUnit+0xe8>
        pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8008646:	78c2      	ldrb	r2, [r0, #3]
 8008648:	7002      	strb	r2, [r0, #0]
        pHandle->ReliabilityCounter = 0u;
 800864a:	2300      	movs	r3, #0
 800864c:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 8008650:	4618      	mov	r0, r3
 8008652:	bd70      	pop	{r4, r5, r6, pc}
    wAux = ( wAux < 0 ? ( -wAux ) : ( wAux ) ); /* wAux abs value   */
 8008654:	2b00      	cmp	r3, #0
    if ( wAux < ( int32_t )( pHandle->MaxAppPositiveMecSpeedUnit ) )
 8008656:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
    wAux = ( wAux < 0 ? ( -wAux ) : ( wAux ) ); /* wAux abs value   */
 800865a:	bfb8      	it	lt
 800865c:	425b      	neglt	r3, r3
    if ( wAux < ( int32_t )( pHandle->MaxAppPositiveMecSpeedUnit ) )
 800865e:	429d      	cmp	r5, r3
 8008660:	dc14      	bgt.n	800868c <STO_PLL_CalcAvrgMecSpeedUnit+0xf0>
  bool bIs_Bemf_Consistent = false;
 8008662:	2500      	movs	r5, #0
  int32_t wObsBemfSq = 0, wEstBemfSq = 0;
 8008664:	462b      	mov	r3, r5
 8008666:	462e      	mov	r6, r5
    pHandle->Est_Bemf_Level = wEstBemfSq;
 8008668:	e9c0 633f 	strd	r6, r3, [r0, #252]	; 0xfc
  if ( pHandle->IsAlgorithmConverged == false )
 800866c:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 8008670:	f880 50f9 	strb.w	r5, [r0, #249]	; 0xf9
  if ( pHandle->IsAlgorithmConverged == false )
 8008674:	b133      	cbz	r3, 8008684 <STO_PLL_CalcAvrgMecSpeedUnit+0xe8>
    if ( ( pHandle->IsSpeedReliable == false ) || ( bIs_Bemf_Consistent == false ) )
 8008676:	4294      	cmp	r4, r2
 8008678:	dddb      	ble.n	8008632 <STO_PLL_CalcAvrgMecSpeedUnit+0x96>
 800867a:	2d00      	cmp	r5, #0
 800867c:	d0d9      	beq.n	8008632 <STO_PLL_CalcAvrgMecSpeedUnit+0x96>
      pHandle->ReliabilityCounter = 0u;
 800867e:	2300      	movs	r3, #0
 8008680:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 8008684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      bAux = SPD_IsMecSpeedReliable ( &pHandle->_Super, pMecSpeedUnit );
 8008688:	f7ff bce6 	b.w	8008058 <SPD_IsMecSpeedReliable>
      wObsBemf = ( int32_t )( pHandle->hBemf_alfa_est );
 800868c:	f9b0 5070 	ldrsh.w	r5, [r0, #112]	; 0x70
      wObsBemf = ( int32_t )( pHandle->hBemf_beta_est );
 8008690:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
      wObsBemfSq = wObsBemf * wObsBemf;
 8008694:	fb05 fc05 	mul.w	ip, r5, r5
      wEstBemfSq = ( wEstBemf * ( int32_t )( pHandle->BemfConsistencyGain ) ) / 64;
 8008698:	f890 5119 	ldrb.w	r5, [r0, #281]	; 0x119
      wObsBemfSq += wObsBemf * wObsBemf;
 800869c:	fb06 c606 	mla	r6, r6, r6, ip
      wEstBemf = ( wAux * 32767 ) / ( int16_t )( pHandle->_Super.hMaxReliableMecSpeedUnit );
 80086a0:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 80086a4:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 80086a8:	fb93 f3fc 	sdiv	r3, r3, ip
      wEstBemfSq = ( wEstBemf * ( int32_t )( pHandle->BemfConsistencyGain ) ) / 64;
 80086ac:	fb03 f505 	mul.w	r5, r3, r5
 80086b0:	2d00      	cmp	r5, #0
 80086b2:	bfb8      	it	lt
 80086b4:	353f      	addlt	r5, #63	; 0x3f
 80086b6:	11ad      	asrs	r5, r5, #6
      wEstBemfSq *= wEstBemf;
 80086b8:	fb05 f303 	mul.w	r3, r5, r3
                     ( wEstBemfSq / 64 ) * ( int32_t )( pHandle->BemfConsistencyCheck );
 80086bc:	2b00      	cmp	r3, #0
 80086be:	461d      	mov	r5, r3
 80086c0:	f890 c118 	ldrb.w	ip, [r0, #280]	; 0x118
 80086c4:	bfb8      	it	lt
 80086c6:	f103 053f 	addlt.w	r5, r3, #63	; 0x3f
 80086ca:	11ad      	asrs	r5, r5, #6
      wEstBemfSqLo = wEstBemfSq -
 80086cc:	fb0c 3515 	mls	r5, ip, r5, r3
      if ( wObsBemfSq > wEstBemfSqLo )
 80086d0:	42ae      	cmp	r6, r5
 80086d2:	bfd4      	ite	le
 80086d4:	2500      	movle	r5, #0
 80086d6:	2501      	movgt	r5, #1
 80086d8:	e7c6      	b.n	8008668 <STO_PLL_CalcAvrgMecSpeedUnit+0xcc>
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80086da:	462a      	mov	r2, r5
 80086dc:	462c      	mov	r4, r5
  wAvrSpeed_dpp = wAvrSpeed_dpp / ( int16_t )bSpeedBufferSizeUnit;
 80086de:	46ae      	mov	lr, r5
 80086e0:	e780      	b.n	80085e4 <STO_PLL_CalcAvrgMecSpeedUnit+0x48>
 80086e2:	bf00      	nop

080086e4 <STO_PLL_CalcAvrgElSpeedDpp>:
  int16_t hSpeedBufferSizeUnit = ( int16_t )( pHandle->SpeedBufferSizeUnit );
 80086e4:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
  hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 80086e8:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
  int16_t hIndexNew = ( int16_t )pHandle->Speed_Buffer_Index;
 80086ec:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
  hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 80086f0:	1acb      	subs	r3, r1, r3
 80086f2:	b29b      	uxth	r3, r3
{
 80086f4:	b510      	push	{r4, lr}
  int32_t wSum = pHandle->DppBufferSum;
 80086f6:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
  if ( hBufferSizeDiff == 0 )
 80086fa:	b973      	cbnz	r3, 800871a <STO_PLL_CalcAvrgElSpeedDpp+0x36>
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 80086fc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
           pHandle->SpeedBufferOldestEl;
 8008700:	f9b0 110c 	ldrsh.w	r1, [r0, #268]	; 0x10c
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8008704:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 8008708:	4423      	add	r3, r4
 800870a:	1a5b      	subs	r3, r3, r1
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800870c:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
  pHandle->DppBufferSum = wSum;
 8008710:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8008714:	4113      	asrs	r3, r2
  pHandle->_Super.hElSpeedDpp = ( int16_t )wAvrSpeed_dpp;
 8008716:	81c3      	strh	r3, [r0, #14]
}
 8008718:	bd10      	pop	{r4, pc}
    hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800871a:	4413      	add	r3, r2
 800871c:	fa0f fc83 	sxth.w	ip, r3
    if ( hIndexOldTemp >= hSpeedBufferSizeUnit )
 8008720:	4561      	cmp	r1, ip
    hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8008722:	b29b      	uxth	r3, r3
    if ( hIndexOldTemp >= hSpeedBufferSizeUnit )
 8008724:	dc05      	bgt.n	8008732 <STO_PLL_CalcAvrgElSpeedDpp+0x4e>
 8008726:	fa1f fe81 	uxth.w	lr, r1
      hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 800872a:	eba3 030e 	sub.w	r3, r3, lr
 800872e:	fa0f fc83 	sxth.w	ip, r3
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8008732:	eb00 0242 	add.w	r2, r0, r2, lsl #1
           pHandle->Speed_Buffer[hIndexOld];
 8008736:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 800873a:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
           pHandle->Speed_Buffer[hIndexOld];
 800873e:	f9bc 2074 	ldrsh.w	r2, [ip, #116]	; 0x74
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8008742:	4423      	add	r3, r4
 8008744:	1a9b      	subs	r3, r3, r2
 8008746:	e7e1      	b.n	800870c <STO_PLL_CalcAvrgElSpeedDpp+0x28>

08008748 <STO_PLL_Clear>:
{
 8008748:	b510      	push	{r4, lr}
  * @retval none
  */
static void STO_InitSpeedBuffer( STO_PLL_Handle_t * pHandle )
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 800874a:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
  pHandle->Ialfa_est = ( int32_t )0;
 800874e:	2100      	movs	r1, #0
  pHandle->Ibeta_est = ( int32_t )0;
 8008750:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
  pHandle->wBemf_beta_est = ( int32_t )0;
 8008754:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
  pHandle->Est_Bemf_Level = ( int32_t )0;
 8008758:	e9c0 113f 	strd	r1, r1, [r0, #252]	; 0xfc
{
 800875c:	4604      	mov	r4, r0
  pHandle->_Super.hElAngle = ( int16_t )0;
 800875e:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hElSpeedDpp = ( int16_t )0;
 8008760:	81c1      	strh	r1, [r0, #14]
  pHandle->ConsistencyCounter = 0u;
 8008762:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
  pHandle->IsAlgorithmConverged = false;
 8008766:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
  pHandle->DppBufferSum = ( int32_t )0;
 800876a:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
  pHandle->ForceConvergency = false;
 800876e:	f8a0 1122 	strh.w	r1, [r0, #290]	; 0x122

  /*init speed buffer*/
  for ( b_i = 0u; b_i < bSpeedBufferSize; b_i++ )
 8008772:	b11a      	cbz	r2, 800877c <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = ( int16_t )0;
 8008774:	0052      	lsls	r2, r2, #1
 8008776:	3074      	adds	r0, #116	; 0x74
 8008778:	f000 fb36 	bl	8008de8 <memset>
  }
  pHandle->Speed_Buffer_Index = 0u;
 800877c:	2100      	movs	r1, #0
 800877e:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
  pHandle->SpeedBufferOldestEl = ( int16_t )0;
 8008782:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
  PID_SetIntegralTerm( & pHandle->PIRegulator, ( int32_t )0 );
 8008786:	f104 0034 	add.w	r0, r4, #52	; 0x34
}
 800878a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  PID_SetIntegralTerm( & pHandle->PIRegulator, ( int32_t )0 );
 800878e:	f7fe b931 	b.w	80069f4 <PID_SetIntegralTerm>
 8008792:	bf00      	nop

08008794 <STO_PLL_Init>:
{
 8008794:	b510      	push	{r4, lr}
  pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8008796:	f890 1116 	ldrb.w	r1, [r0, #278]	; 0x116
  htempk = ( int16_t )( C6_COMP_CONST1 / ( pHandle->hF2 ) );
 800879a:	4b19      	ldr	r3, [pc, #100]	; (8008800 <STO_PLL_Init+0x6c>)
 800879c:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	; 0x2e
  pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 80087a0:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
  pHandle->EnableDualCheck = true;
 80087a4:	2201      	movs	r2, #1
  pHandle->F3POW2 = 0u;
 80087a6:	2100      	movs	r1, #0
  htempk = ( int16_t )( C6_COMP_CONST1 / ( pHandle->hF2 ) );
 80087a8:	fb93 f3fe 	sdiv	r3, r3, lr
 80087ac:	b21b      	sxth	r3, r3
{
 80087ae:	4604      	mov	r4, r0
  pHandle->EnableDualCheck = true;
 80087b0:	f880 2104 	strb.w	r2, [r0, #260]	; 0x104
  pHandle->F3POW2 = 0u;
 80087b4:	8641      	strh	r1, [r0, #50]	; 0x32
  while ( htempk != 0 )
 80087b6:	b30b      	cbz	r3, 80087fc <STO_PLL_Init+0x68>
  wAux = ( int32_t )1;
 80087b8:	4611      	mov	r1, r2
    htempk /= ( int16_t )2;
 80087ba:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  while ( htempk != 0 )
 80087be:	f102 0c01 	add.w	ip, r2, #1
 80087c2:	105b      	asrs	r3, r3, #1
 80087c4:	4610      	mov	r0, r2
    wAux *= ( int32_t )2;
 80087c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
  while ( htempk != 0 )
 80087ca:	fa1f f28c 	uxth.w	r2, ip
 80087ce:	d1f4      	bne.n	80087ba <STO_PLL_Init+0x26>
  pHandle->hF3 = ( int16_t )wAux;
 80087d0:	b20a      	sxth	r2, r1
 80087d2:	8660      	strh	r0, [r4, #50]	; 0x32
  wAux = ( int32_t )( pHandle->hF2 ) * pHandle->hF3;
 80087d4:	fb0e f102 	mul.w	r1, lr, r2
  pHandle->hC6 = ( int16_t )( wAux / C6_COMP_CONST2 );
 80087d8:	480a      	ldr	r0, [pc, #40]	; (8008804 <STO_PLL_Init+0x70>)
  pHandle->hF3 = ( int16_t )wAux;
 80087da:	8622      	strh	r2, [r4, #48]	; 0x30
  pHandle->hC6 = ( int16_t )( wAux / C6_COMP_CONST2 );
 80087dc:	17cb      	asrs	r3, r1, #31
 80087de:	fb80 0101 	smull	r0, r1, r0, r1
 80087e2:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 80087e6:	8563      	strh	r3, [r4, #42]	; 0x2a
  STO_PLL_Clear( pHandle );
 80087e8:	4620      	mov	r0, r4
 80087ea:	f7ff ffad 	bl	8008748 <STO_PLL_Clear>
  PID_HandleInit( & pHandle->PIRegulator );
 80087ee:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80087f2:	f7fe f8eb 	bl	80069cc <PID_HandleInit>
  pHandle->_Super.hMecAccelUnitP = 0;
 80087f6:	2300      	movs	r3, #0
 80087f8:	8263      	strh	r3, [r4, #18]
}
 80087fa:	bd10      	pop	{r4, pc}
 80087fc:	4671      	mov	r1, lr
 80087fe:	e7eb      	b.n	80087d8 <STO_PLL_Init+0x44>
 8008800:	000fea5e 	.word	0x000fea5e
 8008804:	06488dc5 	.word	0x06488dc5

08008808 <STO_PLL_IsObserverConverged>:
  int16_t hEstimatedSpeedUnit, hUpperThreshold, hLowerThreshold;
  int32_t wAux;
  bool bAux = false;
  int32_t wtemp;
  
  if ( pHandle->ForceConvergency2 == true )
 8008808:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
{
 800880c:	4603      	mov	r3, r0
  if ( pHandle->ForceConvergency2 == true )
 800880e:	b10a      	cbz	r2, 8008814 <STO_PLL_IsObserverConverged+0xc>
  {
    hForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8008810:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  }

  if ( pHandle->ForceConvergency == true )
 8008814:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 8008818:	b128      	cbz	r0, 8008826 <STO_PLL_IsObserverConverged+0x1e>
  {
    bAux = true;
    pHandle->IsAlgorithmConverged = true;
 800881a:	2001      	movs	r0, #1
    pHandle->_Super.bSpeedErrorNumber = 0u;
 800881c:	2200      	movs	r2, #0
    pHandle->IsAlgorithmConverged = true;
 800881e:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
    pHandle->_Super.bSpeedErrorNumber = 0u;
 8008822:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ( bAux );
}
 8008824:	4770      	bx	lr
    hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8008826:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
    wtemp = ( int32_t )hEstimatedSpeedUnit * ( int32_t )hForcedMecSpeedUnit;
 800882a:	fb02 fc01 	mul.w	ip, r2, r1
    if ( wtemp > 0 )
 800882e:	f1bc 0f00 	cmp.w	ip, #0
{
 8008832:	b530      	push	{r4, r5, lr}
    wtemp = ( int32_t )hEstimatedSpeedUnit * ( int32_t )hForcedMecSpeedUnit;
 8008834:	468e      	mov	lr, r1
    if ( wtemp > 0 )
 8008836:	dd37      	ble.n	80088a8 <STO_PLL_IsObserverConverged+0xa0>
      if ( hEstimatedSpeedUnit < 0 )
 8008838:	2a00      	cmp	r2, #0
        hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 800883a:	bfbc      	itt	lt
 800883c:	4252      	neglt	r2, r2
 800883e:	b212      	sxthlt	r2, r2
      if ( pHandle->IsSpeedReliable == true )
 8008840:	f893 40f5 	ldrb.w	r4, [r3, #245]	; 0xf5
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_H;
 8008844:	f893 c112 	ldrb.w	ip, [r3, #274]	; 0x112
      if ( hForcedMecSpeedUnit < 0 )
 8008848:	2900      	cmp	r1, #0
        hForcedMecSpeedUnit = -hForcedMecSpeedUnit;
 800884a:	bfbc      	itt	lt
 800884c:	4249      	neglt	r1, r1
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_H;
 800884e:	fa0f fe81 	sxthlt.w	lr, r1
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_L;
 8008852:	f893 1113 	ldrb.w	r1, [r3, #275]	; 0x113
      if ( pHandle->IsSpeedReliable == true )
 8008856:	b344      	cbz	r4, 80088aa <STO_PLL_IsObserverConverged+0xa2>
        if ( ( uint16_t )hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed )
 8008858:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 800885c:	b294      	uxth	r4, r2
 800885e:	42a5      	cmp	r5, r4
 8008860:	d223      	bcs.n	80088aa <STO_PLL_IsObserverConverged+0xa2>
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_L;
 8008862:	fb0e f101 	mul.w	r1, lr, r1
      hLowerThreshold = ( int16_t )( wAux / ( int32_t )16 );
 8008866:	2900      	cmp	r1, #0
 8008868:	bfb8      	it	lt
 800886a:	310f      	addlt	r1, #15
          if ( hEstimatedSpeedUnit >= hLowerThreshold )
 800886c:	f341 110f 	sbfx	r1, r1, #4, #16
 8008870:	428a      	cmp	r2, r1
 8008872:	db1a      	blt.n	80088aa <STO_PLL_IsObserverConverged+0xa2>
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_H;
 8008874:	fb0e fc0c 	mul.w	ip, lr, ip
      hUpperThreshold = ( int16_t )( wAux / ( int32_t )16 );
 8008878:	f1bc 0f00 	cmp.w	ip, #0
 800887c:	bfb8      	it	lt
 800887e:	f10c 0c0f 	addlt.w	ip, ip, #15
            if ( hEstimatedSpeedUnit <= hUpperThreshold )
 8008882:	f34c 1c0f 	sbfx	ip, ip, #4, #16
 8008886:	4562      	cmp	r2, ip
 8008888:	dc0f      	bgt.n	80088aa <STO_PLL_IsObserverConverged+0xa2>
              pHandle->ConsistencyCounter++;
 800888a:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
              if ( pHandle->ConsistencyCounter >=
 800888e:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
              pHandle->ConsistencyCounter++;
 8008892:	3201      	adds	r2, #1
 8008894:	b2d2      	uxtb	r2, r2
              if ( pHandle->ConsistencyCounter >=
 8008896:	4291      	cmp	r1, r2
              pHandle->ConsistencyCounter++;
 8008898:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
              if ( pHandle->ConsistencyCounter >=
 800889c:	d804      	bhi.n	80088a8 <STO_PLL_IsObserverConverged+0xa0>
    pHandle->IsAlgorithmConverged = true;
 800889e:	2001      	movs	r0, #1
    pHandle->_Super.bSpeedErrorNumber = 0u;
 80088a0:	2200      	movs	r2, #0
    pHandle->IsAlgorithmConverged = true;
 80088a2:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
    pHandle->_Super.bSpeedErrorNumber = 0u;
 80088a6:	701a      	strb	r2, [r3, #0]
}
 80088a8:	bd30      	pop	{r4, r5, pc}
              pHandle->ConsistencyCounter = 0u;
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
}
 80088b0:	bd30      	pop	{r4, r5, pc}
 80088b2:	bf00      	nop

080088b4 <STO_PLL_GetEstimatedBemf>:
__weak alphabeta_t STO_PLL_GetEstimatedBemf( STO_PLL_Handle_t * pHandle )
{
  alphabeta_t Vaux;
  Vaux.alpha = pHandle->hBemf_alfa_est;
  Vaux.beta = pHandle->hBemf_beta_est;
  return ( Vaux );
 80088b4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80088b6:	2200      	movs	r2, #0
 80088b8:	b299      	uxth	r1, r3
 80088ba:	f361 020f 	bfi	r2, r1, #0, #16
 80088be:	0c1b      	lsrs	r3, r3, #16
 80088c0:	f363 421f 	bfi	r2, r3, #16, #16
{
 80088c4:	b082      	sub	sp, #8
}
 80088c6:	4610      	mov	r0, r2
 80088c8:	b002      	add	sp, #8
 80088ca:	4770      	bx	lr

080088cc <STO_PLL_GetEstimatedCurrent>:
#endif

#ifdef FULL_MISRA_C_COMPLIANCY
  Iaux.beta = ( int16_t )( pHandle->Ibeta_est / ( pHandle->hF1 ) );
#else
  Iaux.beta = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
 80088cc:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
  Iaux.alpha = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 80088d0:	f8b0 c11c 	ldrh.w	ip, [r0, #284]	; 0x11c
 80088d4:	fa42 f20c 	asr.w	r2, r2, ip
#endif

  return ( Iaux );
 80088d8:	fa43 f30c 	asr.w	r3, r3, ip
 80088dc:	b292      	uxth	r2, r2
 80088de:	2100      	movs	r1, #0
 80088e0:	f362 010f 	bfi	r1, r2, #0, #16
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	f363 411f 	bfi	r1, r3, #16, #16
{
 80088ea:	b082      	sub	sp, #8
}
 80088ec:	4608      	mov	r0, r1
 80088ee:	b002      	add	sp, #8
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop

080088f4 <STO_PLL_GetObserverGains>:
  * @param  phC4 pointer to int16_t used to return parameters hhC4
  * @retval none
  */
__weak void STO_PLL_GetObserverGains( STO_PLL_Handle_t * pHandle, int16_t * phC2, int16_t * phC4 )
{
  *phC2 = pHandle->hC2;
 80088f4:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80088f8:	800b      	strh	r3, [r1, #0]
  *phC4 = pHandle->hC4;
 80088fa:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 80088fe:	8013      	strh	r3, [r2, #0]
}
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop

08008904 <STO_PLL_SetObserverGains>:
  * @retval none
  */
__weak void STO_PLL_SetObserverGains( STO_PLL_Handle_t * pHandle, int16_t hhC1, int16_t hhC2 )
{

  pHandle->hC2 = hhC1;
 8008904:	8441      	strh	r1, [r0, #34]	; 0x22
  pHandle->hC4 = hhC2;
 8008906:	84c2      	strh	r2, [r0, #38]	; 0x26
}
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop

0800890c <STO_GetPLLGains>:
  * @param  pPgain pointer to int16_t used to return PLL proportional gain
  * @param  pIgain pointer to int16_t used to return PLL integral gain
  * @retval none
  */
__weak void STO_GetPLLGains( STO_PLL_Handle_t * pHandle, int16_t * pPgain, int16_t * pIgain )
{
 800890c:	b570      	push	{r4, r5, r6, lr}

  *pPgain = PID_GetKP( & pHandle->PIRegulator );
 800890e:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8008912:	4620      	mov	r0, r4
{
 8008914:	460e      	mov	r6, r1
 8008916:	4615      	mov	r5, r2
  *pPgain = PID_GetKP( & pHandle->PIRegulator );
 8008918:	f7fe f864 	bl	80069e4 <PID_GetKP>
 800891c:	8030      	strh	r0, [r6, #0]
  *pIgain = PID_GetKI( & pHandle->PIRegulator );
 800891e:	4620      	mov	r0, r4
 8008920:	f7fe f864 	bl	80069ec <PID_GetKI>
 8008924:	8028      	strh	r0, [r5, #0]
}
 8008926:	bd70      	pop	{r4, r5, r6, pc}

08008928 <STO_SetPLLGains>:
  * @param  hPgain new value for PLL proportional gain
  * @param  hIgain new value for PLL integral gain
  * @retval none
  */
__weak void STO_SetPLLGains( STO_PLL_Handle_t * pHandle, int16_t hPgain, int16_t hIgain )
{
 8008928:	b510      	push	{r4, lr}
 800892a:	b082      	sub	sp, #8
  PID_SetKP( & pHandle->PIRegulator, hPgain );
 800892c:	3034      	adds	r0, #52	; 0x34
{
 800892e:	4614      	mov	r4, r2
  PID_SetKP( & pHandle->PIRegulator, hPgain );
 8008930:	9001      	str	r0, [sp, #4]
 8008932:	f7fe f853 	bl	80069dc <PID_SetKP>
  PID_SetKI( & pHandle->PIRegulator, hIgain );
 8008936:	9801      	ldr	r0, [sp, #4]
 8008938:	4621      	mov	r1, r4
}
 800893a:	b002      	add	sp, #8
 800893c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  PID_SetKI( & pHandle->PIRegulator, hIgain );
 8008940:	f7fe b84e 	b.w	80069e0 <PID_SetKI>

08008944 <STO_OTF_ResetPLL>:
  * @retval none
  */
__weak void STO_OTF_ResetPLL( STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  PID_SetIntegralTerm( &pHdl->PIRegulator, ( int32_t )0 );
 8008944:	6800      	ldr	r0, [r0, #0]
 8008946:	2100      	movs	r1, #0
 8008948:	3034      	adds	r0, #52	; 0x34
 800894a:	f7fe b853 	b.w	80069f4 <PID_SetIntegralTerm>
 800894e:	bf00      	nop

08008950 <STO_ResetPLL>:
  * @param  pHandle: handler of the current instance of the STO component
  * @retval none
  */
__weak void STO_ResetPLL( STO_PLL_Handle_t * pHandle )
{
  PID_SetIntegralTerm( &pHandle->PIRegulator, ( int32_t )0 );
 8008950:	2100      	movs	r1, #0
 8008952:	3034      	adds	r0, #52	; 0x34
 8008954:	f7fe b84e 	b.w	80069f4 <PID_SetIntegralTerm>

08008958 <STO_PLL_GetEstimatedBemfLevel>:
  * @retval int32_t
  */
__weak int32_t STO_PLL_GetEstimatedBemfLevel( STO_PLL_Handle_t * pHandle )
{
  return ( pHandle->Est_Bemf_Level );
}
 8008958:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop

08008960 <STO_PLL_GetObservedBemfLevel>:
  * @retval int32_t
  */
__weak int32_t STO_PLL_GetObservedBemfLevel( STO_PLL_Handle_t * pHandle )
{
  return ( pHandle->Obs_Bemf_Level );
}
 8008960:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop

08008968 <STO_PLL_IsVarianceTight>:
  * @retval bool Variance state
  */
__weak bool STO_PLL_IsVarianceTight( const STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  return ( pHdl->IsSpeedReliable );
 8008968:	6803      	ldr	r3, [r0, #0]
}
 800896a:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 800896e:	4770      	bx	lr

08008970 <STO_PLL_ForceConvergency1>:
  * @param  pHandle: handler of the current instance of the STO component
  */
__weak void STO_PLL_ForceConvergency1( STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  pHdl->ForceConvergency = true;
 8008970:	6803      	ldr	r3, [r0, #0]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
}
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop

0800897c <STO_PLL_ForceConvergency2>:
  * @param  pHandle: handler of the current instance of the STO component
  */
__weak void STO_PLL_ForceConvergency2( STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  pHdl->ForceConvergency2 = true;
 800897c:	6803      	ldr	r3, [r0, #0]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
}
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop

08008988 <STO_SetDirection>:
  * @brief  forces the rotation direction
  * @param  direction: imposed direction
  */
__weak void STO_SetDirection( STO_PLL_Handle_t * pHandle, uint8_t direction )
{
  pHandle->hForcedDirection = direction;
 8008988:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
}
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop

08008990 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8008990:	f7fd bf6a 	b.w	8006868 <FCP_Init>

08008994 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8008994:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
 8008998:	b16b      	cbz	r3, 80089b6 <UFCP_TX_IRQ_Handler+0x22>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 800899a:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 800899e:	4602      	mov	r2, r0
 80089a0:	b1a3      	cbz	r3, 80089cc <UFCP_TX_IRQ_Handler+0x38>
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d108      	bne.n	80089b8 <UFCP_TX_IRQ_Handler+0x24>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 80089a6:	7d41      	ldrb	r1, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80089a8:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 80089ac:	6281      	str	r1, [r0, #40]	; 0x28

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 80089ae:	3301      	adds	r3, #1
 80089b0:	f882 3098 	strb.w	r3, [r2, #152]	; 0x98
 80089b4:	4770      	bx	lr
 80089b6:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80089b8:	7d41      	ldrb	r1, [r0, #21]
 80089ba:	3101      	adds	r1, #1
 80089bc:	428b      	cmp	r3, r1
 80089be:	dc07      	bgt.n	80089d0 <UFCP_TX_IRQ_Handler+0x3c>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 80089c0:	18c1      	adds	r1, r0, r3
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80089c2:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 80089c6:	7d09      	ldrb	r1, [r1, #20]
 80089c8:	6281      	str	r1, [r0, #40]	; 0x28
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80089ca:	e7f0      	b.n	80089ae <UFCP_TX_IRQ_Handler+0x1a>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 80089cc:	7d01      	ldrb	r1, [r0, #20]
        break;
 80089ce:	e7eb      	b.n	80089a8 <UFCP_TX_IRQ_Handler+0x14>
{
 80089d0:	b410      	push	{r4}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80089d2:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
 80089d6:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
 80089da:	628b      	str	r3, [r1, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089dc:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 80089e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e4:	e841 3400 	strex	r4, r3, [r1]
 80089e8:	2c00      	cmp	r4, #0
 80089ea:	d1f7      	bne.n	80089dc <UFCP_TX_IRQ_Handler+0x48>
    }
    else
    {
      LL_USART_DisableIT_TXE(pHandle->USARTx);
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 80089ec:	f882 4097 	strb.w	r4, [r2, #151]	; 0x97

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 80089f0:	e9d2 0300 	ldrd	r0, r3, [r2]
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 80089f4:	f85d 4b04 	ldr.w	r4, [sp], #4
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 80089f8:	4718      	bx	r3
 80089fa:	bf00      	nop

080089fc <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 80089fc:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8008a00:	b973      	cbnz	r3, 8008a20 <UFCP_Receive+0x24>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;

    pHandle->RxFrameLevel = 0;
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8008a02:	2301      	movs	r3, #1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a04:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 8008a08:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0c:	e852 3f00 	ldrex	r3, [r2]
 8008a10:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a14:	e842 3100 	strex	r1, r3, [r2]
 8008a18:	2900      	cmp	r1, #0
 8008a1a:	d1f7      	bne.n	8008a0c <UFCP_Receive+0x10>

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8008a1c:	2002      	movs	r0, #2
 8008a1e:	4770      	bx	lr
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8008a20:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8008a22:	4770      	bx	lr

08008a24 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8008a24:	b570      	push	{r4, r5, r6, lr}
 8008a26:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8008a28:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d147      	bne.n	8008ac0 <UFCP_Send+0x9c>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
    pHandle->TxFrame.Size = size;
    while ( size-- ) *dest++ = *buffer++;
 8008a30:	1e58      	subs	r0, r3, #1
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8008a32:	f104 0616 	add.w	r6, r4, #22
    pHandle->TxFrame.Code = code;
 8008a36:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8008a38:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8008a3a:	b2c0      	uxtb	r0, r0
 8008a3c:	b343      	cbz	r3, 8008a90 <UFCP_Send+0x6c>
 8008a3e:	1c51      	adds	r1, r2, #1
 8008a40:	1a75      	subs	r5, r6, r1
 8008a42:	2d02      	cmp	r5, #2
 8008a44:	d93e      	bls.n	8008ac4 <UFCP_Send+0xa0>
 8008a46:	2805      	cmp	r0, #5
 8008a48:	d93c      	bls.n	8008ac4 <UFCP_Send+0xa0>
 8008a4a:	0899      	lsrs	r1, r3, #2
 8008a4c:	3901      	subs	r1, #1
 8008a4e:	b2c9      	uxtb	r1, r1
 8008a50:	1d15      	adds	r5, r2, #4
 8008a52:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8008a56:	46b4      	mov	ip, r6
 8008a58:	4611      	mov	r1, r2
 8008a5a:	f851 eb04 	ldr.w	lr, [r1], #4
 8008a5e:	f84c eb04 	str.w	lr, [ip], #4
 8008a62:	42a9      	cmp	r1, r5
 8008a64:	d1f9      	bne.n	8008a5a <UFCP_Send+0x36>
 8008a66:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 8008a6a:	1a40      	subs	r0, r0, r1
 8008a6c:	428b      	cmp	r3, r1
 8008a6e:	b2c0      	uxtb	r0, r0
 8008a70:	eb02 0c01 	add.w	ip, r2, r1
 8008a74:	eb06 0501 	add.w	r5, r6, r1
 8008a78:	d00a      	beq.n	8008a90 <UFCP_Send+0x6c>
 8008a7a:	5c53      	ldrb	r3, [r2, r1]
 8008a7c:	5473      	strb	r3, [r6, r1]
 8008a7e:	b138      	cbz	r0, 8008a90 <UFCP_Send+0x6c>
 8008a80:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8008a84:	706b      	strb	r3, [r5, #1]
 8008a86:	2801      	cmp	r0, #1
 8008a88:	d002      	beq.n	8008a90 <UFCP_Send+0x6c>
 8008a8a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8008a8e:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8008a90:	f104 0014 	add.w	r0, r4, #20
 8008a94:	f7fd fefc 	bl	8006890 <FCP_CalcCRC>

    pHandle->TxFrameLevel = 0;
 8008a98:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8008a9a:	2301      	movs	r3, #1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008a9c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8008aa0:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 8008aa4:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8008aa8:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aac:	e852 3f00 	ldrex	r3, [r2]
 8008ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab4:	e842 3100 	strex	r1, r3, [r2]
 8008ab8:	2900      	cmp	r1, #0
 8008aba:	d1f7      	bne.n	8008aac <UFCP_Send+0x88>
 8008abc:	2002      	movs	r0, #2
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
  }

  return ret_val;
}
 8008abe:	bd70      	pop	{r4, r5, r6, pc}
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8008ac0:	2001      	movs	r0, #1
}
 8008ac2:	bd70      	pop	{r4, r5, r6, pc}
 8008ac4:	f104 0015 	add.w	r0, r4, #21
 8008ac8:	441a      	add	r2, r3
 8008aca:	e000      	b.n	8008ace <UFCP_Send+0xaa>
 8008acc:	3101      	adds	r1, #1
    while ( size-- ) *dest++ = *buffer++;
 8008ace:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 8008ad2:	f800 3f01 	strb.w	r3, [r0, #1]!
 8008ad6:	4291      	cmp	r1, r2
 8008ad8:	d1f8      	bne.n	8008acc <UFCP_Send+0xa8>
 8008ada:	e7d9      	b.n	8008a90 <UFCP_Send+0x6c>

08008adc <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8008adc:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8008ae0:	b90b      	cbnz	r3, 8008ae6 <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008ae2:	4830      	ldr	r0, [pc, #192]	; (8008ba4 <UFCP_RX_IRQ_Handler+0xc8>)
}
 8008ae4:	4770      	bx	lr
{
 8008ae6:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8008ae8:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 8008aec:	b083      	sub	sp, #12
 8008aee:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8008af0:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 8008af2:	b393      	cbz	r3, 8008b5a <UFCP_RX_IRQ_Handler+0x7e>
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d03a      	beq.n	8008b6e <UFCP_RX_IRQ_Handler+0x92>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8008af8:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
 8008afc:	3101      	adds	r1, #1
 8008afe:	428b      	cmp	r3, r1
 8008b00:	dc08      	bgt.n	8008b14 <UFCP_RX_IRQ_Handler+0x38>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8008b02:	18c1      	adds	r1, r0, r3
          pBaseHandle->RxFrameLevel++;
 8008b04:	3301      	adds	r3, #1
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008b06:	4827      	ldr	r0, [pc, #156]	; (8008ba4 <UFCP_RX_IRQ_Handler+0xc8>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8008b08:	f881 2099 	strb.w	r2, [r1, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 8008b0c:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8008b10:	b003      	add	sp, #12
 8008b12:	bd30      	pop	{r4, r5, pc}
          pBaseHandle->RxTimeoutCountdown = 0;
 8008b14:	2300      	movs	r3, #0
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008b16:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8008b1a:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
          pBaseHandle->RxTimeoutCountdown = 0;
 8008b1e:	8243      	strh	r3, [r0, #18]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b20:	e851 3f00 	ldrex	r3, [r1]
 8008b24:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b28:	e841 3200 	strex	r2, r3, [r1]
 8008b2c:	2a00      	cmp	r2, #0
 8008b2e:	d1f7      	bne.n	8008b20 <UFCP_RX_IRQ_Handler+0x44>
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8008b30:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8008b34:	f104 0099 	add.w	r0, r4, #153	; 0x99
 8008b38:	f7fd feaa 	bl	8006890 <FCP_CalcCRC>
 8008b3c:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8008b40:	4283      	cmp	r3, r0
 8008b42:	d122      	bne.n	8008b8a <UFCP_RX_IRQ_Handler+0xae>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8008b44:	6820      	ldr	r0, [r4, #0]
 8008b46:	68a5      	ldr	r5, [r4, #8]
 8008b48:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8008b4c:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 8008b50:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8008b54:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8008b56:	4814      	ldr	r0, [pc, #80]	; (8008ba8 <UFCP_RX_IRQ_Handler+0xcc>)
 8008b58:	e7da      	b.n	8008b10 <UFCP_RX_IRQ_Handler+0x34>
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8008b5a:	8a01      	ldrh	r1, [r0, #16]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8008b5c:	4813      	ldr	r0, [pc, #76]	; (8008bac <UFCP_RX_IRQ_Handler+0xd0>)
        pBaseHandle->RxFrame.Code = rx_byte;
 8008b5e:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 8008b62:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8008b64:	8261      	strh	r1, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 8008b66:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8008b6a:	b003      	add	sp, #12
 8008b6c:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8008b6e:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrame.Size = rx_byte;
 8008b70:	f880 209a 	strb.w	r2, [r0, #154]	; 0x9a
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8008b74:	d404      	bmi.n	8008b80 <UFCP_RX_IRQ_Handler+0xa4>
        pBaseHandle->RxFrameLevel++;
 8008b76:	2302      	movs	r3, #2
 8008b78:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008b7c:	4809      	ldr	r0, [pc, #36]	; (8008ba4 <UFCP_RX_IRQ_Handler+0xc8>)
 8008b7e:	e7c7      	b.n	8008b10 <UFCP_RX_IRQ_Handler+0x34>
          pBaseHandle->RxFrameLevel =0 ;
 8008b80:	2300      	movs	r3, #0
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008b82:	4808      	ldr	r0, [pc, #32]	; (8008ba4 <UFCP_RX_IRQ_Handler+0xc8>)
          pBaseHandle->RxFrameLevel =0 ;
 8008b84:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
 8008b88:	e7c2      	b.n	8008b10 <UFCP_RX_IRQ_Handler+0x34>
            error_code = FCP_MSG_RX_BAD_CRC;
 8008b8a:	250a      	movs	r5, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	f10d 0207 	add.w	r2, sp, #7
 8008b92:	21ff      	movs	r1, #255	; 0xff
 8008b94:	4620      	mov	r0, r4
            error_code = FCP_MSG_RX_BAD_CRC;
 8008b96:	f88d 5007 	strb.w	r5, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008b9a:	f7ff ff43 	bl	8008a24 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8008b9e:	4802      	ldr	r0, [pc, #8]	; (8008ba8 <UFCP_RX_IRQ_Handler+0xcc>)
  return ret_val;
 8008ba0:	e7b6      	b.n	8008b10 <UFCP_RX_IRQ_Handler+0x34>
 8008ba2:	bf00      	nop
 8008ba4:	080090fc 	.word	0x080090fc
 8008ba8:	08009100 	.word	0x08009100
 8008bac:	080090fe 	.word	0x080090fe

08008bb0 <UFCP_OVR_IRQ_Handler>:
{
 8008bb0:	b500      	push	{lr}
 8008bb2:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 8008bb4:	f04f 0c08 	mov.w	ip, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008bb8:	2301      	movs	r3, #1
 8008bba:	f10d 0207 	add.w	r2, sp, #7
 8008bbe:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 8008bc0:	f88d c007 	strb.w	ip, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008bc4:	f7ff ff2e 	bl	8008a24 <UFCP_Send>
}
 8008bc8:	b003      	add	sp, #12
 8008bca:	f85d fb04 	ldr.w	pc, [sp], #4
 8008bce:	bf00      	nop

08008bd0 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 8008bd6:	4770      	bx	lr

08008bd8 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 8008bd8:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8008bda:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
  pHandle->_Super.bSpeedErrorNumber = 0u;
 8008bdc:	7003      	strb	r3, [r0, #0]
  pHandle->wElSpeedDpp32 = 0;
 8008bde:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.hElAngle = 0;
 8008be2:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 8008be4:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 8008be6:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 8008be8:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 8008bea:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8008bec:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->hElAngleAccu = 0;
 8008bee:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop

08008bf4 <VSS_Init>:
{
 8008bf4:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 8008bf6:	f7ff ffef 	bl	8008bd8 <VSS_Clear>
}
 8008bfa:	bd08      	pop	{r3, pc}

08008bfc <VSS_CalcElAngle>:
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;

  if ( pHandle->bCopyObserver == true )
 8008bfc:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
{
 8008c00:	4603      	mov	r3, r0
  if ( pHandle->bCopyObserver == true )
 8008c02:	b11a      	cbz	r2, 8008c0c <VSS_CalcElAngle+0x10>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 8008c04:	f9b1 0000 	ldrsh.w	r0, [r1]
    {
      hRetAngle = pHandle->hElAngleAccu;
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 8008c08:	8098      	strh	r0, [r3, #4]
  return hRetAngle;
}
 8008c0a:	4770      	bx	lr
{
 8008c0c:	b530      	push	{r4, r5, lr}
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008c0e:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8008c12:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8008c14:	88dd      	ldrh	r5, [r3, #6]
    if ( pHandle->bTransitionStarted == true )
 8008c16:	f893 402c 	ldrb.w	r4, [r3, #44]	; 0x2c
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 8008c1a:	785a      	ldrb	r2, [r3, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8008c1c:	fb9c f2f2 	sdiv	r2, ip, r2
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008c20:	4460      	add	r0, ip
 8008c22:	fa1f fe80 	uxth.w	lr, r0
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8008c26:	442a      	add	r2, r5
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008c28:	b200      	sxth	r0, r0
 8008c2a:	8618      	strh	r0, [r3, #48]	; 0x30
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8008c2c:	80da      	strh	r2, [r3, #6]
    if ( pHandle->bTransitionStarted == true )
 8008c2e:	b1fc      	cbz	r4, 8008c70 <VSS_CalcElAngle+0x74>
      if ( pHandle->hTransitionRemainingSteps == 0 )
 8008c30:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 8008c34:	b1f2      	cbz	r2, 8008c74 <VSS_CalcElAngle+0x78>
        pHandle->hTransitionRemainingSteps--;
 8008c36:	3a01      	subs	r2, #1
 8008c38:	b212      	sxth	r2, r2
 8008c3a:	85da      	strh	r2, [r3, #46]	; 0x2e
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8008c3c:	f1bc 0f00 	cmp.w	ip, #0
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8008c40:	8809      	ldrh	r1, [r1, #0]
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8008c42:	db26      	blt.n	8008c92 <VSS_CalcElAngle+0x96>
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8008c44:	eba1 0e0e 	sub.w	lr, r1, lr
 8008c48:	fa0f fe8e 	sxth.w	lr, lr
 8008c4c:	2501      	movs	r5, #1
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 8008c4e:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	; 0x36
        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 8008c52:	fb0e f202 	mul.w	r2, lr, r2
        if ( hAngleDiff >= 0 )
 8008c56:	f1be 0f00 	cmp.w	lr, #0
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 8008c5a:	fb92 f2f4 	sdiv	r2, r2, r4
        hAngleCorr *= hSignCorr;
 8008c5e:	fb12 f205 	smulbb	r2, r2, r5
 8008c62:	b292      	uxth	r2, r2
        if ( hAngleDiff >= 0 )
 8008c64:	db0e      	blt.n	8008c84 <VSS_CalcElAngle+0x88>
          pHandle->bTransitionLocked = true;
 8008c66:	2001      	movs	r0, #1
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8008c68:	1a8a      	subs	r2, r1, r2
          pHandle->bTransitionLocked = true;
 8008c6a:	f883 0032 	strb.w	r0, [r3, #50]	; 0x32
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8008c6e:	b210      	sxth	r0, r2
  pHandle->_Super.hElAngle = hRetAngle;
 8008c70:	8098      	strh	r0, [r3, #4]
}
 8008c72:	bd30      	pop	{r4, r5, pc}
        hRetAngle = *( int16_t * )pInputVars_str;
 8008c74:	f9b1 0000 	ldrsh.w	r0, [r1]
        pHandle->_Super.bSpeedErrorNumber = 0u;
 8008c78:	701a      	strb	r2, [r3, #0]
        pHandle->bTransitionEnded = true;
 8008c7a:	2401      	movs	r4, #1
 8008c7c:	f883 402d 	strb.w	r4, [r3, #45]	; 0x2d
  pHandle->_Super.hElAngle = hRetAngle;
 8008c80:	8098      	strh	r0, [r3, #4]
}
 8008c82:	bd30      	pop	{r4, r5, pc}
          if ( pHandle->bTransitionLocked == false )
 8008c84:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
 8008c88:	2c00      	cmp	r4, #0
 8008c8a:	d0f1      	beq.n	8008c70 <VSS_CalcElAngle+0x74>
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 8008c8c:	440a      	add	r2, r1
 8008c8e:	b210      	sxth	r0, r2
 8008c90:	e7ee      	b.n	8008c70 <VSS_CalcElAngle+0x74>
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 8008c92:	ebae 0e01 	sub.w	lr, lr, r1
 8008c96:	fa0f fe8e 	sxth.w	lr, lr
 8008c9a:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8008c9e:	e7d6      	b.n	8008c4e <VSS_CalcElAngle+0x52>

08008ca0 <VSS_CalcAvrgMecSpeedUnit>:
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
  bool SpeedSensorReliability = false;

  if ( pHandle->hRemainingStep > 1u )
 8008ca0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d925      	bls.n	8008cf2 <VSS_CalcAvrgMecSpeedUnit+0x52>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8008ca6:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 8008caa:	441a      	add	r2, r3
 8008cac:	6242      	str	r2, [r0, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8008cae:	2a00      	cmp	r2, #0
 8008cb0:	bfb8      	it	lt
 8008cb2:	f502 427f 	addlt.w	r2, r2, #65280	; 0xff00

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8008cb6:	8b43      	ldrh	r3, [r0, #26]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8008cb8:	f890 c001 	ldrb.w	ip, [r0, #1]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8008cbc:	bfb8      	it	lt
 8008cbe:	32ff      	addlt	r2, #255	; 0xff
 8008cc0:	1412      	asrs	r2, r2, #16
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8008cc2:	fb02 f303 	mul.w	r3, r2, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8008cc6:	81c2      	strh	r2, [r0, #14]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8008cc8:	69c2      	ldr	r2, [r0, #28]
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8008cca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8008cce:	fb02 f20c 	mul.w	r2, r2, ip
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8008cd2:	005b      	lsls	r3, r3, #1
 8008cd4:	fb93 f3f2 	sdiv	r3, r3, r2
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8008cd8:	b21b      	sxth	r3, r3
 8008cda:	800b      	strh	r3, [r1, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;

    pHandle->hRemainingStep--;
 8008cdc:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8008cde:	8183      	strh	r3, [r0, #12]
    pHandle->hRemainingStep--;
 8008ce0:	1e53      	subs	r3, r2, #1
 8008ce2:	8503      	strh	r3, [r0, #40]	; 0x28
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 8008ce4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8008ce8:	b95b      	cbnz	r3, 8008d02 <VSS_CalcAvrgMecSpeedUnit+0x62>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8008cea:	78c2      	ldrb	r2, [r0, #3]
 8008cec:	7002      	strb	r2, [r0, #0]
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
  }

  return ( SpeedSensorReliability );
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	4770      	bx	lr
  else if ( pHandle->hRemainingStep == 1u )
 8008cf2:	d008      	beq.n	8008d06 <VSS_CalcAvrgMecSpeedUnit+0x66>
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8008cf4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8008cf8:	800b      	strh	r3, [r1, #0]
  if ( pHandle->bTransitionEnded == false )
 8008cfa:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d0f3      	beq.n	8008cea <VSS_CalcAvrgMecSpeedUnit+0x4a>
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 8008d02:	f7ff b9a9 	b.w	8008058 <SPD_IsMecSpeedReliable>
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8008d06:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	; 0x2a
 8008d0a:	f8a1 c000 	strh.w	ip, [r1]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008d0e:	8b43      	ldrh	r3, [r0, #26]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8008d10:	69c2      	ldr	r2, [r0, #28]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8008d12:	f8a0 c00c 	strh.w	ip, [r0, #12]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008d16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008d1a:	005b      	lsls	r3, r3, #1
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8008d1c:	fb02 f20c 	mul.w	r2, r2, ip
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 8008d20:	fb92 f2f3 	sdiv	r2, r2, r3
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008d24:	7843      	ldrb	r3, [r0, #1]
 8008d26:	fb13 f302 	smulbb	r3, r3, r2
    pHandle->hRemainingStep = 0u;
 8008d2a:	2200      	movs	r2, #0
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008d2c:	81c3      	strh	r3, [r0, #14]
    pHandle->hRemainingStep = 0u;
 8008d2e:	8502      	strh	r2, [r0, #40]	; 0x28
 8008d30:	e7d8      	b.n	8008ce4 <VSS_CalcAvrgMecSpeedUnit+0x44>
 8008d32:	bf00      	nop

08008d34 <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008d34:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 8008d36:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008d38:	fb91 f3f3 	sdiv	r3, r1, r3
  pHandle->_Super.hElAngle = hMecAngle;
 8008d3c:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008d3e:	80c3      	strh	r3, [r0, #6]
}
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop

08008d44 <VSS_SetMecAcceleration>:
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 8008d44:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8008d48:	b993      	cbnz	r3, 8008d70 <VSS_SetMecAcceleration+0x2c>
{
 8008d4a:	b510      	push	{r4, lr}
  {
    if ( hDurationms == 0u )
 8008d4c:	b98a      	cbnz	r2, 8008d72 <VSS_SetMecAcceleration+0x2e>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008d4e:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8008d50:	69c4      	ldr	r4, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8008d52:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008d54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008d58:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8008d5a:	fb01 f404 	mul.w	r4, r1, r4
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008d5e:	fb94 f4f3 	sdiv	r4, r4, r3

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008d62:	7843      	ldrb	r3, [r0, #1]

      pHandle->hRemainingStep = 0u;
 8008d64:	8502      	strh	r2, [r0, #40]	; 0x28
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008d66:	fb13 f304 	smulbb	r3, r3, r4
 8008d6a:	81c3      	strh	r3, [r0, #14]

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008d6c:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 8008d6e:	bd10      	pop	{r4, pc}
 8008d70:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8008d72:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8008d74:	4c12      	ldr	r4, [pc, #72]	; (8008dc0 <VSS_SetMecAcceleration+0x7c>)
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 8008d76:	f890 e001 	ldrb.w	lr, [r0, #1]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008d7a:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8008d7c:	fb03 f202 	mul.w	r2, r3, r2
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008d80:	8b43      	ldrh	r3, [r0, #26]
 8008d82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8008d86:	fba4 4202 	umull	r4, r2, r4, r2
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008d8a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008d8e:	69c3      	ldr	r3, [r0, #28]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8008d90:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8008d94:	f3c2 128f 	ubfx	r2, r2, #6, #16
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008d98:	fb01 f303 	mul.w	r3, r1, r3
      hNbrStep++;
 8008d9c:	3201      	adds	r2, #1
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8008d9e:	fb94 f1fe 	sdiv	r1, r4, lr
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008da2:	fb93 f3fc 	sdiv	r3, r3, ip
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8008da6:	1a5b      	subs	r3, r3, r1
      hNbrStep++;
 8008da8:	b292      	uxth	r2, r2
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8008daa:	041b      	lsls	r3, r3, #16
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8008dac:	0424      	lsls	r4, r4, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8008dae:	fb93 f3f2 	sdiv	r3, r3, r2
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8008db2:	fb0e f303 	mul.w	r3, lr, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8008db6:	e9c0 3408 	strd	r3, r4, [r0, #32]
      pHandle->hRemainingStep = hNbrStep;
 8008dba:	8502      	strh	r2, [r0, #40]	; 0x28
}
 8008dbc:	bd10      	pop	{r4, pc}
 8008dbe:	bf00      	nop
 8008dc0:	10624dd3 	.word	0x10624dd3

08008dc4 <VSS_SetStartTransition>:
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
  bool bAux = true;
  if ( bCommand == true )
 8008dc4:	b151      	cbz	r1, 8008ddc <VSS_SetStartTransition+0x18>
  {
    pHandle->bTransitionStarted = true;

    if ( pHandle->hTransitionSteps == 0 )
 8008dc6:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
    pHandle->bTransitionStarted = true;
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    if ( pHandle->hTransitionSteps == 0 )
 8008dd0:	b923      	cbnz	r3, 8008ddc <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionEnded = true;
 8008dd2:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 8008dd6:	7003      	strb	r3, [r0, #0]
      bAux = false;
 8008dd8:	4618      	mov	r0, r3
    }
  }
  return bAux;
}
 8008dda:	4770      	bx	lr
  bool bAux = true;
 8008ddc:	2001      	movs	r0, #1
 8008dde:	4770      	bx	lr

08008de0 <VSS_TransitionEnded>:
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
    return pHandle->bTransitionEnded;
}
 8008de0:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop

08008de8 <memset>:
 8008de8:	4402      	add	r2, r0
 8008dea:	4603      	mov	r3, r0
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d100      	bne.n	8008df2 <memset+0xa>
 8008df0:	4770      	bx	lr
 8008df2:	f803 1b01 	strb.w	r1, [r3], #1
 8008df6:	e7f9      	b.n	8008dec <memset+0x4>

08008df8 <__libc_init_array>:
 8008df8:	b570      	push	{r4, r5, r6, lr}
 8008dfa:	4d0d      	ldr	r5, [pc, #52]	; (8008e30 <__libc_init_array+0x38>)
 8008dfc:	4c0d      	ldr	r4, [pc, #52]	; (8008e34 <__libc_init_array+0x3c>)
 8008dfe:	1b64      	subs	r4, r4, r5
 8008e00:	10a4      	asrs	r4, r4, #2
 8008e02:	2600      	movs	r6, #0
 8008e04:	42a6      	cmp	r6, r4
 8008e06:	d109      	bne.n	8008e1c <__libc_init_array+0x24>
 8008e08:	4d0b      	ldr	r5, [pc, #44]	; (8008e38 <__libc_init_array+0x40>)
 8008e0a:	4c0c      	ldr	r4, [pc, #48]	; (8008e3c <__libc_init_array+0x44>)
 8008e0c:	f000 f818 	bl	8008e40 <_init>
 8008e10:	1b64      	subs	r4, r4, r5
 8008e12:	10a4      	asrs	r4, r4, #2
 8008e14:	2600      	movs	r6, #0
 8008e16:	42a6      	cmp	r6, r4
 8008e18:	d105      	bne.n	8008e26 <__libc_init_array+0x2e>
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
 8008e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e20:	4798      	blx	r3
 8008e22:	3601      	adds	r6, #1
 8008e24:	e7ee      	b.n	8008e04 <__libc_init_array+0xc>
 8008e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e2a:	4798      	blx	r3
 8008e2c:	3601      	adds	r6, #1
 8008e2e:	e7f2      	b.n	8008e16 <__libc_init_array+0x1e>
 8008e30:	0800910c 	.word	0x0800910c
 8008e34:	0800910c 	.word	0x0800910c
 8008e38:	0800910c 	.word	0x0800910c
 8008e3c:	08009110 	.word	0x08009110

08008e40 <_init>:
 8008e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e42:	bf00      	nop
 8008e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e46:	bc08      	pop	{r3}
 8008e48:	469e      	mov	lr, r3
 8008e4a:	4770      	bx	lr

08008e4c <_fini>:
 8008e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4e:	bf00      	nop
 8008e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e52:	bc08      	pop	{r3}
 8008e54:	469e      	mov	lr, r3
 8008e56:	4770      	bx	lr
